{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lrUGqqsJMzdw"
      },
      "outputs": [],
      "source": [
        "# Diego Barrios\n",
        "# Ruth Ruiz\n",
        "# Duracion de estancia hospitalaria.\n",
        "import pandas as pd\n",
        "import numpy as py\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/Datos de IA/length_of_hospital_stay.csv')\n"
      ],
      "metadata": {
        "id": "ckE3J1dqNmEC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VIIuAFf5Z535",
        "outputId": "f5543bff-de86-4ea4-d77a-5a12e5482fe5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "klKBGIu8Pcle",
        "outputId": "8dbced26-e87c-4759-f5e3-3db6925ff768"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  location     indicator subject measure frequency  time  value flag_codes\n",
              "0      AUS  HOSPITALSTAY   ACUTE     DAY         A  1960   11.5        NaN\n",
              "1      AUS  HOSPITALSTAY   ACUTE     DAY         A  1961   10.9        NaN\n",
              "2      AUS  HOSPITALSTAY   ACUTE     DAY         A  1962   10.4        NaN\n",
              "3      AUS  HOSPITALSTAY   ACUTE     DAY         A  1963    9.8        NaN\n",
              "4      AUS  HOSPITALSTAY   ACUTE     DAY         A  1964    9.8        NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-23a707d3-71cf-49f2-bdbd-a78919cb5cac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>location</th>\n",
              "      <th>indicator</th>\n",
              "      <th>subject</th>\n",
              "      <th>measure</th>\n",
              "      <th>frequency</th>\n",
              "      <th>time</th>\n",
              "      <th>value</th>\n",
              "      <th>flag_codes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1960</td>\n",
              "      <td>11.5</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1961</td>\n",
              "      <td>10.9</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1962</td>\n",
              "      <td>10.4</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1963</td>\n",
              "      <td>9.8</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1964</td>\n",
              "      <td>9.8</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23a707d3-71cf-49f2-bdbd-a78919cb5cac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-23a707d3-71cf-49f2-bdbd-a78919cb5cac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-23a707d3-71cf-49f2-bdbd-a78919cb5cac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6e8d7c53-6d56-492b-9ae0-4d54fca66135\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e8d7c53-6d56-492b-9ae0-4d54fca66135')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6e8d7c53-6d56-492b-9ae0-4d54fca66135 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1695,\n  \"fields\": [\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 37,\n        \"samples\": [\n          \"MEX\",\n          \"ITA\",\n          \"CZE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"indicator\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"HOSPITALSTAY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subject\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"CHILDBIRTH\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"measure\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"DAY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frequency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1960,\n        \"max\": 2016,\n        \"num_unique_values\": 57,\n        \"samples\": [\n          1960\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8083553654089495,\n        \"min\": 1.0,\n        \"max\": 34.4,\n        \"num_unique_values\": 172,\n        \"samples\": [\n          1.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"flag_codes\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"B\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[df != -9999].dropna(axis=1)"
      ],
      "metadata": {
        "id": "v3Q-dPsGPr1-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "AdKQw8aNPt4G",
        "outputId": "297a8fbd-9151-4d51-8968-c494fab54eb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  location     indicator subject measure frequency  time  value\n",
              "0      AUS  HOSPITALSTAY   ACUTE     DAY         A  1960   11.5\n",
              "1      AUS  HOSPITALSTAY   ACUTE     DAY         A  1961   10.9\n",
              "2      AUS  HOSPITALSTAY   ACUTE     DAY         A  1962   10.4\n",
              "3      AUS  HOSPITALSTAY   ACUTE     DAY         A  1963    9.8\n",
              "4      AUS  HOSPITALSTAY   ACUTE     DAY         A  1964    9.8"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-471a1cc7-dd86-4f2f-a73a-fea59112ff9c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>location</th>\n",
              "      <th>indicator</th>\n",
              "      <th>subject</th>\n",
              "      <th>measure</th>\n",
              "      <th>frequency</th>\n",
              "      <th>time</th>\n",
              "      <th>value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1960</td>\n",
              "      <td>11.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1961</td>\n",
              "      <td>10.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1962</td>\n",
              "      <td>10.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1963</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AUS</td>\n",
              "      <td>HOSPITALSTAY</td>\n",
              "      <td>ACUTE</td>\n",
              "      <td>DAY</td>\n",
              "      <td>A</td>\n",
              "      <td>1964</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-471a1cc7-dd86-4f2f-a73a-fea59112ff9c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-471a1cc7-dd86-4f2f-a73a-fea59112ff9c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-471a1cc7-dd86-4f2f-a73a-fea59112ff9c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bc13fa2e-a83b-4896-9ee2-2498c62350bd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc13fa2e-a83b-4896-9ee2-2498c62350bd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bc13fa2e-a83b-4896-9ee2-2498c62350bd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1695,\n  \"fields\": [\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 37,\n        \"samples\": [\n          \"MEX\",\n          \"ITA\",\n          \"CZE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"indicator\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"HOSPITALSTAY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subject\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"CHILDBIRTH\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"measure\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"DAY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"frequency\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1960,\n        \"max\": 2016,\n        \"num_unique_values\": 57,\n        \"samples\": [\n          1960\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8083553654089495,\n        \"min\": 1.0,\n        \"max\": 34.4,\n        \"num_unique_values\": 172,\n        \"samples\": [\n          1.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['time'].plot(kind='hist', bins=30, title='time')\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "ohx53xKyV5No",
        "outputId": "5655058c-89a9-4313-964f-85d5a8a1fda6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# AUSTRALIA\n",
        "pais = 'AUS'\n",
        "df_pais = df[df['location'] == pais]\n",
        "\n",
        "# Agrupar por año y sumar los valores\n",
        "df_agrupado = df_pais.groupby('time')['value'].sum().reset_index()\n",
        "\n",
        "# Mostrar los resultados\n",
        "print(df_agrupado)\n",
        "\n",
        "# Generar el gráfico\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_agrupado['time'], df_agrupado['value'], marker='o')\n",
        "plt.title(f'Total de valores por año para {pais}')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Total de valores')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "hrL_IaMKbDYn",
        "outputId": "0a3e4bb4-b14c-4a81-968b-b336391b8c76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    time  value\n",
            "0   1960   11.5\n",
            "1   1961   10.9\n",
            "2   1962   10.4\n",
            "3   1963    9.8\n",
            "4   1964    9.8\n",
            "5   1965    9.7\n",
            "6   1966    9.6\n",
            "7   1967    9.5\n",
            "8   1968    9.3\n",
            "9   1969    9.1\n",
            "10  1970    8.7\n",
            "11  1971    8.5\n",
            "12  1972    8.3\n",
            "13  1973    8.3\n",
            "14  1974    8.3\n",
            "15  1975    8.3\n",
            "16  1976    8.0\n",
            "17  1977    7.7\n",
            "18  1978    7.5\n",
            "19  1979    7.8\n",
            "20  1980    7.7\n",
            "21  1981    7.3\n",
            "22  1982    6.9\n",
            "23  1983    6.7\n",
            "24  1984    6.7\n",
            "25  1985    7.4\n",
            "26  1987    7.4\n",
            "27  1989    7.2\n",
            "28  1991    6.5\n",
            "29  1992    6.6\n",
            "30  1993   10.3\n",
            "31  1994   10.2\n",
            "32  1995   10.0\n",
            "33  1996    9.6\n",
            "34  1997    9.3\n",
            "35  1998    9.1\n",
            "36  1999    9.2\n",
            "37  2000    9.0\n",
            "38  2001    9.1\n",
            "39  2002    9.0\n",
            "40  2003    8.9\n",
            "41  2004    8.7\n",
            "42  2005    8.5\n",
            "43  2006    8.4\n",
            "44  2007    2.4\n",
            "45  2008    7.6\n",
            "46  2009    7.4\n",
            "47  2010    7.7\n",
            "48  2011    7.7\n",
            "49  2012    7.5\n",
            "50  2013    7.3\n",
            "51  2014    7.3\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# CANADA\n",
        "pais = 'CAN'\n",
        "df_pais = df[df['location'] == pais]\n",
        "\n",
        "# Agrupar por año y sumar los valores\n",
        "df_agrupado = df_pais.groupby('time')['value'].sum().reset_index()\n",
        "\n",
        "# Mostrar los resultados\n",
        "print(df_agrupado)\n",
        "\n",
        "# Generar el gráfico\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_agrupado['time'], df_agrupado['value'], marker='o')\n",
        "plt.title(f'Total de valores por año para {pais}')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Total de valores')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "lqyAmzrlbvHe",
        "outputId": "87e8b671-9aef-4296-ef16-ad673bbec8d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    time  value\n",
            "0   1980   14.7\n",
            "1   1981   14.8\n",
            "2   1982   14.4\n",
            "3   1983   14.4\n",
            "4   1984   14.5\n",
            "5   1985   14.6\n",
            "6   1986   14.4\n",
            "7   1987   14.5\n",
            "8   1988   14.3\n",
            "9   1989   13.9\n",
            "10  1990   13.7\n",
            "11  1991   13.3\n",
            "12  1992   12.9\n",
            "13  1993   12.6\n",
            "14  1994    9.9\n",
            "15  1995    9.4\n",
            "16  1996    9.2\n",
            "17  1997    9.1\n",
            "18  1998    9.0\n",
            "19  1999    9.1\n",
            "20  2000    9.2\n",
            "21  2001    9.3\n",
            "22  2002    9.4\n",
            "23  2003    9.2\n",
            "24  2004    9.2\n",
            "25  2005    9.0\n",
            "26  2006    9.2\n",
            "27  2007    9.3\n",
            "28  2008    9.5\n",
            "29  2009    9.4\n",
            "30  2010    9.4\n",
            "31  2011    9.3\n",
            "32  2012    9.2\n",
            "33  2013    9.1\n",
            "34  2014    9.2\n",
            "35  2015    8.9\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# EEUU\n",
        "pais = 'USA'\n",
        "df_pais = df[df['location'] == pais]\n",
        "\n",
        "# Agrupar por año y sumar los valores\n",
        "df_agrupado = df_pais.groupby('time')['value'].sum().reset_index()\n",
        "\n",
        "# Mostrar los resultados\n",
        "print(df_agrupado)\n",
        "\n",
        "# Generar el gráfico\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_agrupado['time'], df_agrupado['value'], marker='o')\n",
        "plt.title(f'Total de valores por año para {pais}')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Total de valores')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "HCNZ_F7scMhP",
        "outputId": "dc244151-004c-4e10-83df-dba52f5e182f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    time  value\n",
            "0   1960    7.6\n",
            "1   1961    7.6\n",
            "2   1962    7.6\n",
            "3   1963    7.7\n",
            "4   1964    7.7\n",
            "5   1965    7.8\n",
            "6   1966    7.9\n",
            "7   1967    8.3\n",
            "8   1968    8.4\n",
            "9   1969    8.3\n",
            "10  1970    8.2\n",
            "11  1971    8.0\n",
            "12  1972    7.9\n",
            "13  1973    7.8\n",
            "14  1974    7.8\n",
            "15  1975    7.7\n",
            "16  1976    7.7\n",
            "17  1977    7.6\n",
            "18  1978    7.6\n",
            "19  1979    7.6\n",
            "20  1980    7.6\n",
            "21  1981    7.6\n",
            "22  1982    7.6\n",
            "23  1983    7.6\n",
            "24  1984    7.3\n",
            "25  1985    7.1\n",
            "26  1986    7.1\n",
            "27  1987    7.2\n",
            "28  1988    7.2\n",
            "29  1989    7.3\n",
            "30  1990    9.3\n",
            "31  1991    9.2\n",
            "32  1992    9.0\n",
            "33  1993    8.8\n",
            "34  1994    8.6\n",
            "35  1995    8.0\n",
            "36  1996    7.8\n",
            "37  1997    7.9\n",
            "38  1998    7.8\n",
            "39  1999    7.8\n",
            "40  2000    7.7\n",
            "41  2001    7.7\n",
            "42  2002    7.6\n",
            "43  2003    7.6\n",
            "44  2004    7.5\n",
            "45  2005    7.5\n",
            "46  2006    7.5\n",
            "47  2007    7.4\n",
            "48  2008    7.6\n",
            "49  2009    7.4\n",
            "50  2010    7.4\n",
            "51  2011    5.4\n",
            "52  2012    5.4\n",
            "53  2013    5.4\n",
            "54  2014    5.5\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#MEXICO\n",
        "pais = 'MEX'\n",
        "df_pais = df[df['location'] == pais]\n",
        "\n",
        "# Agrupar por año y sumar los valores\n",
        "df_agrupado = df_pais.groupby('time')['value'].sum().reset_index()\n",
        "\n",
        "# Mostrar los resultados\n",
        "#print(df_agrupado)\n",
        "\n",
        "# Generar el gráfico\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_agrupado['time'], df_agrupado['value'], marker='o')\n",
        "plt.title(f'Total de valores por año para {pais}')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Total de valores')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "wtpdr_Nkcwmk",
        "outputId": "2beacd14-7020-4ac6-ea2c-13fcb6f3b1f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#FINLANDIA\n",
        "pais = 'FIN'\n",
        "df_pais = df[df['location'] == pais]\n",
        "\n",
        "# Agrupar por año y sumar los valores\n",
        "df_agrupado = df_pais.groupby('time')['value'].sum().reset_index()\n",
        "\n",
        "# Mostrar los resultados\n",
        "#print(df_agrupado)\n",
        "\n",
        "# Generar el gráfico\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_agrupado['time'], df_agrupado['value'], marker='o')\n",
        "plt.title(f'Total de valores por año para {pais}')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Total de valores')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "iPrLHKLFdTlS",
        "outputId": "7354fcad-ac0a-4d04-de14-d805bde212c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#COREA\n",
        "pais = 'KOR'\n",
        "df_pais = df[df['location'] == pais]\n",
        "\n",
        "# Agrupar por año y sumar los valores\n",
        "df_agrupado = df_pais.groupby('time')['value'].sum().reset_index()\n",
        "\n",
        "# Mostrar los resultados\n",
        "print(df_agrupado)\n",
        "\n",
        "# Generar el gráfico\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_agrupado['time'], df_agrupado['value'], marker='o')\n",
        "plt.title(f'Total de valores por año para {pais}')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Total de valores')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "GwL_Bk5Bku1B",
        "outputId": "b07929e4-7dfb-4d85-e3ea-80509f88c1ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    time  value\n",
            "0   1980   10.0\n",
            "1   1981   10.0\n",
            "2   1982   10.0\n",
            "3   1983   10.0\n",
            "4   1984   10.0\n",
            "5   1985   11.0\n",
            "6   1986   11.0\n",
            "7   1987   10.0\n",
            "8   1988   11.0\n",
            "9   1989   11.0\n",
            "10  1990   12.0\n",
            "11  1991   11.0\n",
            "12  1992   11.0\n",
            "13  1993   11.0\n",
            "14  1994   11.0\n",
            "15  1995   11.0\n",
            "16  1996   13.8\n",
            "17  1997   11.0\n",
            "18  1998   11.0\n",
            "19  1999   12.4\n",
            "20  2000   11.0\n",
            "21  2001   11.0\n",
            "22  2002   13.5\n",
            "23  2003   10.6\n",
            "24  2005    3.1\n",
            "25  2008    3.0\n",
            "26  2009    2.5\n",
            "27  2010   12.5\n",
            "28  2011   12.7\n",
            "29  2012   11.6\n",
            "30  2013   11.4\n",
            "31  2014   10.8\n",
            "32  2015   10.4\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Agrupar por año y calcular la media de los valores\n",
        "df_media = df.groupby('time')['value'].mean().reset_index()\n",
        "\n",
        "# Mostrar los resultados\n",
        "#print(df_media)\n",
        "\n",
        "# Generar el gráfico de barras\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(df_media['time'], df_media['value'], color='skyblue')\n",
        "plt.title('Media de valores por año')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Media de valores')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "ZFCCzFn-f5Ks",
        "outputId": "0b97f453-6dc9-4168-894b-800c9592ff92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0kAAAIjCAYAAADWYVDIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABIz0lEQVR4nO3dd3hUZf7+8XsCIYUkBEgCREITpIo0C0QpGroirtJdmrIsYEEWFdYGimKlCAjiIihfEUTAwi5oUIpo6EFQkaIUFQFpCRBMfX5/+GM8k8ZMnJbk/bourot5znPm+Zz5JCE358wZmzHGCAAAAAAgSQrwdQEAAAAA4E8ISQAAAABgQUgCAAAAAAtCEgAAAABYEJIAAAAAwIKQBAAAAAAWhCQAAAAAsCAkAQAAAIAFIQkAAAAALAhJAFAC1KpVS4MHD7Y/XrdunWw2m9atW+fRdRcsWCCbzaZDhw55dJ2i8tbrUNpt2LBB0dHRuvbaa7Vnzx7985//1NSpU31dFgAUGSEJANzkUmCw2WzauHFjnu3GGMXFxclms+nWW2/1QYWAZ8yYMUM9evRQ48aN1bRpU7333nvq2bOnr8sCgCIr6+sCAKCkCQ4O1qJFi3TjjTc6jK9fv14///yzgoKCPF5D27ZtdfHiRZUrV87jawHTp09XxYoVFRISoldeeUUhISEKDQ31dVkAUGScSQIAN+vWrZuWLl2qrKwsh/FFixapZcuWqlq1qsdrCAgIUHBwsAIC+DHvThcuXPB1CW7z+++/Kycnxy3PFRsbq5CQEElS5cqVCUgAij3+9QQAN+vXr59OnTqlxMRE+1hGRobef/999e/fP999cnJyNG3aNDVu3FjBwcGqUqWKhg8frjNnzjjMM8Zo0qRJql69ukJDQ9WhQwd9++23eZ4vv/fifPHFF+rVq5dq1KihoKAgxcXF6aGHHtLFixedOq5vv/1WN998s0JCQlS9enVNmjSpwF+yV61apZtuuknly5dXeHi4unfvnm+dVtu2bZPNZtNbb72VZ9snn3wim82mlStXSpIOHz6skSNHqn79+goJCVHlypXVq1cvp98btXTpUrVs2VIhISGKiorS3XffrV9++cVhzuDBgxUWFqYffvhB3bp1U3h4uAYMGCDJ+X5t27ZNnTt3VlRUlEJCQlS7dm0NHTr0svXVqlVLt956qz799FM1a9ZMwcHBatSokZYvX55n7o8//qhevXqpUqVKCg0N1Q033KD//ve/DnMufT0sXrxYjz/+uK644gqFhoYqNTW1wBpefvlltWnTRpUrV1ZISIhatmyp999/P888m82m++67Tx988IGaNGmioKAgNW7cWKtXr84zNzk5WV27dlVERITCwsJ0yy23aNOmTZd9PQDA27jcDgDcrFatWmrdurXeffddde3aVdIfoSElJUV9+/bVq6++mmef4cOHa8GCBRoyZIgeeOABHTx4UDNnzlRycrK+/PJLBQYGSpKefPJJTZo0Sd26dVO3bt20Y8cOderUSRkZGZeta+nSpUpLS9OIESNUuXJlbdmyRTNmzNDPP/+spUuXFrrvsWPH1KFDB2VlZWncuHEqX7685s6daz97YLVw4UINGjRInTt31gsvvKC0tDTNnj1bN954o5KTk1WrVq1812jVqpXq1Kmj9957T4MGDXLYtmTJElWsWFGdO3eWJG3dulVfffWV+vbtq+rVq+vQoUOaPXu22rdvr++++67QMxmXXudrr71WkydP1vHjxzV9+nR9+eWXSk5OVmRkpH1uVlaWOnfurBtvvFEvv/yy/Xmd6deJEyfUqVMnRUdHa9y4cYqMjNShQ4fyDTr52b9/v/r06aN//vOfGjRokObPn69evXpp9erV6tixoyTp+PHjatOmjdLS0vTAAw+ocuXKeuutt9SjRw+9//77uuOOOxye85lnnlG5cuU0duxYpaenF3o55vTp09WjRw8NGDBAGRkZWrx4sXr16qWVK1eqe/fuDnM3btyo5cuXa+TIkQoPD9err76qO++8U0eOHFHlypUl/RGyb7rpJkVEROiRRx5RYGCgXn/9dbVv317r16/X9ddf79TrAgBeYQAAbjF//nwjyWzdutXMnDnThIeHm7S0NGOMMb169TIdOnQwxhhTs2ZN0717d/t+X3zxhZFk3nnnHYfnW716tcP4iRMnTLly5Uz37t1NTk6Ofd6///1vI8kMGjTIPrZ27Vojyaxdu9Y+dqkWq8mTJxubzWYOHz5c6LGNHj3aSDKbN2+2j504ccJUqFDBSDIHDx40xhhz7tw5ExkZaYYNG+aw/7Fjx0yFChXyjOc2fvx4ExgYaE6fPm0fS09PN5GRkWbo0KGFHktSUpKRZN5++237WO7XISMjw8TExJgmTZqYixcv2uetXLnSSDJPPvmkfWzQoEFGkhk3bpzDOs72a8WKFfavB1fVrFnTSDLLli2zj6WkpJhq1aqZ5s2b28cu9eWLL76wj507d87Url3b1KpVy2RnZzu8DnXq1Mn3tctP7nkZGRmmSZMm5uabb3YYl2TKlStnDhw4YB/7+uuvjSQzY8YM+1jPnj1NuXLlzA8//GAfO3r0qAkPDzdt27Z1qiYA8BYutwMAD+jdu7cuXryolStX6ty5c1q5cmWBl9otXbpUFSpUUMeOHXXy5En7n5YtWyosLExr166VJK1Zs0YZGRm6//77ZbPZ7PuPHj3aqZqsZ30uXLigkydPqk2bNjLGKDk5udB9//e//+mGG27QddddZx+Ljo62X352SWJios6ePat+/fo5HEuZMmV0/fXX24+lIH369FFmZqbD2ZZPP/1UZ8+eVZ8+ffI9lszMTJ06dUp169ZVZGSkduzYUeDzb9u2TSdOnNDIkSMVHBxsH+/evbsaNGiQ5zI1SRoxYoTDY2f7demM1MqVK5WZmVnocecnNjbW4UxQRESEBg4cqOTkZB07dkzSH3257rrrHG4SEhYWpn/84x86dOiQvvvuO4fnHDRoUL5n//JjnXfmzBmlpKTopptuyvf1TUhI0JVXXml/3LRpU0VEROjHH3+UJGVnZ+vTTz9Vz549VadOHfu8atWqqX///tq4cWOhl/4BgLdxuR0AeEB0dLQSEhK0aNEipaWlKTs7W3fddVe+c/fv36+UlBTFxMTku/3EiROS/ngfjiTVq1cvz1oVK1a8bE1HjhzRk08+qY8++ijPe2dSUlIK3ffw4cP5Xg5Vv359h8f79++XJN188835Pk9ERESh61xzzTVq0KCBlixZonvuuUfSH5faRUVFOTznxYsXNXnyZM2fP1+//PKLjDFOHcul1zB33ZLUoEGDPLduL1u2rKpXr+4w5my/2rVrpzvvvFMTJ07U1KlT1b59e/Xs2VP9+/d36g6HdevWdQjDknTVVVdJkg4dOqSqVasW2JeGDRvaj7dJkyb28dq1a1923UtWrlypSZMmaefOnUpPT7eP565JkmrUqJFnrGLFivavs99++01paWn5vu4NGzZUTk6OfvrpJzVu3Njp+gDAkwhJAOAh/fv317Bhw3Ts2DF17drV4b0uVjk5OYqJidE777yT7/bo6Oi/XEt2drY6duyo06dP69FHH1WDBg1Uvnx5/fLLLxo8eLDb7nJ26XkWLlyY7138ypa9/D87ffr00bPPPquTJ08qPDxcH330kfr16+ew7/3336/58+dr9OjRat26tSpUqCCbzaa+ffu67VgkKSgoKM8dAp3tl81m0/vvv69Nmzbp448/1ieffKKhQ4fqlVde0aZNmxQWFua2Op3l7FmkL774Qj169FDbtm312muvqVq1agoMDNT8+fO1aNGiPPPLlCmT7/NYwysAFCeEJADwkDvuuEPDhw/Xpk2btGTJkgLnXXnllVqzZo3i4+ML/SW2Zs2akv44k2G9ZOm3337Lc2Yot927d2vfvn166623NHDgQPu49Q58halZs6b9LJHV3r178xyLJMXExCghIcGp586tT58+mjhxopYtW6YqVaooNTVVffv2dZjz/vvva9CgQXrllVfsY7///rvOnj172eO4VHfus1179+61by+Ms/265IYbbtANN9ygZ599VosWLdKAAQO0ePFi3XvvvYXud+DAARljHM7c7Nu3T5LsN7+oWbNmnh5I0vfff2/fXhTLli1TcHCwPvnkE4ezXvPnzy/S80VHRys0NLTAWgMCAhQXF1ek5wYAT+A9SQDgIWFhYZo9e7YmTJig2267rcB5vXv3VnZ2tp555pk827Kysuy/+CckJCgwMFAzZsxw+B/6adOmXbaWS//Tb93PGKPp06c7dSzdunXTpk2btGXLFvvYb7/9ludsSufOnRUREaHnnnsu3/fh/Pbbb5ddq2HDhrr66qu1ZMkSLVmyRNWqVVPbtm3zHE/usxQzZsxQdnZ2oc/dqlUrxcTEaM6cOQ6XkK1atUp79uzJc9e2/DjbrzNnzuSpsVmzZpLksHZBjh49qhUrVtgfp6am6u2331azZs3sZ+m6deumLVu2KCkpyT7vwoULmjt3rmrVqqVGjRpddp38lClTRjabzeH1PHTokD744IMiP1+nTp304YcfOtym/fjx4/YPXr7cpZgA4E2cSQIAD8p9K+v8tGvXTsOHD9fkyZO1c+dOderUSYGBgdq/f7+WLl2q6dOn66677lJ0dLTGjh2ryZMn69Zbb1W3bt2UnJysVatWKSoqqtA1GjRooCuvvFJjx47VL7/8ooiICC1btuyyZ6AueeSRR7Rw4UJ16dJFDz74oP0W4DVr1tSuXbvs8yIiIjR79mz9/e9/V4sWLdS3b19FR0fryJEj+u9//6v4+HjNnDnzsuv16dNHTz75pIKDg3XPPffkueTt1ltv1cKFC1WhQgU1atRISUlJWrNmjf120wUJDAzUCy+8oCFDhqhdu3bq16+f/RbgtWrV0kMPPXTZ2pzt11tvvaXXXntNd9xxh6688kqdO3dOb7zxhiIiItStW7fLrnPVVVfpnnvu0datW1WlShW9+eabOn78uMPZnHHjxtlvNf/AAw+oUqVKeuutt3Tw4EEtW7asyB8m3L17d02ZMkVdunRR//79deLECc2aNUt169Z16LcrJk2apMTERN14440aOXKkypYtq9dff13p6el68cUXi/ScAOAxPruvHgCUMNZbgBcm9y3AL5k7d65p2bKlCQkJMeHh4ebqq682jzzyiDl69Kh9TnZ2tpk4caKpVq2aCQkJMe3btzfffPONqVmz5mVvAf7dd9+ZhIQEExYWZqKiosywYcPst2qeP3/+ZY9v165dpl27diY4ONhcccUV5plnnjHz5s1zuAW4df3OnTubChUqmODgYHPllVeawYMHm23btl12HWOM2b9/v5FkJJmNGzfm2X7mzBkzZMgQExUVZcLCwkznzp3N999/79TrYIwxS5YsMc2bNzdBQUGmUqVKZsCAAebnn392mDNo0CBTvnz5Amu8XL927Nhh+vXrZ2rUqGGCgoJMTEyMufXWW516DS59jXzyySemadOmJigoyDRo0MAsXbo0z9wffvjB3HXXXSYyMtIEBweb6667zqxcudJhzqXXIb/9CzJv3jxTr149+9rz5883Tz31lMn9q4MkM2rUqHyPwdoLY/54TTp37mzCwsJMaGio6dChg/nqq6+crgkAvMVmDO+qBADAn9SqVUtNmjTRypUrfV0KAJRKvCcJAAAAACwISQAAAABgQUgCAAAAAAvekwQAAAAAFpxJAgAAAAALQhIAAAAAWJT4D5PNycnR0aNHFR4eLpvN5utyAAAAAPiIMUbnzp1TbGxsoR+4XeJD0tGjRxUXF+frMgAAAAD4iZ9++knVq1cvcHuJD0nh4eGS/nghIiIifFxNXpmZmfr000/VqVMnBQYG+roceBj9Ll3od+lCv0sX+l260O+SIzU1VXFxcfaMUJASH5IuXWIXERHhtyEpNDRUERERfNOVAvS7dKHfpQv9Ll3od+lCv0uey70Nhxs3AAAAAIAFIQkAAAAALAhJAAAAAGBBSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgUdbXBQAFeT755GXnjGse5YVKAAAAUJpwJgkAAAAALAhJAAAAAGBBSAIAAAAAC0ISAAAAAFhw4wYvy30zgoCcLNWXNHXXKeUE/NkObkgAAAAA+AZnkgAAAADAgpAEAAAAABZcbocSw5nPVZK4lBEAAACFIyQVAyXhQ1UJMAAAACguuNwOAAAAACwISQAAAABgweV2JRCXtgEAAABFR0hCqUWYBAAAQH643A4AAAAALAhJAAAAAGDB5XYo0mVnXKoGAACAkoozSQAAAABgQUgCAAAAAAtCEgAAAABY8J4kwAW8FwsAAKDk8+mZpA0bNui2225TbGysbDabPvjgA/u2zMxMPfroo7r66qtVvnx5xcbGauDAgTp69KjvCgYAAABQ4vk0JF24cEHXXHONZs2alWdbWlqaduzYoSeeeEI7duzQ8uXLtXfvXvXo0cMHlQIAAAAoLXx6uV3Xrl3VtWvXfLdVqFBBiYmJDmMzZ87UddddpyNHjqhGjRreKBEAAABAKVOs3pOUkpIim82myMjIAuekp6crPT3d/jg1NVXSH5fvZWZmerrEywrIycr3ce5xa625t+XH1fnWfVyd709r+GNNuffJb9wfvhbhefS7dKHfpQv9Ll3od8nhbA9txhjj4VqcYrPZtGLFCvXs2TPf7b///rvi4+PVoEEDvfPOOwU+z4QJEzRx4sQ844sWLVJoaKi7ygUAAABQzKSlpal///5KSUlRREREgfOKRUjKzMzUnXfeqZ9//lnr1q0r9IDyO5MUFxenkydPFrqft0zddcrhcUBOluod3a79sS2VE/Dnib2HmlYucJ/8uDrfuo+r8/1pDX+sKfc+VpmZmUpMTFTHjh0VGBjo1HOh+KLfpQv9Ll3od+lCv0uO1NRURUVFXTYk+f3ldpmZmerdu7cOHz6szz///LJBJygoSEFBQXnGAwMD/eKL2hqEco9bt1lrLWgfK1fnW/dxdb4/reGPNeXep6Dt/vD1CO+g36UL/S5d6HfpQr+LP2f759ch6VJA2r9/v9auXavKlfP/33kAAAAAcBefhqTz58/rwIED9scHDx7Uzp07ValSJVWrVk133XWXduzYoZUrVyo7O1vHjh2TJFWqVEnlypXzVdkAAAAASjCfhqRt27apQ4cO9sdjxoyRJA0aNEgTJkzQRx99JElq1qyZw35r165V+/btvVUmAAAAgFLEpyGpffv2Kuy+EX5yTwkAAAAApUiArwsAAAAAAH9CSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCirK8LAEqy55NPOjwOyMlSfUlTd51STsCf337jmkd5uTIAAAAUhDNJAAAAAGBBSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgQUgCAAAAAAtCEgAAAABYEJIAAAAAwIKQBAAAAAAWhCQAAAAAsCAkAQAAAIAFIQkAAAAALAhJAAAAAGBBSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACARVlfFwDAu55PPunUvHHNozxcCQAAgH/iTBIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACAhU/vbrdhwwa99NJL2r59u3799VetWLFCPXv2tG83xuipp57SG2+8obNnzyo+Pl6zZ89WvXr1fFc0gMviDnoAAKA48+mZpAsXLuiaa67RrFmz8t3+4osv6tVXX9WcOXO0efNmlS9fXp07d9bvv//u5UoBAAAAlBY+PZPUtWtXde3aNd9txhhNmzZNjz/+uG6//XZJ0ttvv60qVarogw8+UN++fb1ZKuA1zpyFsZ6B8cZZG84MAQCA0sRvP0z24MGDOnbsmBISEuxjFSpU0PXXX6+kpKQCQ1J6errS09Ptj1NTUyVJmZmZyszM9GzRTgjIycr3ce5xa625t+XH1fnWfVyd709r+GNNha1BvwteoyS6dHwl/TjxB/pdutDv0oV+lxzO9tBmjDEersUpNpvN4T1JX331leLj43X06FFVq1bNPq93796y2WxasmRJvs8zYcIETZw4Mc/4okWLFBoa6pHaAQAAAPi/tLQ09e/fXykpKYqIiChwnt+eSSqq8ePHa8yYMfbHqampiouLU6dOnQp9Ibxl6q5TDo8DcrJU7+h27Y9tqZyAP9vxUNPKBe6TH1fnW/dxdb4/reGPNRW2Bv0ueI2SKDMzU4mJierYsaMCAwN9XQ48jH6XLvS7dKHfJcelq8wux29DUtWqVSVJx48fdziTdPz4cTVr1qzA/YKCghQUFJRnPDAw0C++qK2/GOcet26z1lrQPlauzrfu4+p8f1rDH2tyZg36nXeNksxffv7AO+h36UK/Sxf6Xfw52z+//Zyk2rVrq2rVqvrss8/sY6mpqdq8ebNat27tw8oAAAAAlGQ+PZN0/vx5HThwwP744MGD2rlzpypVqqQaNWpo9OjRmjRpkurVq6fatWvriSeeUGxsrMNnKQEAAACAO/k0JG3btk0dOnSwP770XqJBgwZpwYIFeuSRR3ThwgX94x//0NmzZ3XjjTdq9erVCg4O9lXJAAAAAEo4n4ak9u3bq7Cb69lsNj399NN6+umnvVgVAF/gs5gAAIC/8Nv3JAEAAACALxCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgQUgCAAAAAAtCEgAAAABYEJIAAAAAwIKQBAAAAAAWhCQAAAAAsCjr6wIAoKR4Pvmkw+OAnCzVlzR11ynlBPz543Zc8ygvVwYAAFzBmSQAAAAAsCAkAQAAAIAFIQkAAAAALHhPEoBiKff7fwrC+38AAICrOJMEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFmV9XQAAlGbPJ590at645lEergQAAFzCmSQAAAAAsCAkAQAAAIAFl9sBKBW4rA0AADiLM0kAAAAAYEFIAgAAAAALLrcDgAJwiZ7n8NoCAPwZZ5IAAAAAwIKQBAAAAAAWXG4HAPhLuHQOAFDScCYJAAAAACwISQAAAABgweV2AFCMuHppG5fCAQDgOkISAMDvEfYAAN7E5XYAAAAAYEFIAgAAAAALLrcDAJQ4XJ4HAPgrOJMEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsuHEDAMABNz0AAJR2nEkCAAAAAAvOJAEAIM6gAQD+xJkkAAAAALBwOSTt2LFDu3fvtj/+8MMP1bNnT/373/9WRkaGW4sDAAAAAG9zOSQNHz5c+/btkyT9+OOP6tu3r0JDQ7V06VI98sgjbi8QAAAAALzJ5ZC0b98+NWvWTJK0dOlStW3bVosWLdKCBQu0bNkyd9cHAAAAAF7lckgyxignJ0eStGbNGnXr1k2SFBcXp5MnnXvTKwAAAAD4K5dDUqtWrTRp0iQtXLhQ69evV/fu3SVJBw8eVJUqVdxeIAAAAAB4k8shadq0adqxY4fuu+8+PfbYY6pbt64k6f3331ebNm3cXiAAAAAAeJPLn5PUtGlTh7vbXfLSSy+pTJkybikKAAAAAHylSJ+TdPbsWf3nP//R+PHjdfr0aUnSd999pxMnTri1OAAAAADwNpfPJO3atUu33HKLIiMjdejQIQ0bNkyVKlXS8uXLdeTIEb399ttuKy47O1sTJkzQ//3f/+nYsWOKjY3V4MGD9fjjj8tms7ltHQAASqvnk5276dK45lEergQA/IfLZ5LGjBmjIUOGaP/+/QoODraPd+vWTRs2bHBrcS+88IJmz56tmTNnas+ePXrhhRf04osvasaMGW5dBwAAAAAucflM0tatW/X666/nGb/iiit07NgxtxR1yVdffaXbb7/dfge9WrVq6d1339WWLVsK3Cc9PV3p6en2x6mpqZKkzMxMZWZmurW+ogjIycr3ce5xa625t+XH1fnWfVyd709r+GNNha1Bv323RnHud2FruHt+SVnDGzUVNO4P/9a44q8ed2lVXPuNoqHfJYezPbQZY4wrTxwTE6NPPvlEzZs3V3h4uL7++mvVqVNHiYmJGjp0qH766aciFZyf5557TnPnztWnn36qq666Sl9//bU6deqkKVOmaMCAAfnuM2HCBE2cODHP+KJFixQaGuq22gAAAAAUL2lpaerfv79SUlIUERFR4DyXQ9K9996rU6dO6b333lOlSpW0a9culSlTRj179lTbtm01bdq0v1q7XU5Ojv7973/rxRdfVJkyZZSdna1nn31W48ePL3Cf/M4kXfqg28JeCG+ZuuuUw+OAnCzVO7pd+2NbKifgzxN7DzWtXOA++XF1vnUfV+f70xr+WFNha9Bv361RnPtd2Brunl9S1vDXfvujorxW+ON/oxMTE9WxY0cFBgb6uhx4GP0uOVJTUxUVFXXZkOTy5XavvPKK7rrrLsXExOjixYtq166djh07ptatW+vZZ5/9S0Xn9t577+mdd97RokWL1LhxY+3cuVOjR49WbGysBg0alO8+QUFBCgoKyjMeGBjoF1/U1n84c49bt1lrLWgfK1fnW/dxdb4/reGPNTmzBv32/hrFud/OrOGu+SVlDX/ttz8qymuFP/nL7xfwDvpd/DnbP5dDUoUKFZSYmKgvv/xSX3/9tc6fP68WLVooISHB5SIv5+GHH9a4cePUt29fSdLVV1+tw4cPa/LkyQWGJAAAAAD4K1wKSZmZmQoJCdHOnTsVHx+v+Ph4T9Ul6Y9rBgMCHG/AV6ZMGeXk5Hh0XQAAAACll0shKTAwUDVq1FB2dran6nFw22236dlnn1WNGjXUuHFjJScna8qUKRo6dKhX1gcAAABQ+rj8OUmPPfaY/v3vf+v06dOeqMfBjBkzdNddd2nkyJFq2LChxo4dq+HDh+uZZ57x+NoAAAAASieX35M0c+ZMHThwQLGxsapZs6bKly/vsH3Hjh1uKy48PFzTpk1z6x3zAADwleeTTzo1b1zzqCLNBwC4h8shqWfPnh4oAwAAAAD8g8sh6amnnvJEHQAAAADgF1wOSZds375de/bskSQ1btxYzZs3d1tRAAAAAOArLoekEydOqG/fvlq3bp0iIyMlSWfPnlWHDh20ePFiRUdHu7tGAAAAAPAal+9ud//99+vcuXP69ttvdfr0aZ0+fVrffPONUlNT9cADD3iiRgAAAADwGpfPJK1evVpr1qxRw4YN7WONGjXSrFmz1KlTJ7cWBwAA/At33ANQGrh8JiknJ0eBgYF5xgMDA5WTk+OWogAAAADAV1wOSTfffLMefPBBHT161D72yy+/6KGHHtItt9zi1uIAAAAAwNtcDkkzZ85UamqqatWqpSuvvFJXXnmlateurdTUVM2YMcMTNQIAAACA17j8nqS4uDjt2LFDa9as0ffffy9JatiwoRISEtxeHAAAAAB4W5E+J8lms6ljx47q2LGju+sBAABFxE0VAMA9nApJr776qtNPyG3AAQAAABRnToWkqVOnOvVkNpuNkAQAAACgWHMqJB08eNDTdQAAAACAX3D57nYAAAAAUJIV6cYNP//8sz766CMdOXJEGRkZDtumTJnilsIAAEDJwA0lABQ3Loekzz77TD169FCdOnX0/fffq0mTJjp06JCMMWrRooUnagQAAAAAr3H5crvx48dr7Nix2r17t4KDg7Vs2TL99NNPateunXr16uWJGgEAAADAa1wOSXv27NHAgQMlSWXLltXFixcVFhamp59+Wi+88ILbCwQAAAAAb3I5JJUvX97+PqRq1arphx9+sG87edK5a44BAAAAwF+5/J6kG264QRs3blTDhg3VrVs3/etf/9Lu3bu1fPly3XDDDZ6oEQAAAAC8xuWQNGXKFJ0/f16SNHHiRJ0/f15LlixRvXr1uLMdAAAAgGLP5ZBUp04d+9/Lly+vOXPmuLUgAAAAAPAll0PSvffeq7vvvlvt27f3QDkAAKC043OVAPiayzdu+O2339SlSxfFxcXp4Ycf1tdff+2JugAAAADAJ1wOSR9++KF+/fVXPfHEE9q6datatGihxo0b67nnntOhQ4c8UCIAAAAAeI/LIUmSKlasqH/84x9at26dDh8+rMGDB2vhwoWqW7euu+sDAAAAAK8qUki6JDMzU9u2bdPmzZt16NAhValSxV11AQAAAIBPFCkkrV27VsOGDVOVKlU0ePBgRUREaOXKlfr555/dXR8AAAAAeJXLd7e74oordPr0aXXp0kVz587VbbfdpqCgIE/UBgAAAABe53JImjBhgnr16qXIyEgPlAMAAAAAvuVySBo2bJgn6gAAACgSPlcJgLv9pRs3AAAAAEBJQ0gCAAAAAAtCEgAAAABYEJIAAAAAwKJIIWnhwoWKj49XbGysDh8+LEmaNm2aPvzwQ7cWBwAAAADe5nJImj17tsaMGaNu3brp7Nmzys7OliRFRkZq2rRp7q4PAAAAALzK5ZA0Y8YMvfHGG3rsscdUpkwZ+3irVq20e/dutxYHAAAAAN7mckg6ePCgmjdvnmc8KChIFy5ccEtRAAAAAOArLoek2rVra+fOnXnGV69erYYNG7qjJgAAAADwmbKu7jBmzBiNGjVKv//+u4wx2rJli959911NnjxZ//nPfzxRIwAAgFs9n3zSqXnjmkd5uBIA/sjlkHTvvfcqJCREjz/+uNLS0tS/f3/FxsZq+vTp6tu3rydqBAAAAACvcTkkSdKAAQM0YMAApaWl6fz584qJiXF3XQAAAADgE0UKSZeEhoYqNDTUXbUAAAAAgM85FZKaN28um83m1BPu2LHjLxUEAAAAAL7kVEjq2bOn/e+///67XnvtNTVq1EitW7eWJG3atEnffvutRo4c6ZEiAQAAAMBbnApJTz31lP3v9957rx544AE988wzeeb89NNP7q0OAAAAALzM5c9JWrp0qQYOHJhn/O6779ayZcvcUhQAAAAA+IrLISkkJERffvllnvEvv/xSwcHBbikKAAAAAHzF5bvbjR49WiNGjNCOHTt03XXXSZI2b96sN998U0888YTbCwQAAAAAb3I5JI0bN0516tTR9OnT9X//93+SpIYNG2r+/Pnq3bu32wsEAAAAAG8q0uck9e7dm0AEAAAAoERy+T1JAAAAAFCSEZIAAAAAwKJIl9sBAACUJs8nn3R4HJCTpfqSpu46pZyAP3+dGtc8ysuVAfAEziQBAAAAgAUhCQAAAAAsinS53c8//6yPPvpIR44cUUZGhsO2KVOmuKWwS3755Rc9+uijWrVqldLS0lS3bl3Nnz9frVq1cus6AAAAACAVISR99tln6tGjh+rUqaPvv/9eTZo00aFDh2SMUYsWLdxa3JkzZxQfH68OHTpo1apVio6O1v79+1WxYkW3rgMAAAAAl7gcksaPH6+xY8dq4sSJCg8P17JlyxQTE6MBAwaoS5cubi3uhRdeUFxcnObPn28fq127tlvXAAAAAAArl0PSnj179O677/6xc9myunjxosLCwvT000/r9ttv14gRI9xW3EcffaTOnTurV69eWr9+va644gqNHDlSw4YNK3Cf9PR0paen2x+npqZKkjIzM5WZmem22ooqICcr38e5x6215t6WH1fnW/dxdb4/reGPNRW2Bv323RrFud+FreHu+SVlDfrt3PySsoa/9hslx6W+0t/iz9ke2owxxpUnrlq1qtauXauGDRuqUaNGev7559WjRw99/fXXio+P1/nz54tUcH6Cg4MlSWPGjFGvXr20detWPfjgg5ozZ44GDRqU7z4TJkzQxIkT84wvWrRIoaGhbqsNAAAAQPGSlpam/v37KyUlRREREQXOczkk9ezZU927d9ewYcM0duxYffjhhxo8eLCWL1+uihUras2aNX+5+EvKlSunVq1a6auvvrKPPfDAA9q6dauSkpLy3Se/M0lxcXE6efJkoS+Et0zddcrhcUBOluod3a79sS0dPmfhoaaVC9wnP67Ot+7j6nx/WsMfaypsDfrtuzWKc78LW8Pd80vKGvTbufklZQ1/7TdKjszMTCUmJqpjx44KDAz0dTn4C1JTUxUVFXXZkOTy5XZTpkyxny2aOHGizp8/ryVLlqhevXpuv7NdtWrV1KhRI4exhg0batmyZQXuExQUpKCgoDzjgYGBfvFFbf1Bmnvcus1aa0H7WLk637qPq/P9aQ1/rMmZNei399cozv12Zg13zS8pa9Bv5+aXlDX8td8oefzl90kUnbP9czkk1alTx/738uXLa86cOa4+hdPi4+O1d+9eh7F9+/apZs2aHlsTAAAAQOnm1x8m+9BDD2nTpk167rnndODAAS1atEhz587VqFGjfF0aAAAAgBLKqTNJlSpV0r59+xQVFaWKFSvKZrMVOPf06dNuK+7aa6/VihUrNH78eD399NOqXbu2pk2bpgEDBrhtDQAAAE94PvmkU/PGNY/ycCUAXOVUSJo6darCw8MlSdOmTfNkPXnceuutuvXWW726JgAAAIDSy6mQZL3ddkG33gYAAACAksCpkHTpA1md4Q+32QYAAACAonIqJEVGRhb6PiSr7Ozsv1QQAAAAAPiSUyFp7dq19r8fOnRI48aN0+DBg9W6dWtJUlJSkt566y1NnjzZM1UCAACUcNzoAfAfToWkdu3a2f/+9NNPa8qUKerXr599rEePHrr66qs1d+5c3rMEAAAAoFhz+XOSkpKS1KpVqzzjrVq10pYtW9xSFAAAAAD4ilNnkqzi4uL0xhtv6MUXX3QY/89//qO4uDi3FQYAAIDCOXOJHpfnAa5zOSRNnTpVd955p1atWqXrr79ekrRlyxbt379fy5Ytc3uBAAAAAOBNLl9u161bN+3bt0+33XabTp8+rdOnT+u2227Tvn371K1bN0/UCAAAAABe4/KZJOmPS+6ee+45d9cCAAAAAD7n8pkkSfriiy909913q02bNvrll18kSQsXLtTGjRvdWhwAAAAAeJvLIWnZsmXq3LmzQkJCtGPHDqWnp0uSUlJSOLsEAAAAoNhz+XK7SZMmac6cORo4cKAWL15sH4+Pj9ekSZPcWhwAAADchw+sBZzj8pmkvXv3qm3btnnGK1SooLNnz7qjJgAAAADwGZfPJFWtWlUHDhxQrVq1HMY3btyoOnXquKsuAAAA+BhnnlBauXwmadiwYXrwwQe1efNm2Ww2HT16VO+8847Gjh2rESNGeKJGAAAAAPAal88kjRs3Tjk5ObrllluUlpamtm3bKigoSGPHjtX999/viRoBAABQTHD2CSWByyHJZrPpscce08MPP6wDBw7o/PnzatSokcLCwjxRHwAAAAB4VZE+TFaSypUrp0aNGrmzFgAAAADwOadD0tChQ52a9+abbxa5GAAAAADwNadD0oIFC1SzZk01b95cxhhP1gQAAIBSgvcwwR85HZJGjBihd999VwcPHtSQIUN09913q1KlSp6sDQAAAAC8zulbgM+aNUu//vqrHnnkEX388ceKi4tT79699cknn3BmCQAAAECJ4dKNG4KCgtSvXz/169dPhw8f1oIFCzRy5EhlZWXp22+/5Q53AAAA8DhnLtH7K5fn5X7+gJws1Zc0ddcp5QT8+euzdQ0uGyxZinx3u4CAANlsNhljlJ2d7c6aAAAAAHgZQe9PLoWk9PR0LV++XG+++aY2btyoW2+9VTNnzlSXLl0UEOD0lXsAAACA1/DLP1zldEgaOXKkFi9erLi4OA0dOlTvvvuuoqL4QgIAAABcVVKCW0k5jtycDklz5sxRjRo1VKdOHa1fv17r16/Pd97y5cvdVhwAAAAAeJvTIWngwIGy2WyerAUAAAAAfM6lD5MFAAAA4Buevqsf/lTku9sBAAAA8F8l9f1C3sAt6QAAAADAgpAEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgQUgCAAAAAAtCEgAAAABYEJIAAAAAwIKQBAAAAAAWhCQAAAAAsCAkAQAAAIAFIQkAAAAALAhJAAAAAGBBSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEAAAAABaEJAAAAACwKFYh6fnnn5fNZtPo0aN9XQoAAACAEqrYhKStW7fq9ddfV9OmTX1dCgAAAIASrFiEpPPnz2vAgAF64403VLFiRV+XAwAAAKAEK+vrApwxatQode/eXQkJCZo0aVKhc9PT05Wenm5/nJqaKknKzMxUZmamR+t0RkBOVr6Pc49ba829LT+uzrfu4+p8f1rDH2sqbA367bs1inO/C1vD3fNLyhr027n5JWWN0tpvZ/fxx5q8sQb99p+acu/jS87WYTPGGA/X8pcsXrxYzz77rLZu3arg4GC1b99ezZo107Rp0/KdP2HCBE2cODHP+KJFixQaGurhagEAAAD4q7S0NPXv318pKSmKiIgocJ5fh6SffvpJrVq1UmJiov29SJcLSfmdSYqLi9PJkycLfSG8ZequUw6PA3KyVO/odu2PbamcgD9P7D3UtHKB++TH1fnWfVyd709r+GNNha1Bv323RnHud2FruHt+SVmDfjs3v6SsUVr77ew+/liTN9ag3/5TU+59fCk1NVVRUVGXDUl+fbnd9u3bdeLECbVo0cI+lp2drQ0bNmjmzJlKT09XmTJlHPYJCgpSUFBQnucKDAxUYGCgx2u+HOs3Vu5x6zZrrQXtY+XqfOs+rs73pzX8sSZn1qDf3l+jOPfbmTXcNb+krEG/nZtfUtYorf12dh9/rMkba9Bv/6kp9z6+5Gwdfh2SbrnlFu3evdthbMiQIWrQoIEeffTRPAEJAAAAAP4qvw5J4eHhatKkicNY+fLlVbly5TzjAAAAAOAOxeIW4AAAAADgLX59Jik/69at83UJAAAAAEowziQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgQUgCAAAAAAtCEgAAAABYEJIAAAAAwIKQBAAAAAAWhCQAAAAAsCAkAQAAAIAFIQkAAAAALAhJAAAAAGBBSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgQUgCAAAAAAtCEgAAAABYEJIAAAAAwIKQBAAAAAAWhCQAAAAAsCAkAQAAAIAFIQkAAAAALAhJAAAAAGBBSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACz8OiRNnjxZ1157rcLDwxUTE6OePXtq7969vi4LAAAAQAnm1yFp/fr1GjVqlDZt2qTExERlZmaqU6dOunDhgq9LAwAAAFBClfV1AYVZvXq1w+MFCxYoJiZG27dvV9u2bX1UFQAAAICSzK9DUm4pKSmSpEqVKhU4Jz09Xenp6fbHqampkqTMzExlZmZ6tkAnBORk5fs497i11tzb8uPqfOs+rs73pzX8sabC1qDfvlujOPe7sDXcPb+krEG/nZtfUtYorf12dh9/rMkba9Bv/6kp9z6+5GwdNmOM8XAtbpGTk6MePXro7Nmz2rhxY4HzJkyYoIkTJ+YZX7RokUJDQz1ZIgAAAAA/lpaWpv79+yslJUUREREFzis2IWnEiBFatWqVNm7cqOrVqxc4L78zSXFxcTp58mShL4S3TN11yuFxQE6W6h3drv2xLZUT8OeJvYeaVi5wn/y4Ot+6j6vz/WkNf6ypsDXot+/WKM79LmwNd88vKWvQb+fml5Q1Smu/nd3HH2vyxhr0239qyr2PL6WmpioqKuqyIalYXG533333aeXKldqwYUOhAUmSgoKCFBQUlGc8MDBQgYGBnirRadZvrNzj1m3WWgvax8rV+dZ9XJ3vT2v4Y03OrEG/vb9Gce63M2u4a35JWYN+Oze/pKxRWvvt7D7+WJM31qDf/lNT7n18ydk6/DokGWN0//33a8WKFVq3bp1q167t65IAAAAAlHB+HZJGjRqlRYsW6cMPP1R4eLiOHTsmSapQoYJCQkJ8XB0AAACAksivPydp9uzZSklJUfv27VWtWjX7nyVLlvi6NAAAAAAllF+fSSom95QAAAAAUIL49ZkkAAAAAPA2QhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgQUgCAAAAAAtCEgAAAABYEJIAAAAAwIKQBAAAAAAWhCQAAAAAsCAkAQAAAIAFIQkAAAAALAhJAAAAAGBBSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgQUgCAAAAAAtCEgAAAABYEJIAAAAAwIKQBAAAAAAWhCQAAAAAsCAkAQAAAIAFIQkAAAAALAhJAAAAAGBBSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEAAAAABaEJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgQUgCAAAAAAtCEgAAAABYFIuQNGvWLNWqVUvBwcG6/vrrtWXLFl+XBAAAAKCE8vuQtGTJEo0ZM0ZPPfWUduzYoWuuuUadO3fWiRMnfF0aAAAAgBLI70PSlClTNGzYMA0ZMkSNGjXSnDlzFBoaqjfffNPXpQEAAAAogcr6uoDCZGRkaPv27Ro/frx9LCAgQAkJCUpKSsp3n/T0dKWnp9sfp6SkSJJOnz6tzMxMzxbshIzUMw6PA3KylJaWpozUM8oJ+LMdp07ZCtwnP67Ot+7j6nx/WsMfaypsDfrtuzWKc78LW8Pd80vKGvTbufklZY3S2m9n9/HHmryxBv32n5py7+NL586dkyQZYwqdZzOXm+FDR48e1RVXXKGvvvpKrVu3to8/8sgjWr9+vTZv3pxnnwkTJmjixIneLBMAAABAMfLTTz+pevXqBW736zNJRTF+/HiNGTPG/jgnJ0enT59W5cqVZbP5R4K1Sk1NVVxcnH766SdFRET4uhx4GP0uXeh36UK/Sxf6XbrQ75LDGKNz584pNja20Hl+HZKioqJUpkwZHT9+3GH8+PHjqlq1ar77BAUFKSgoyGEsMjLSUyW6TUREBN90pQj9Ll3od+lCv0sX+l260O+SoUKFCped49c3bihXrpxatmypzz77zD6Wk5Ojzz77zOHyOwAAAABwF78+kyRJY8aM0aBBg9SqVStdd911mjZtmi5cuKAhQ4b4ujQAAAAAJZDfh6Q+ffrot99+05NPPqljx46pWbNmWr16tapUqeLr0twiKChITz31VJ5LBFEy0e/ShX6XLvS7dKHfpQv9Ln38+u52AAAAAOBtfv2eJAAAAADwNkISAAAAAFgQkgAAAADAgpAEAAAAABaEJDfYsGGDbrvtNsXGxspms+mDDz5w2H78+HENHjxYsbGxCg0NVZcuXbR///48z5OUlKSbb75Z5cuXV0REhNq2bauLFy/at58+fVoDBgxQRESEIiMjdc899+j8+fOePjzk8lf7fejQIdlstnz/LF261D7vyJEj6t69u0JDQxUTE6OHH35YWVlZ3jpM/H/u+P4+duyY/v73v6tq1aoqX768WrRooWXLljnM4fvbP7ij3z/88IPuuOMORUdHKyIiQr17987zoej02z9MnjxZ1157rcLDwxUTE6OePXtq7969DnN+//13jRo1SpUrV1ZYWJjuvPPOPP105uf1unXr1KJFCwUFBalu3bpasGCBpw8Pubir3w888IBatmypoKAgNWvWLN+1du3apZtuuknBwcGKi4vTiy++6KnDgocQktzgwoULuuaaazRr1qw824wx6tmzp3788Ud9+OGHSk5OVs2aNZWQkKALFy7Y5yUlJalLly7q1KmTtmzZoq1bt+q+++5TQMCfLRowYIC+/fZbJSYmauXKldqwYYP+8Y9/eOUY8ae/2u+4uDj9+uuvDn8mTpyosLAwde3aVZKUnZ2t7t27KyMjQ1999ZXeeustLViwQE8++aRXjxXu+f4eOHCg9u7dq48++ki7d+/W3/72N/Xu3VvJycn2OXx/+4e/2u8LFy6oU6dOstls+vzzz/Xll18qIyNDt912m3JycuzPRb/9w/r16zVq1Cht2rRJiYmJyszMVKdOnRy+fx966CF9/PHHWrp0qdavX6+jR4/qb3/7m327Mz+vDx48qO7du6tDhw7auXOnRo8erXvvvVeffPKJV4+3tHNHvy8ZOnSo+vTpk+86qamp6tSpk2rWrKnt27frpZde0oQJEzR37lyPHRs8wMCtJJkVK1bYH+/du9dIMt988419LDs720RHR5s33njDPnb99debxx9/vMDn/e6774wks3XrVvvYqlWrjM1mM7/88ot7DwJOK2q/c2vWrJkZOnSo/fH//vc/ExAQYI4dO2Yfmz17tomIiDDp6enuPQg4raj9Ll++vHn77bcdnqtSpUr2OXx/+6ei9PuTTz4xAQEBJiUlxT7n7NmzxmazmcTERGMM/fZnJ06cMJLM+vXrjTF/9C4wMNAsXbrUPmfPnj1GkklKSjLGOPfz+pFHHjGNGzd2WKtPnz6mc+fOnj4kFKIo/bZ66qmnzDXXXJNn/LXXXjMVK1Z0+Pf60UcfNfXr13f/QcBjOJPkYenp6ZKk4OBg+1hAQICCgoK0ceNGSdKJEye0efNmxcTEqE2bNqpSpYratWtn3y79caYpMjJSrVq1so8lJCQoICBAmzdv9tLR4HKc6Xdu27dv186dO3XPPffYx5KSknT11Vc7fGhy586dlZqaqm+//dZD1cNVzva7TZs2WrJkiU6fPq2cnBwtXrxYv//+u9q3by+J7+/iwpl+p6eny2azOXzgZHBwsAICAuxz6Lf/SklJkSRVqlRJ0h8/nzMzM5WQkGCf06BBA9WoUUNJSUmSnPt5nZSU5PAcl+Zceg74RlH67YykpCS1bdtW5cqVs4917txZe/fu1ZkzZ9xUPTyNkORhl765xo8frzNnzigjI0MvvPCCfv75Z/3666+SpB9//FGSNGHCBA0bNkyrV69WixYtdMstt9ivdT927JhiYmIcnrts2bKqVKmSjh075t2DQoGc6Xdu8+bNU8OGDdWmTRv72LFjxxz+wZVkf0y//Yez/X7vvfeUmZmpypUrKygoSMOHD9eKFStUt25dSXx/FxfO9PuGG25Q+fLl9eijjyotLU0XLlzQ2LFjlZ2dbZ9Dv/1TTk6ORo8erfj4eDVp0kTSH70qV66cIiMjHeZWqVLF3itnfl4XNCc1NdXhvcfwnqL22xn8G14yEJI8LDAwUMuXL9e+fftUqVIlhYaGau3ateratav9/UaXrlMfPny4hgwZoubNm2vq1KmqX7++3nzzTV+WDxc502+rixcvatGiRQ5nkVB8ONvvJ554QmfPntWaNWu0bds2jRkzRr1799bu3bt9WD1c5Uy/o6OjtXTpUn388ccKCwtThQoVdPbsWbVo0SLfnwHwH6NGjdI333yjxYsX+7oUeAH9xuWU9XUBpUHLli21c+dOpaSkKCMjQ9HR0br++uvtl1pUq1ZNktSoUSOH/Ro2bKgjR45IkqpWraoTJ044bM/KytLp06dVtWpVLxwFnHW5flu9//77SktL08CBAx3Gq1atqi1btjiMXbq7Dv32L5fr9w8//KCZM2fqm2++UePGjSVJ11xzjb744gvNmjVLc+bM4fu7GHHm+7tTp0764YcfdPLkSZUtW1aRkZGqWrWq6tSpI4mf5/7ovvvus99Ao3r16vbxqlWrKiMjQ2fPnnU4u3D8+HF7r5z5eV21atU8d0g7fvy4IiIiFBIS4olDQiH+Sr+dUVC/L21D8cB/a3lRhQoVFB0drf3792vbtm26/fbbJUm1atVSbGxsnttQ7tu3TzVr1pQktW7dWmfPntX27dvt2z///HPl5OTo+uuv995BwGkF9dtq3rx56tGjh6Kjox3GW7durd27dzv8IpWYmKiIiIg8YRr+oaB+p6WlSVKeswhlypSxn0Xm+7v4ceb7OyoqSpGRkfr888914sQJ9ejRQxL99ifGGN13331asWKFPv/8c9WuXdthe8uWLRUYGKjPPvvMPrZ3714dOXJErVu3luTcz+vWrVs7PMelOZeeA97hjn47o3Xr1tqwYYMyMzPtY4mJiapfv74qVqz41w8E3uHrO0eUBOfOnTPJyckmOTnZSDJTpkwxycnJ5vDhw8YYY9577z2zdu1a88MPP5gPPvjA1KxZ0/ztb39zeI6pU6eaiIgIs3TpUrN//37z+OOPm+DgYHPgwAH7nC5dupjmzZubzZs3m40bN5p69eqZfv36efVY4Z5+G2PM/v37jc1mM6tWrcqzLSsryzRp0sR06tTJ7Ny506xevdpER0eb8ePHe/z44Oiv9jsjI8PUrVvX3HTTTWbz5s3mwIED5uWXXzY2m83897//tc/j+9s/uOP7+8033zRJSUnmwIEDZuHChaZSpUpmzJgxDnPot38YMWKEqVChglm3bp359ddf7X/S0tLsc/75z3+aGjVqmM8//9xs27bNtG7d2rRu3dq+3Zmf1z/++KMJDQ01Dz/8sNmzZ4+ZNWuWKVOmjFm9erVXj7e0c0e/jfnj3+/k5GQzfPhwc9VVV9l/Zly6m93Zs2dNlSpVzN///nfzzTffmMWLF5vQ0FDz+uuve/V48dcQktxg7dq1RlKeP4MGDTLGGDN9+nRTvXp1ExgYaGrUqGEef/zxfG/jPHnyZFO9enUTGhpqWrdubb744guH7adOnTL9+vUzYWFhJiIiwgwZMsScO3fOG4cIC3f1e/z48SYuLs5kZ2fnu86hQ4dM165dTUhIiImKijL/+te/TGZmpicPDflwR7/37dtn/va3v5mYmBgTGhpqmjZtmueW4Hx/+wd39PvRRx81VapUMYGBgaZevXrmlVdeMTk5OQ5z6Ld/yK/Xksz8+fPtcy5evGhGjhxpKlasaEJDQ80dd9xhfv31V4fncebn9dq1a02zZs1MuXLlTJ06dRzWgHe4q9/t2rXL93kOHjxon/P111+bG2+80QQFBZkrrrjCPP/88146SriLzRhjPHaaCgAAAACKGd6TBAAAAAAWhCQAAAAAsCAkAQAAAIAFIQkAAAAALAhJAAAAAGBBSAIAAAAAC0ISAAAAAFgQkgAAAADAgpAEACixjDFKSEhQvXr1tGvXLiUkJOjgwYO+LgsA4OcISQCAYi0pKUllypRR9+7d82w7dOiQypQpo5kzZ+rvf/+7IiMjVbt2bR9UCQAoTmzGGOPrIgAAKKp7771XYWFhmjdvnvbu3avY2FhflwQAKOY4kwQAKLbOnz+vJUuWaMSIEerevbsWLFhg37Zu3TrZbDZ99tlnatWqlUJDQ9WmTRvt3bvX4Tlmz56tK6+8UuXKlVP9+vW1cOFCLx8FAMDfEJIAAMXWe++9pwYNGqh+/fq6++679eabbyr3BRKPPfaYXnnlFW3btk1ly5bV0KFD7dtWrFihBx98UP/617/0zTffaPjw4RoyZIjWrl3r7UMBAPgRLrcDABRb8fHx6t27tx588EFlZWWpWrVqWrp0qdq3b69169apQ4cOWrNmjW655RZJ0v/+9z91795dFy9eVHBwsOLj49W4cWPNnTvX/py9e/fWhQsX9N///tdXhwUA8DHOJAEAiqW9e/dqy5Yt6tevnySpbNmy6tOnj+bNm+cwr2nTpva/V6tWTZJ04sQJSdKePXsUHx/vMD8+Pl579uzxZOkAAD9X1tcFAABQFPPmzVNWVpbDjRqMMQoKCtLMmTPtY4GBgfa/22w2SVJOTo73CgUAFDucSQIAFDtZWVl6++239corr2jnzp32P19//bViY2P17rvvOvU8DRs21Jdffukw9uWXX6pRo0aeKBsAUExwJgkAUOysXLlSZ86c0T333KMKFSo4bLvzzjs1b948vfTSS5d9nocffli9e/dW8+bNlZCQoI8//ljLly/XmjVrPFU6AKAY4EwSAKDYmTdvnhISEvIEJOmPkLRt2zbt2rXrss/Ts2dPTZ8+XS+//LIaN26s119/XfPnz1f79u09UDUAoLjg7nYAAAAAYMGZJAAAAACwICQBAAAAgAUhCQAAAAAsCEkAAAAAYEFIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACz+H+N9eaUBf59rAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrar el año 2016 y encontrar los últimos cinco años\n",
        "df_filtrado = df[df['time'] != 2016]\n",
        "ultimos_cinco_anos = sorted(df_filtrado['time'].unique(), reverse=True)[:5]\n",
        "df_filtrado = df_filtrado[df_filtrado['time'].isin(ultimos_cinco_anos)]\n",
        "\n",
        "# Agrupar por país y año, y calcular la suma de los valores\n",
        "df_agrupado = df_filtrado.groupby(['time', 'location'])['value'].sum().unstack()\n",
        "\n",
        "# Mostrar los resultados\n",
        "print(df_agrupado)\n",
        "\n",
        "# Generar el gráfico de barras\n",
        "df_agrupado.plot(kind='bar', figsize=(12, 8), colormap='tab20')\n",
        "\n",
        "plt.title('Valores por país para los últimos 5 años (sin incluir 2016)')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Valor')\n",
        "plt.legend(title='País')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "onMLr0HmhweT",
        "outputId": "0933eede-dff1-4a32-d9be-b43abf1b6010"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "location  AUS   AUT   BEL  CAN   CHE  CHL   CZE   DEU  DNK  ESP  ...  NOR  \\\n",
            "time                                                             ...        \n",
            "2011      7.7  10.5  11.1  9.3  10.4  2.8  11.4  11.0  2.8  8.6  ...  6.1   \n",
            "2012      7.5  10.4  11.0  9.2   9.7  2.8  11.1  10.8  2.5  8.5  ...  5.8   \n",
            "2013      7.3  10.3  10.7  9.1   9.4  2.8  10.9  10.6  2.5  8.4  ...  5.5   \n",
            "2014      7.3  10.3  10.6  9.2   9.2  2.7  10.8  10.7  2.5  8.3  ...  5.5   \n",
            "2015      NaN  10.2   NaN  8.9   8.9  NaN  10.8  10.7  2.4  8.3  ...  6.2   \n",
            "\n",
            "location  NZL   POL  PRT   RUS   SVK   SVN  SWE  TUR  USA  \n",
            "time                                                       \n",
            "2011      7.8  11.0  7.0  11.3  11.5  10.7  5.7  5.3  5.4  \n",
            "2012      7.6  10.7  7.5  10.8  11.3  10.8  5.6  5.2  5.4  \n",
            "2013      7.1  10.6  7.2  10.3   6.2  10.2  7.9  5.4  5.4  \n",
            "2014      6.7  10.5  7.2   9.9  12.0  10.2  7.9  5.5  5.5  \n",
            "2015      NaN  10.7  7.1   9.7  11.8  10.1  8.0  5.3  NaN  \n",
            "\n",
            "[5 rows x 37 columns]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular la correlación entre el año y el valor\n",
        "correlacion = df['time'].corr(df['value'])\n",
        "print(f'Coeficiente de correlación de Pearson: {correlacion}')\n",
        "\n",
        "# Generar el gráfico de dispersión\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(df['time'], df['value'], c='blue', alpha=0.5)\n",
        "plt.title('Dispersión entre Año y Valor')\n",
        "plt.xlabel('Año')\n",
        "plt.ylabel('Valor')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "Bzod7XjrmFg5",
        "outputId": "03a18030-7c0d-440b-a435-9f0c1956f7db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coeficiente de correlación de Pearson: -0.48038783427117343\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Predecir nivel medio de ocupación de hospitales (internación)\n",
        "#Buscar correlación por grupo de países\n",
        "#Normalmente euclidiano e slo más normal para hallar las distancias\n",
        "#Vector de los países\n",
        "#kmeans\n",
        "#Se debe definir k que es cuántos grupos yo quiero ¿qué países son similares y cuáles son diferentes?\n",
        "#eso pordemos hacer de diferentes métodos cada uno"
      ],
      "metadata": {
        "id": "i8TzWc9ac7CU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear un diccionario para almacenar los datos de cada país\n",
        "datos_por_pais = {}\n",
        "\n",
        "# Iterar sobre los países únicos en la columna 'location'\n",
        "for pais in df['location'].unique():\n",
        "    # Filtrar el DataFrame para obtener solo los datos de cada país\n",
        "    df_pais = df[df['location'] == pais]\n",
        "    # Guardar los años y valores en el diccionario\n",
        "    datos_por_pais[pais] = {\n",
        "        'años': df_pais['time'].tolist(),\n",
        "        'valores': df_pais['value'].tolist()\n",
        "    }\n",
        "\n",
        "# Mostrar los resultados\n",
        "for pais, datos in datos_por_pais.items():\n",
        "    print(f\"Datos para {pais}:\")\n",
        "    print(f\"Años: {datos['años']}\")\n",
        "    print(f\"Valores: {datos['valores']}\")\n",
        "    print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Knc6dTHe_Tuk",
        "outputId": "24a453c6-9abb-4168-8394-f8542de0ca4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Datos para AUS:\n",
            "Años: [1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014]\n",
            "Valores: [11.5, 10.9, 10.4, 9.8, 9.8, 9.7, 9.6, 9.5, 9.3, 9.1, 8.7, 8.5, 8.3, 8.3, 8.3, 8.3, 8.0, 7.7, 7.5, 7.8, 7.7, 7.3, 6.9, 6.7, 6.7, 7.4, 7.4, 7.2, 6.5, 6.6, 6.4, 6.4, 6.5, 6.4, 6.2, 6.1, 6.2, 6.1, 6.2, 6.2, 6.1, 6.1, 6.0, 5.9, 5.2, 5.1, 5.0, 4.9, 4.8, 4.7, 4.7, 3.9, 3.8, 3.5, 3.2, 3.1, 3.0, 3.0, 2.9, 2.9, 2.8, 2.8, 2.6, 2.5, 2.5, 2.4, 2.4, 2.3, 2.7, 2.8, 2.7, 2.6, 2.6]\n",
            "\n",
            "Datos para AUT:\n",
            "Años: [1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [11.0, 11.1, 10.5, 10.1, 10.0, 9.6, 9.7, 9.5, 8.3, 8.2, 7.8, 7.6, 7.4, 7.3, 7.2, 7.2, 6.9, 6.9, 6.8, 6.8, 6.7, 6.6, 6.5, 6.5, 6.5, 6.5, 6.5, 6.4, 6.3, 6.0, 5.9, 5.7, 5.6, 5.6, 5.4, 5.1, 5.1, 4.9, 4.8, 4.7, 4.6, 4.4, 4.4, 4.3, 4.3, 4.2, 4.2, 4.1, 4.0, 4.0, 3.9, 3.8, 3.8, 3.7]\n",
            "\n",
            "Datos para BEL:\n",
            "Años: [1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014]\n",
            "Valores: [8.0, 7.7, 7.6, 7.6, 7.5, 7.4, 7.7, 7.2, 7.1, 7.1, 7.2, 7.2, 7.1, 7.0, 6.9, 6.9, 4.9, 4.8, 4.8, 4.7, 4.5, 4.5, 4.4, 4.3, 4.3, 4.2, 4.1, 4.0, 4.0, 3.8, 3.7]\n",
            "\n",
            "Datos para CAN:\n",
            "Años: [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [10.0, 10.2, 10.0, 10.0, 10.2, 10.4, 10.3, 10.5, 10.4, 10.2, 10.2, 10.0, 9.9, 9.8, 7.4, 7.2, 7.1, 7.0, 7.0, 7.1, 7.2, 7.3, 7.4, 7.3, 7.3, 7.2, 7.4, 7.5, 7.7, 7.7, 7.7, 7.6, 7.6, 7.5, 7.6, 7.4, 4.7, 4.6, 4.4, 4.4, 4.3, 4.2, 4.1, 4.0, 3.9, 3.7, 3.5, 3.3, 3.0, 2.8, 2.5, 2.2, 2.1, 2.1, 2.0, 2.0, 2.0, 2.0, 2.0, 1.9, 1.9, 1.8, 1.8, 1.8, 1.8, 1.7, 1.7, 1.7, 1.6, 1.6, 1.6, 1.5]\n",
            "\n",
            "Datos para CZE:\n",
            "Años: [1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 2000, 2005, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [13.1, 13.0, 12.9, 12.9, 13.1, 13.6, 13.5, 13.3, 13.3, 13.2, 13.1, 13.4, 13.2, 13.0, 12.8, 12.0, 11.9, 11.6, 11.2, 10.8, 10.2, 7.9, 7.9, 7.3, 7.1, 6.9, 6.7, 6.6, 6.6, 6.6, 6.0, 5.9, 5.8, 5.6, 5.5, 5.3, 5.1, 5.0, 4.8, 4.8, 4.6, 4.5, 4.4, 4.3, 4.2, 4.2]\n",
            "\n",
            "Datos para DNK:\n",
            "Años: [1970, 1975, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016]\n",
            "Valores: [12.5, 10.8, 9.7, 9.6, 8.8, 8.5, 8.3, 8.2, 8.1, 7.9, 7.8, 7.5, 7.3, 6.9, 6.6, 6.4, 6.3, 6.1, 6.0, 4.1, 4.1, 4.1, 4.0, 3.9, 3.9, 3.8, 3.8, 3.7, 3.6, 3.4, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 3.0, 2.9, 2.9, 2.8, 2.8, 2.8, 2.5, 2.5, 2.5, 2.4, 2.3]\n",
            "\n",
            "Datos para FIN:\n",
            "Años: [1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1978, 1979, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [12.5, 12.6, 12.8, 12.9, 13.3, 13.2, 13.4, 13.3, 13.2, 13.0, 12.8, 12.6, 12.2, 12.0, 11.8, 11.4, 10.7, 9.4, 9.4, 9.0, 8.8, 8.5, 8.3, 8.2, 8.2, 8.0, 8.0, 7.5, 7.6, 7.3, 7.0, 7.0, 6.1, 5.7, 5.6, 5.5, 6.0, 5.9, 5.9, 5.8, 6.9, 7.0, 7.1, 7.1, 7.1, 7.1, 7.2, 7.2, 7.1, 7.0, 7.0, 6.9, 6.9, 6.8, 6.7, 6.6, 7.2, 6.7, 3.7, 3.6, 3.6, 3.5, 3.5, 3.4, 3.4, 3.4, 3.2, 3.1, 3.1, 3.1, 3.0, 3.0, 2.9]\n",
            "\n",
            "Datos para FRA:\n",
            "Años: [1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [12.3, 11.9, 11.3, 10.9, 10.6, 10.1, 10.2, 10.0, 9.7, 9.3, 9.0, 8.6, 8.3, 7.9, 7.6, 7.3, 7.0, 6.7, 6.5, 6.4, 6.4, 6.2, 6.1, 5.9, 5.8, 5.5, 5.6, 5.7, 5.7, 6.1, 6.0, 5.9, 5.9, 5.9, 5.8, 5.7, 5.8, 5.7, 5.7, 5.8, 5.7, 5.3, 5.2, 5.1, 4.9, 4.8, 4.8, 4.7, 4.6, 4.6, 4.5, 4.4, 4.4, 4.3, 4.3, 4.2, 4.2, 4.1, 4.1, 4.0]\n",
            "\n",
            "Datos para DEU:\n",
            "Años: [1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [13.0, 12.5, 12.1, 11.2, 10.8, 10.5, 10.1, 9.8, 9.6, 9.3, 8.9, 8.8, 8.7, 8.5, 8.3, 8.2, 8.1, 7.9, 7.8, 7.7, 7.6, 7.6, 6.1, 5.8, 5.3, 5.1, 4.9, 4.8, 4.7, 4.6, 4.4, 4.1, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.1, 3.0, 2.9, 3.1, 3.1]\n",
            "\n",
            "Datos para GRC:\n",
            "Años: [1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012]\n",
            "Valores: [11.0, 10.9, 10.5, 10.2, 10.3, 10.2, 9.5, 9.6, 8.9, 8.4, 8.3, 7.8, 7.6, 7.5, 7.2, 7.1, 6.6, 6.7, 6.4, 6.5, 6.3, 6.3, 6.3, 6.2, 6.2, 6.2, 6.0, 5.7, 5.6, 5.8, 5.4, 5.4, 5.3, 5.3, 5.4, 5.2, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 3.8, 3.8, 3.7, 3.6, 4.0, 3.0]\n",
            "\n",
            "Datos para HUN:\n",
            "Años: [1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [11.3, 11.2, 11.2, 11.2, 11.1, 11.2, 12.2, 11.3, 11.2, 11.1, 11.2, 11.2, 11.2, 11.1, 11.3, 11.3, 11.4, 11.4, 11.4, 11.2, 11.2, 11.1, 11.2, 10.9, 10.9, 10.6, 10.4, 10.3, 10.0, 9.9, 9.9, 9.7, 9.5, 9.5, 9.8, 9.2, 8.6, 8.2, 7.8, 7.5, 7.1, 7.0, 6.9, 6.7, 6.7, 6.5, 6.3, 6.0, 5.9, 5.8, 5.8, 5.8, 5.7, 5.7, 5.7, 5.6, 6.3, 6.2, 6.0, 5.4, 5.2, 5.2, 5.1, 5.2, 5.0, 5.0, 5.0, 5.0]\n",
            "\n",
            "Datos para ISL:\n",
            "Años: [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2011, 2012, 2013, 2014, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016]\n",
            "Valores: [2.6, 2.4, 2.2, 2.3, 2.3, 2.1, 2.2, 2.0, 2.0, 1.8, 1.5, 1.6, 1.6, 1.7, 5.6, 5.5, 5.5, 5.4, 5.3, 5.5, 5.6, 5.8, 5.9, 5.9]\n",
            "\n",
            "Datos para IRL:\n",
            "Años: [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [8.5, 8.2, 8.0, 7.8, 7.6, 7.4, 7.2, 6.9, 6.9, 6.7, 6.7, 6.7, 6.8, 6.7, 6.7, 6.6, 6.5, 6.5, 6.5, 6.5, 6.4, 6.5, 6.5, 6.5, 6.4, 6.5, 6.3, 6.1, 6.2, 6.1, 6.0, 5.9, 5.9, 5.7, 5.6, 6.1, 3.1, 2.9, 2.7, 2.6, 2.4, 2.5, 2.4, 2.2, 2.1, 2.1, 2.0, 2.0, 2.0, 2.0, 1.9, 2.4]\n",
            "\n",
            "Datos para ITA:\n",
            "Años: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 1971, 1972, 1974, 1975, 1976, 1978, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [9.5, 9.3, 9.2, 9.0, 8.4, 8.0, 7.3, 7.2, 7.0, 7.0, 6.8, 6.7, 6.7, 6.7, 6.7, 6.7, 6.7, 6.8, 6.7, 6.7, 6.8, 6.8, 6.8, 6.8, 6.9, 6.9, 7.0, 7.1, 7.0, 7.0, 7.1, 6.9, 4.0, 3.7, 3.7, 3.6, 3.6, 3.5, 3.5, 3.5, 3.5, 3.4, 3.4, 3.4, 3.4, 3.4, 3.4]\n",
            "\n",
            "Datos para JPN:\n",
            "Años: [1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [34.4, 33.2, 32.7, 31.4, 29.3, 27.2, 24.8, 23.5, 22.2, 20.7, 20.3, 19.8, 19.2, 19.0, 18.8, 18.5, 18.2, 17.9, 17.5, 17.2, 16.9, 16.5]\n",
            "\n",
            "Datos para KOR:\n",
            "Años: [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2010, 2011, 2012, 2013, 2014, 2015, 1996, 1999, 2002, 2005, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [10.0, 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 10.0, 11.0, 11.0, 12.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 10.0, 11.0, 11.0, 11.0, 10.6, 10.0, 10.1, 9.2, 8.9, 8.3, 8.0, 2.8, 2.4, 2.5, 3.1, 3.0, 2.5, 2.5, 2.6, 2.4, 2.5, 2.5, 2.4]\n",
            "\n",
            "Datos para LUX:\n",
            "Años: [2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [7.5, 7.4, 7.2, 7.2, 7.4, 7.5, 7.4, 7.5, 7.6, 7.3, 7.4, 7.4, 7.3, 7.5, 4.5, 4.4, 4.4, 4.3, 4.2, 4.2, 4.1, 4.2, 4.1, 4.1, 4.2, 4.0, 4.1, 4.0, 4.1, 4.0, 4.0, 4.0]\n",
            "\n",
            "Datos para MEX:\n",
            "Años: [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.4, 1.3, 1.3, 1.3, 1.4, 1.3, 1.4, 1.3, 1.3, 1.3, 1.3, 1.0, 1.1]\n",
            "\n",
            "Datos para NLD:\n",
            "Años: [1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012]\n",
            "Valores: [20.1, 20.0, 19.9, 19.8, 19.4, 20.4, 20.6, 20.1, 19.7, 19.3, 18.8, 18.2, 17.7, 17.1, 16.6, 16.1, 15.4, 15.2, 14.8, 14.4, 14.0, 13.7, 13.3, 13.0, 12.8, 12.5, 12.3, 12.1, 11.9, 11.5, 11.2, 10.9, 10.6, 10.4, 10.1, 9.9, 9.8, 9.6, 9.5, 9.2, 9.0, 8.6, 8.4, 7.9, 7.5, 7.2, 6.6, 6.2, 6.0, 5.6, 5.6, 6.5, 6.4, 6.7, 6.7, 6.2, 5.9, 5.4, 5.1, 5.0, 4.7, 4.4, 4.2, 4.2, 4.1, 3.7, 3.9, 3.9, 3.7, 3.3, 3.2, 3.0, 2.9, 2.7, 2.6, 2.7, 2.6, 2.5, 2.3, 2.3, 2.2, 2.0, 2.1, 2.1, 1.9, 2.1, 2.0, 1.9]\n",
            "\n",
            "Datos para NZL:\n",
            "Años: [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 1982, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014]\n",
            "Valores: [4.3, 4.5, 4.6, 5.2, 6.1, 5.7, 5.8, 5.9, 6.2, 6.1, 6.0, 6.0, 5.8, 5.3, 4.6, 6.2, 5.7, 5.5, 5.4, 5.4, 4.9, 4.5, 4.2, 4.0, 3.7, 3.6, 3.2, 2.8, 2.5, 2.3, 2.2, 2.1, 2.1, 2.2, 2.2, 2.1, 2.0, 2.1, 2.0, 2.1, 2.1, 1.9, 2.0, 1.8, 1.8, 1.8, 2.1]\n",
            "\n",
            "Datos para NOR:\n",
            "Años: [1970, 1975, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010]\n",
            "Valores: [14.8, 12.2, 10.9, 10.6, 10.3, 10.1, 9.8, 9.6, 9.2, 9.1, 8.5, 7.8, 7.8, 7.4, 6.9, 6.8, 6.6, 6.5, 6.3, 6.4, 6.2, 6.1, 6.0, 5.8, 5.7, 5.4, 5.2, 5.2, 5.0, 5.0, 4.8, 6.4, 6.3, 6.1, 5.8, 5.5, 5.5, 6.2, 5.3, 5.2, 5.1, 4.8, 4.7, 4.4, 4.4, 4.2, 4.2, 4.1, 4.0, 3.9, 3.9, 3.7, 3.5, 3.4, 3.2, 3.2, 3.2, 3.1, 3.1]\n",
            "\n",
            "Datos para POL:\n",
            "Años: [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [7.9, 7.6, 7.4, 7.5, 7.4, 7.3, 7.1, 6.8, 6.7, 6.6, 6.9, 4.8, 4.6, 4.6, 4.6, 4.6, 4.4, 4.1, 4.0, 3.9, 3.9, 3.9, 3.9, 3.8]\n",
            "\n",
            "Datos para PRT:\n",
            "Años: [1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [7.5, 7.3, 7.1, 7.8, 7.8, 7.4, 7.2, 7.1, 7.1, 7.0, 7.1, 6.9, 6.8, 7.0, 7.0, 7.0, 7.5, 7.2, 7.2, 7.1]\n",
            "\n",
            "Datos para SVK:\n",
            "Años: [1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009, 2010, 2011, 2012, 2014, 2015]\n",
            "Valores: [10.5, 10.1, 9.4, 8.7, 8.4, 8.1, 7.7, 7.4, 7.3, 7.3, 7.2, 7.0, 6.9, 6.7, 6.6, 6.3, 6.2, 6.2, 7.0, 6.9, 6.7, 6.7, 6.5, 6.1, 5.9, 5.7, 5.7, 5.5, 5.4, 5.3, 5.2, 5.1, 5.0, 4.9]\n",
            "\n",
            "Datos para ESP:\n",
            "Años: [1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [10.1, 9.9, 10.0, 9.8, 9.7, 9.6, 9.3, 9.2, 9.1, 9.0, 8.8, 8.0, 7.6, 7.5, 7.3, 7.1, 7.0, 7.0, 6.9, 6.7, 6.7, 6.6, 6.6, 6.5, 6.4, 6.3, 6.1, 6.1, 6.0, 5.9, 5.9, 4.2, 4.2, 4.1, 4.2, 4.1, 4.3, 4.3, 4.3, 4.2, 4.2, 4.1, 4.1, 3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.2, 3.0, 3.0, 2.8, 2.8, 2.7, 2.6, 2.6, 2.6, 2.6, 2.6, 2.5, 2.5, 2.5, 2.4, 2.4, 2.4, 2.4]\n",
            "\n",
            "Datos para SWE:\n",
            "Años: [1970, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2013, 2014, 2015]\n",
            "Valores: [11.0, 9.8, 9.6, 9.5, 9.1, 9.0, 8.9, 8.7, 8.5, 8.3, 8.2, 8.0, 7.8, 7.5, 7.3, 7.1, 6.9, 6.8, 6.5, 6.2, 5.8, 5.5, 5.3, 5.2, 5.0, 5.1, 7.0, 6.8, 6.6, 6.6, 6.5, 6.4, 6.3, 6.2, 6.3, 6.1, 6.2, 6.2, 5.8, 5.7, 5.6, 5.6, 5.6, 5.7, 3.0, 2.8, 2.8, 2.7, 2.7, 2.6, 2.5, 2.5, 2.4, 2.4, 2.3, 2.3, 2.3, 2.3]\n",
            "\n",
            "Datos para CHE:\n",
            "Años: [1975, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1975, 1976, 1977, 1978, 1979, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [15.0, 15.5, 15.4, 15.1, 15.1, 15.0, 14.7, 14.2, 14.5, 14.2, 14.0, 13.4, 13.0, 12.1, 12.1, 12.0, 12.0, 12.0, 10.5, 9.9, 9.8, 9.3, 9.2, 9.1, 9.0, 8.8, 8.5, 8.2, 7.8, 7.7, 7.5, 6.6, 6.5, 6.1, 5.9, 5.8, 5.7, 9.7, 9.5, 9.5, 9.3, 9.3, 4.9, 4.8, 4.7, 4.6, 4.5, 4.4, 4.3, 4.2, 4.0, 3.9, 3.6, 3.5, 3.4, 3.2]\n",
            "\n",
            "Datos para TUR:\n",
            "Años: [1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1975, 1977, 1978, 1979, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [8.5, 8.5, 7.7, 7.6, 7.2, 7.0, 6.8, 6.7, 6.5, 6.5, 6.5, 6.5, 6.5, 6.4, 6.2, 6.0, 5.9, 5.8, 5.6, 6.5, 5.6, 5.6, 5.8, 5.7, 5.6, 5.3, 5.1, 4.4, 4.1, 4.1, 4.0, 3.9, 3.9, 3.9, 4.0, 3.9, 2.0, 2.2, 2.5, 2.2, 1.4, 1.3, 1.5, 1.5, 1.4]\n",
            "\n",
            "Datos para GBR:\n",
            "Años: [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [7.7, 7.5, 7.3, 7.1, 6.9, 6.6, 6.4, 6.3, 6.2, 6.1, 6.0, 6.0, 6.0, 6.0, 6.0, 2.1, 2.0, 2.0, 2.0, 1.8, 1.8, 1.7, 1.7, 1.6, 1.6, 1.6, 1.5, 1.5, 1.5, 1.5, 1.5]\n",
            "\n",
            "Datos para USA:\n",
            "Años: [1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010]\n",
            "Valores: [7.6, 7.6, 7.6, 7.7, 7.7, 7.8, 7.9, 8.3, 8.4, 8.3, 8.2, 8.0, 7.9, 7.8, 7.8, 7.7, 7.7, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.3, 7.1, 7.1, 7.2, 7.2, 7.3, 7.3, 7.2, 7.1, 7.0, 6.8, 6.5, 6.2, 6.1, 6.0, 5.9, 5.8, 5.8, 5.7, 5.7, 5.6, 5.6, 5.6, 5.5, 5.5, 5.4, 5.4, 5.4, 5.4, 5.4, 5.5, 2.0, 2.0, 1.9, 1.8, 1.8, 1.5, 1.6, 1.8, 1.8, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 2.1, 2.0, 2.0]\n",
            "\n",
            "Datos para CHL:\n",
            "Años: [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014]\n",
            "Valores: [3.1, 3.1, 3.2, 3.2, 3.0, 3.0, 3.0, 3.0, 2.9, 2.8, 2.8, 2.8, 2.8, 2.7]\n",
            "\n",
            "Datos para EST:\n",
            "Años: [1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [15.0, 14.5, 14.4, 14.3, 14.3, 14.3, 14.4, 13.1, 12.5, 11.4, 10.5, 9.6, 9.2, 8.8, 8.0, 7.3, 6.9, 6.9, 6.4, 6.2, 6.0, 5.9, 5.9, 5.7, 5.6, 5.5, 5.5, 5.6, 5.5, 5.4, 5.5]\n",
            "\n",
            "Datos para ISR:\n",
            "Años: [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [9.0, 6.1, 6.0, 6.0, 6.0, 5.9, 7.3, 5.7, 5.1, 5.2, 5.2, 5.4, 5.4, 5.3, 5.1, 5.2, 2.9, 2.9, 2.9, 2.8, 2.9, 2.9, 2.8, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 2.9, 3.0, 3.0]\n",
            "\n",
            "Datos para RUS:\n",
            "Años: [1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [13.6, 13.3, 13.3, 13.6, 13.8, 13.7, 13.6, 13.6, 13.6, 13.6, 13.6, 14.3, 14.0, 13.7, 13.5, 13.2, 12.9, 12.6, 12.2, 11.9, 11.5, 11.4, 11.3, 11.0, 10.8, 11.3, 10.8, 10.3, 9.9, 9.7]\n",
            "\n",
            "Datos para SVN:\n",
            "Años: [1980, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [11.5, 10.7, 10.5, 10.3, 10.0, 9.8, 9.8, 9.4, 9.3, 9.2, 8.9, 8.8, 8.8, 8.4, 7.9, 7.5, 7.1, 6.8, 6.6, 6.1, 6.2, 5.8, 5.8, 5.5, 5.7, 5.6, 5.5, 6.8, 6.9, 6.6, 6.6, 6.5, 7.3, 6.6, 4.9, 5.1, 5.0, 4.9, 4.7, 4.3, 4.1, 4.0, 3.9, 4.0, 4.0, 3.9, 3.9, 3.6, 3.6, 3.6]\n",
            "\n",
            "Datos para LVA:\n",
            "Años: [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2013, 2014, 2015]\n",
            "Valores: [8.5, 8.3, 8.0, 7.9, 7.8, 7.4, 7.2, 7.1, 7.1, 6.1, 6.2, 6.0, 5.8, 5.8, 5.9, 6.0, 3.3, 3.3, 3.4]\n",
            "\n",
            "Datos para LTU:\n",
            "Años: [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2013, 2014, 2015]\n",
            "Valores: [14.7, 14.1, 13.5, 12.8, 12.0, 10.6, 9.1, 8.6, 8.4, 8.1, 7.7, 7.5, 7.3, 7.3, 7.1, 6.9, 6.7, 6.4, 6.3, 6.4, 6.3, 6.3, 6.4, 6.3, 3.6, 3.6, 3.6]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Acceder a los datos de un país específico\n",
        "pais_seleccionado = 'POL'\n",
        "if pais_seleccionado in datos_por_pais:\n",
        "    años = datos_por_pais[pais_seleccionado]['años']\n",
        "    valores = datos_por_pais[pais_seleccionado]['valores']\n",
        "\n",
        "    # Imprimir los vectores del país seleccionado\n",
        "    print(f\"Datos para {pais_seleccionado}:\")\n",
        "    print(f\"Años: {años}\")\n",
        "    print(f\"Valores: {valores}\")\n",
        "else:\n",
        "    print(f\"El país {pais_seleccionado} no se encuentra en los datos.\")\n",
        "\n",
        "# Ejemplo de uso de los vectores\n",
        "# Calcular la media de los valores del país seleccionado\n",
        "media_valores = sum(valores) / len(valores)\n",
        "print(f\"Media de valores para {pais_seleccionado}: {media_valores}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aBBfaXghAe7Z",
        "outputId": "22cbdcad-33a2-4cee-eb84-1e867f287f7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Datos para POL:\n",
            "Años: [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\n",
            "Valores: [7.9, 7.6, 7.4, 7.5, 7.4, 7.3, 7.1, 6.8, 6.7, 6.6, 6.9, 4.8, 4.6, 4.6, 4.6, 4.6, 4.4, 4.1, 4.0, 3.9, 3.9, 3.9, 3.9, 3.8]\n",
            "Media de valores para POL: 5.595833333333332\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Iniciando el clustering\n",
        "import itertools\n",
        "from sklearn.cluster import DBSCAN, SpectralClustering, AgglomerativeClustering, KMeans\n",
        "from sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score\n",
        "\n",
        "\n",
        "EXPERIMENTOS = pd.DataFrame(columns=[\"Algoritmo\",\"Features\",\"k\",\"eps\",\"min_sample\",\"wcss\", \"isoG\",\"Distance\",\"SC\",\"CHZ\",\"DAVIES\",\"grupos\"])\n",
        "i = 0\n",
        "\n",
        "epsV = np.linspace(1, 5, 5).astype(int)\n",
        "min_samplesV = np.linspace(1, 10, 6).astype(int)\n",
        "algos = [DBSCAN, SpectralClustering, AgglomerativeClustering, KMeans]\n",
        "features = ['RAW', 'FB']\n",
        "ks = np.linspace(1, 50, 11).astype(int)\n",
        "distances = ['EU', 'DTW', 'CORP', 'SCOR']\n",
        "combinations = itertools.product(algos, features, ks, epsV, min_samplesV, distances)\n",
        "\n",
        "# Iteraciones\n",
        "for algo, fea, k, epsi, min_samples, dist in combinations:\n",
        "    for country, data in datos_por_pais.items():\n",
        "        # Para calcular las distancias\n",
        "        distancias = np.array(data['valores']).reshape(-1, 1)\n",
        "\n",
        "        if algo.__name__ == 'DBSCAN':\n",
        "            if k == 1:\n",
        "                quantiles = np.percentile(distancias.flatten(), [25, 50, 75, 90])  # Adjust the percentile values as needed\n",
        "                eps_min = quantiles[2]  # Lower bound for eps\n",
        "                eps_max = quantiles[3]  # Upper bound for eps\n",
        "                eps_values = np.linspace(eps_min, eps_max, 10)  # Adjust the range and number of values as needed\n",
        "\n",
        "                # Verificar si epsi es un entero antes de acceder a eps_values[epsi]\n",
        "                if isinstance(epsi, int):\n",
        "                    print(algo.__name__, fea, k, eps_values[epsi], min_samples, dist)\n",
        "                else:\n",
        "                    print(f\"Error: 'epsi' debe ser un entero, pero es de tipo {type(epsi)}\")\n",
        "                    continue\n",
        "\n",
        "                try:\n",
        "                    dbscan = DBSCAN(eps=eps_values[epsi], min_samples=min_samples)\n",
        "                    grupos = dbscan.fit_predict(distancias)\n",
        "                    k = np.sum(np.unique(grupos) != -1)\n",
        "                    epsi = eps_values[epsi]\n",
        "                except Exception as e:\n",
        "                    print(f\"Error con DBSCAN para {country}: {e}\")\n",
        "                    continue\n",
        "            else:\n",
        "                continue\n",
        "        else:\n",
        "            if epsi == 1 and min_samples == 1:\n",
        "                print(algo.__name__, fea, k, epsi, min_samples, dist)\n",
        "                try:\n",
        "                    if algo.__name__ == 'SpectralClustering':\n",
        "                        grupos = algo(n_clusters=k, affinity='nearest_neighbors').fit_predict(distancias)\n",
        "                    else:\n",
        "                        grupos = algo(n_clusters=k).fit_predict(distancias)\n",
        "\n",
        "                    k = np.sum(np.unique(grupos) != -1)\n",
        "                except Exception as e:\n",
        "                    print(f\"Error con {algo.__name__} para {country}: {e}\")\n",
        "                    continue\n",
        "            else:\n",
        "                continue\n",
        "\n",
        "        if k > 1:\n",
        "            sc_score = silhouette_score(distancias, grupos)\n",
        "            ch_score = calinski_harabasz_score(distancias, grupos)\n",
        "            davies_score = davies_bouldin_score(distancias, grupos)\n",
        "            unique_labels = np.unique(grupos)\n",
        "            a, b = np.unique(grupos, return_counts=True)\n",
        "            isoG = np.sum(b == 1)\n",
        "\n",
        "            #Calcular las distancias euclidianas al cuadrado entre los puntos de datos y sus respectivos centroides de grupo\n",
        "            distances_wcss = []\n",
        "            for label in unique_labels:\n",
        "                if label == -1:\n",
        "                    continue\n",
        "                cluster_points = distancias[grupos == label]\n",
        "                centroid = cluster_points.mean(axis=0)\n",
        "                cluster_distances = ((cluster_points - centroid) ** 2).sum(axis=1)\n",
        "                distances_wcss.extend(cluster_distances)\n",
        "\n",
        "            wcss = sum(distances_wcss)\n",
        "            new_row = {\n",
        "                \"Algoritmo\": algo.__name__,\n",
        "                \"Features\": fea,\n",
        "                \"k\": k,\n",
        "                \"eps\": epsi,\n",
        "                \"min_sample\": min_samples,\n",
        "                \"Distance\": dist,\n",
        "                \"wcss\": wcss,\n",
        "                \"isoG\": isoG,\n",
        "                \"SC\": sc_score,\n",
        "                \"CHZ\": ch_score,\n",
        "                \"DAVIES\": davies_score,\n",
        "                \"grupos\": grupos\n",
        "            }\n",
        "            print(new_row)\n",
        "            EXPERIMENTOS.loc[i] = new_row\n",
        "            i += 1\n",
        "\n",
        "# Mostrar el DataFrame final\n",
        "print(EXPERIMENTOS)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wDzvTobiHqtq",
        "outputId": "c7e7fec3-47da-4768-9f10-3b3a7c960b68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1;30;43mSe han truncado las últimas 5000 líneas del flujo de salida.\u001b[0m\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "Error: 'epsi' debe ser un entero, pero es de tipo <class 'numpy.int64'>\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 EU\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 DTW\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 CORP\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 1 1 1 SCOR\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 14.777099794941906, 'isoG': 0, 'SC': 0.6618045583972427, 'CHZ': 501.752579092745, 'DAVIES': 0.43499251378368, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 10.74530691530691, 'isoG': 0, 'SC': 0.5356638742906975, 'CHZ': 238.17061281278308, 'DAVIES': 0.4925466850712481, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8184761904761901, 'isoG': 0, 'SC': 0.4686654646870935, 'CHZ': 571.7602641002354, 'DAVIES': 0.6295238095238439, 'grupos': array([4, 4, 4, 4, 0, 0, 4, 0, 0, 3, 0, 0, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,\n",
            "       2, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 48.453103729603725, 'isoG': 0, 'SC': 0.3762378446040589, 'CHZ': 228.8555576730611, 'DAVIES': 0.6608070696339041, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,\n",
            "       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 13.575151515151518, 'isoG': 0, 'SC': 0.48134219538698825, 'CHZ': 436.0480253631272, 'DAVIES': 0.5797448036740296, 'grupos': array([3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 4,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 24.190590909090915, 'isoG': 0, 'SC': 0.5110703686088756, 'CHZ': 129.2907589995646, 'DAVIES': 0.5876871892251072, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 16.065499999999993, 'isoG': 0, 'SC': 0.6967095688817032, 'CHZ': 780.3192448891801, 'DAVIES': 0.36978426804960135, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 1, 4, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 24.234967320261465, 'isoG': 0, 'SC': 0.42260291461692273, 'CHZ': 145.9302579592497, 'DAVIES': 0.59956253506285, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 11.943083333333329, 'isoG': 0, 'SC': 0.5955434542264676, 'CHZ': 313.0086462812569, 'DAVIES': 0.48363328659110766, 'grupos': array([2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 16.70122222222221, 'isoG': 0, 'SC': 0.6738255318234795, 'CHZ': 302.21433582136757, 'DAVIES': 0.4274621610760926, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 0, 0, 0, 0, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 8.85767676767677, 'isoG': 0, 'SC': 0.658795539154786, 'CHZ': 732.6922906351647, 'DAVIES': 0.42739774296981786, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.626166666666667, 'isoG': 0, 'SC': 0.4169631211992102, 'CHZ': 576.0693039659299, 'DAVIES': 0.9512800352800348, 'grupos': array([4, 4, 4, 4, 4, 2, 3, 2, 3, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 6.429174242424238, 'isoG': 0, 'SC': 0.4331732558946613, 'CHZ': 401.94276742645803, 'DAVIES': 0.5963555293045315, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 4,\n",
            "       4, 4, 4, 4, 4, 4, 4, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 5.984035714285711, 'isoG': 0, 'SC': 0.587950895483969, 'CHZ': 277.8308895210167, 'DAVIES': 0.5396935527141093, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 30.758666666666652, 'isoG': 0, 'SC': 0.3938679173814867, 'CHZ': 98.21290279359555, 'DAVIES': 0.6442867050147603, 'grupos': array([0, 0, 0, 0, 0, 3, 3, 3, 4, 4, 4, 2, 2, 2, 4, 2, 2, 1, 1, 1, 1, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.2407222222222223, 'isoG': 0, 'SC': 0.79857117321123, 'CHZ': 2243.807501655859, 'DAVIES': 0.33244238249453817, 'grupos': array([1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2,\n",
            "       2, 1, 1, 1, 3, 3, 3, 3, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.09899999999999957, 'isoG': 0, 'SC': 0.6372729700854549, 'CHZ': 5665.615056818214, 'DAVIES': 0.40000000000027863, 'grupos': array([1, 1, 4, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 0, 0, 0, 0, 3, 3, 2, 3,\n",
            "       2, 2, 3, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.005000000000000009, 'isoG': 1, 'SC': 0.19841269841269843, 'CHZ': 122.4761904761901, 'DAVIES': 0.1885714285714227, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 4, 1, 3, 0, 3, 0, 2, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 139.67220690943034, 'isoG': 0, 'SC': 0.5287892559040327, 'CHZ': 440.100789448189, 'DAVIES': 0.4906280187539657, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.35671581196581, 'isoG': 0, 'SC': 0.495023879083169, 'CHZ': 383.80695272460093, 'DAVIES': 0.5774359672052807, 'grupos': array([2, 2, 2, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 1, 2, 4, 1, 1, 1, 1, 1, 2,\n",
            "       2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 3, 3, 3,\n",
            "       3, 3, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 47.15336263736265, 'isoG': 0, 'SC': 0.5024497080951474, 'CHZ': 88.59646260962803, 'DAVIES': 0.4921795620645045, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.5096666666666665, 'isoG': 1, 'SC': 0.33744486666398804, 'CHZ': 512.9619440810986, 'DAVIES': 1.148660287080716, 'grupos': array([3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 4, 0, 0,\n",
            "       0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.14749999999999983, 'isoG': 0, 'SC': 0.16432539682538447, 'CHZ': 32.08474576271194, 'DAVIES': 0.8199999999997886, 'grupos': array([0, 1, 4, 0, 0, 1, 4, 2, 2, 2, 2, 3, 3, 2, 2, 2, 0, 1, 1, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 5.032460317460318, 'isoG': 0, 'SC': 0.47415831996607, 'CHZ': 85.20395949545109, 'DAVIES': 0.48932884487590866, 'grupos': array([2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 0, 0, 0, 4, 1, 1, 1,\n",
            "       1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 6.542222222222222, 'isoG': 0, 'SC': 0.6846080887224735, 'CHZ': 935.5721984506814, 'DAVIES': 0.43056449649403544, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 10.401543290043286, 'isoG': 0, 'SC': 0.6075336842590844, 'CHZ': 374.1469392926488, 'DAVIES': 0.44471410398713934, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 1, 1, 3, 3,\n",
            "       3, 3, 3, 3, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 21.303428571428565, 'isoG': 0, 'SC': 0.6432237295843534, 'CHZ': 495.76647999316003, 'DAVIES': 0.46742283674794205, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 5.449555555555557, 'isoG': 0, 'SC': 0.6732789500602768, 'CHZ': 319.17506014761653, 'DAVIES': 0.3651386495372965, 'grupos': array([4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2,\n",
            "       2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8537857142857139, 'isoG': 0, 'SC': 0.6692332151469976, 'CHZ': 1411.353690394907, 'DAVIES': 0.430137970323395, 'grupos': array([2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 4, 4, 4,\n",
            "       4, 1, 1, 4, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 223.99211562630916, 'isoG': 0, 'SC': 0.373893424656623, 'CHZ': 16.895499295864653, 'DAVIES': 1.1085658564878145, 'grupos': array([0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0,\n",
            "       0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.06800000000000003, 'isoG': 2, 'SC': 0.12976190476190516, 'CHZ': 8.810924369747909, 'DAVIES': 1.1600000000000203, 'grupos': array([0, 4, 0, 0, 0, 3, 0, 2, 4, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 10.373293650793652, 'isoG': 0, 'SC': 0.6088941232519506, 'CHZ': 242.77196485223823, 'DAVIES': 0.4419922988525521, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0,\n",
            "       0, 0, 4, 4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 8.89875, 'isoG': 0, 'SC': 0.735419095605887, 'CHZ': 58.34900442477877, 'DAVIES': 0.4296499929915873, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 2, 2,\n",
            "       3, 2, 2, 2, 2, 2, 2, 2, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.636, 'isoG': 0, 'SC': 0.5257388527745629, 'CHZ': 122.89453717754189, 'DAVIES': 0.5610639566342666, 'grupos': array([0, 4, 4, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 4, 4, 1, 1, 1, 1,\n",
            "       1, 3, 3, 1, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 9.851818181818178, 'isoG': 0, 'SC': 0.5751812358182847, 'CHZ': 269.6445718372245, 'DAVIES': 0.5011574663575737, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 4, 4, 4, 1, 4, 1,\n",
            "       1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.278666666666667, 'isoG': 0, 'SC': 0.39873162165842296, 'CHZ': 68.7479289211912, 'DAVIES': 5.338498478307628, 'grupos': array([2, 2, 2, 2, 2, 2, 3, 4, 4, 3, 1, 4, 1, 1, 1, 1, 0, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 12.050619047619048, 'isoG': 0, 'SC': 0.43389729640155744, 'CHZ': 105.01702101409093, 'DAVIES': 0.5662267482083261, 'grupos': array([0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 1, 4, 1, 4, 1, 1,\n",
            "       1, 1, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 14.77709979494191, 'isoG': 0, 'SC': 0.6618045583972427, 'CHZ': 501.7525790927449, 'DAVIES': 0.43499251378368, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 10.745306915306912, 'isoG': 0, 'SC': 0.5356638742906975, 'CHZ': 238.1706128127831, 'DAVIES': 0.492546685071248, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.8184761904761901, 'isoG': 0, 'SC': 0.4686654646870935, 'CHZ': 571.7602641002354, 'DAVIES': 0.6295238095238438, 'grupos': array([3, 3, 3, 3, 1, 1, 3, 1, 1, 2, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4,\n",
            "       4, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 431.34916498316505, 'isoG': 0, 'SC': 0.2202010702992304, 'CHZ': 10.838674161371001, 'DAVIES': 3.1421276084286713, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2,\n",
            "       1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 13.575151515151523, 'isoG': 0, 'SC': 0.48134219538698825, 'CHZ': 436.0480253631271, 'DAVIES': 0.5797448036740296, 'grupos': array([0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 24.190590909090915, 'isoG': 0, 'SC': 0.5110703686088756, 'CHZ': 129.29075899956462, 'DAVIES': 0.5876871892251072, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 16.065499999999997, 'isoG': 0, 'SC': 0.6967095688817032, 'CHZ': 780.3192448891801, 'DAVIES': 0.3697842680496013, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 4, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 24.234967320261443, 'isoG': 0, 'SC': 0.42260291461692273, 'CHZ': 145.9302579592497, 'DAVIES': 0.59956253506285, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 11.682904761904759, 'isoG': 0, 'SC': 0.5997250005730784, 'CHZ': 320.19648913515914, 'DAVIES': 0.4835659608774431, 'grupos': array([4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 16.701222222222214, 'isoG': 0, 'SC': 0.6738255318234795, 'CHZ': 302.21433582136757, 'DAVIES': 0.42746216107609253, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 8.85767676767677, 'isoG': 0, 'SC': 0.658795539154786, 'CHZ': 732.6922906351648, 'DAVIES': 0.42739774296981786, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.6275000000000004, 'isoG': 1, 'SC': 0.481798489417814, 'CHZ': 574.8351593625495, 'DAVIES': 1.2415364455364581, 'grupos': array([1, 1, 1, 1, 1, 3, 1, 4, 3, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 6.42917424242424, 'isoG': 0, 'SC': 0.4331732558946613, 'CHZ': 401.942767426458, 'DAVIES': 0.5963555293045315, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 5.984035714285708, 'isoG': 0, 'SC': 0.587950895483969, 'CHZ': 277.8308895210166, 'DAVIES': 0.5396935527141093, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 32.12190476190475, 'isoG': 0, 'SC': 0.35505886335516895, 'CHZ': 93.8644267778593, 'DAVIES': 0.6148451449301235, 'grupos': array([0, 0, 0, 0, 0, 4, 4, 4, 1, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 2, 2, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.240722222222222, 'isoG': 0, 'SC': 0.79857117321123, 'CHZ': 2243.807501655859, 'DAVIES': 0.33244238249453817, 'grupos': array([0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3,\n",
            "       3, 0, 0, 0, 2, 2, 2, 2, 1, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.09899999999999949, 'isoG': 0, 'SC': 0.6372729700854549, 'CHZ': 5665.615056818214, 'DAVIES': 0.40000000000027863, 'grupos': array([2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 3, 3, 3, 3, 4, 4, 1, 4,\n",
            "       1, 1, 4, 1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.005000000000000009, 'isoG': 2, 'SC': 0.19841269841269843, 'CHZ': 122.47619047619013, 'DAVIES': 0.1885714285714227, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2, 0, 0, 4, 0, 3, 3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 139.6722069094304, 'isoG': 0, 'SC': 0.5287892559040327, 'CHZ': 440.10078944818895, 'DAVIES': 0.4906280187539657, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.35671581196581, 'isoG': 0, 'SC': 0.495023879083169, 'CHZ': 383.80695272460093, 'DAVIES': 0.5774359672052807, 'grupos': array([2, 2, 2, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 2, 4, 0, 0, 0, 0, 0, 2,\n",
            "       2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 3, 3,\n",
            "       3, 3, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 47.15336263736266, 'isoG': 0, 'SC': 0.5024497080951474, 'CHZ': 88.59646260962805, 'DAVIES': 0.4921795620645045, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 4, 4, 4, 4, 4, 4, 4, 0, 1, 1, 1, 4, 4, 4, 1, 4, 4, 4, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.7546666666666663, 'isoG': 0, 'SC': 0.5058144369085565, 'CHZ': 344.8884993374557, 'DAVIES': 0.9580587833219418, 'grupos': array([3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 4, 2, 2, 2, 2, 1, 1, 1, 4, 1,\n",
            "       1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.1474999999999999, 'isoG': 0, 'SC': 0.16432539682538447, 'CHZ': 32.08474576271194, 'DAVIES': 0.8199999999997886, 'grupos': array([0, 4, 3, 0, 0, 4, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0, 4, 4, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 5.890555555555555, 'isoG': 0, 'SC': 0.46580123968493664, 'CHZ': 71.73590853864893, 'DAVIES': 0.5230731559706129, 'grupos': array([2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 3, 3, 4, 4, 1, 1,\n",
            "       1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 6.542222222222221, 'isoG': 0, 'SC': 0.6846080887224735, 'CHZ': 935.5721984506814, 'DAVIES': 0.43056449649403544, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1], dtype=int32)}\n",
            "SpectralClustering RAW "
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 10.401543290043298, 'isoG': 0, 'SC': 0.6075336842590844, 'CHZ': 374.1469392926489, 'DAVIES': 0.44471410398713934, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 2,\n",
            "       2, 2, 2, 2, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 21.303428571428572, 'isoG': 0, 'SC': 0.6432237295843534, 'CHZ': 495.76647999316, 'DAVIES': 0.46742283674794205, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 5.449555555555557, 'isoG': 0, 'SC': 0.6732789500602768, 'CHZ': 319.17506014761653, 'DAVIES': 0.3651386495372965, 'grupos': array([4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1,\n",
            "       1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.853785714285714, 'isoG': 0, 'SC': 0.6692332151469976, 'CHZ': 1411.353690394907, 'DAVIES': 0.430137970323395, 'grupos': array([3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 4, 4, 4,\n",
            "       4, 0, 0, 4, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 223.9921156263092, 'isoG': 0, 'SC': 0.373893424656623, 'CHZ': 16.895499295864653, 'DAVIES': 1.1085658564878142, 'grupos': array([3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3,\n",
            "       3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.06800000000000005, 'isoG': 2, 'SC': 0.12976190476190516, 'CHZ': 8.810924369747909, 'DAVIES': 1.1600000000000203, 'grupos': array([2, 1, 2, 2, 3, 2, 2, 4, 1, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 10.373293650793652, 'isoG': 0, 'SC': 0.6088941232519506, 'CHZ': 242.77196485223828, 'DAVIES': 0.4419922988525521, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2,\n",
            "       2, 2, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 8.89875, 'isoG': 0, 'SC': 0.735419095605887, 'CHZ': 58.34900442477877, 'DAVIES': 0.4296499929915874, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 4, 3, 3,\n",
            "       4, 3, 3, 3, 3, 3, 3, 3, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.636, 'isoG': 0, 'SC': 0.5257388527745629, 'CHZ': 122.89453717754192, 'DAVIES': 0.5610639566342666, 'grupos': array([3, 2, 2, 3, 1, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 2, 0, 0, 0, 0,\n",
            "       0, 4, 4, 0, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 9.851818181818176, 'isoG': 0, 'SC': 0.5751812358182847, 'CHZ': 269.6445718372245, 'DAVIES': 0.5011574663575737, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 0, 1,\n",
            "       1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.278666666666667, 'isoG': 0, 'SC': 0.39873162165842296, 'CHZ': 68.7479289211912, 'DAVIES': 5.338498478307628, 'grupos': array([2, 2, 2, 2, 2, 2, 4, 1, 1, 4, 3, 1, 3, 3, 3, 3, 0, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 12.050619047619044, 'isoG': 0, 'SC': 0.43389729640155744, 'CHZ': 105.01702101409094, 'DAVIES': 0.566226748208326, 'grupos': array([4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2,\n",
            "       2, 2, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 14.777099794941906, 'isoG': 0, 'SC': 0.6618045583972427, 'CHZ': 501.75257909274495, 'DAVIES': 0.43499251378368, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 8.325612470862469, 'isoG': 0, 'SC': 0.554052195001113, 'CHZ': 310.95100797507354, 'DAVIES': 0.4977894721589265, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.8184761904761902, 'isoG': 0, 'SC': 0.4686654646870935, 'CHZ': 571.7602641002354, 'DAVIES': 0.6295238095238437, 'grupos': array([1, 1, 1, 1, 4, 4, 1, 4, 4, 0, 4, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2,\n",
            "       2, 3, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 48.453103729603725, 'isoG': 0, 'SC': 0.3762378446040589, 'CHZ': 228.8555576730612, 'DAVIES': 0.6608070696339042, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4,\n",
            "       0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 13.57515151515152, 'isoG': 0, 'SC': 0.48134219538698825, 'CHZ': 436.0480253631271, 'DAVIES': 0.5797448036740296, 'grupos': array([1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 24.190590909090908, 'isoG': 0, 'SC': 0.5110703686088756, 'CHZ': 129.2907589995646, 'DAVIES': 0.5876871892251071, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 16.065499999999993, 'isoG': 0, 'SC': 0.6967095688817032, 'CHZ': 780.3192448891801, 'DAVIES': 0.36978426804960135, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 1, 4, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 24.23496732026143, 'isoG': 0, 'SC': 0.42260291461692273, 'CHZ': 145.9302579592497, 'DAVIES': 0.59956253506285, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 11.943083333333332, 'isoG': 0, 'SC': 0.5955434542264676, 'CHZ': 313.0086462812569, 'DAVIES': 0.48363328659110766, 'grupos': array([4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 16.70122222222222, 'isoG': 0, 'SC': 0.6738255318234795, 'CHZ': 302.2143358213675, 'DAVIES': 0.42746216107609253, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 8.857676767676768, 'isoG': 0, 'SC': 0.658795539154786, 'CHZ': 732.6922906351647, 'DAVIES': 0.42739774296981786, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.6275000000000004, 'isoG': 1, 'SC': 0.481798489417814, 'CHZ': 574.8351593625495, 'DAVIES': 1.2415364455364581, 'grupos': array([2, 2, 2, 2, 2, 3, 2, 4, 3, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 6.429174242424239, 'isoG': 0, 'SC': 0.4331732558946613, 'CHZ': 401.94276742645803, 'DAVIES': 0.5963555293045315, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 5.984035714285714, 'isoG': 0, 'SC': 0.587950895483969, 'CHZ': 277.8308895210166, 'DAVIES': 0.5396935527141093, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 "
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 32.12190476190476, 'isoG': 0, 'SC': 0.35505886335516895, 'CHZ': 93.8644267778593, 'DAVIES': 0.6148451449301235, 'grupos': array([2, 2, 2, 2, 2, 3, 3, 3, 1, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 0, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.240722222222221, 'isoG': 0, 'SC': 0.79857117321123, 'CHZ': 2243.8075016558587, 'DAVIES': 0.33244238249453817, 'grupos': array([3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0,\n",
            "       0, 3, 3, 3, 1, 1, 1, 1, 2, 4, 4, 2, 2, 4, 4, 4, 4, 4, 4, 4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.0989999999999995, 'isoG': 0, 'SC': 0.6372729700854549, 'CHZ': 5665.615056818215, 'DAVIES': 0.4000000000002785, 'grupos': array([1, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 4, 4, 4, 4, 0, 0, 2, 0,\n",
            "       2, 2, 0, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.005000000000000009, 'isoG': 2, 'SC': 0.19841269841269843, 'CHZ': 122.4761904761901, 'DAVIES': 0.1885714285714227, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 2, 3, 1, 1, 4, 1, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 142.9929055149185, 'isoG': 0, 'SC': 0.5297012077944298, 'CHZ': 429.3985341974975, 'DAVIES': 0.48404483343536847, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.3567158119658087, 'isoG': 0, 'SC': 0.495023879083169, 'CHZ': 383.80695272460093, 'DAVIES': 0.5774359672052806, 'grupos': array([2, 2, 2, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 3, 0, 0, 0, 0, 0, 2,\n",
            "       2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 1, 4, 4, 1, 1, 1,\n",
            "       1, 1, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 47.153362637362676, 'isoG': 0, 'SC': 0.5024497080951474, 'CHZ': 88.59646260962803, 'DAVIES': 0.4921795620645045, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1, 3, 3, 3, 1, 3, 3, 3, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.5866666666666669, 'isoG': 0, 'SC': 0.5448169159110369, 'CHZ': 445.01225142045405, 'DAVIES': 0.9052850908489669, 'grupos': array([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 4, 3, 3, 4, 3, 3,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.14749999999999983, 'isoG': 0, 'SC': 0.16432539682538447, 'CHZ': 32.08474576271194, 'DAVIES': 0.8199999999997886, 'grupos': array([1, 0, 4, 1, 1, 0, 4, 2, 2, 2, 2, 3, 3, 2, 2, 2, 1, 0, 0, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 4.975083333333332, 'isoG': 0, 'SC': 0.45964461084573716, 'CHZ': 86.27021889474706, 'DAVIES': 0.5250628164012302, 'grupos': array([3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 1, 2, 2, 2,\n",
            "       2, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 6.542222222222221, 'isoG': 0, 'SC': 0.6846080887224735, 'CHZ': 935.5721984506814, 'DAVIES': 0.43056449649403544, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 10.401543290043294, 'isoG': 0, 'SC': 0.6075336842590844, 'CHZ': 374.1469392926488, 'DAVIES': 0.44471410398713934, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 3, 3, 2, 2,\n",
            "       2, 2, 2, 2, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 21.30342857142858, 'isoG': 0, 'SC': 0.6432237295843534, 'CHZ': 495.76647999316, 'DAVIES': 0.46742283674794205, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 5.449555555555557, 'isoG': 0, 'SC': 0.6732789500602768, 'CHZ': 319.17506014761653, 'DAVIES': 0.3651386495372965, 'grupos': array([4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0,\n",
            "       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.8537857142857141, 'isoG': 0, 'SC': 0.6692332151469976, 'CHZ': 1411.353690394907, 'DAVIES': 0.430137970323395, 'grupos': array([3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 2, 2, 2,\n",
            "       2, 0, 0, 2, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.9278634085213024, 'isoG': 0, 'SC': 0.6692230848374268, 'CHZ': 2632.7557106232357, 'DAVIES': 0.40238114520467355, 'grupos': array([3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,\n",
            "       3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.06800000000000003, 'isoG': 2, 'SC': 0.12976190476190516, 'CHZ': 8.810924369747909, 'DAVIES': 1.1600000000000203, 'grupos': array([0, 1, 0, 0, 0, 4, 3, 0, 1, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 10.373293650793652, 'isoG': 0, 'SC': 0.6088941232519506, 'CHZ': 242.77196485223823, 'DAVIES': 0.4419922988525521, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 1, 4, 4, 4, 4,\n",
            "       4, 4, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 8.898750000000001, 'isoG': 0, 'SC': 0.735419095605887, 'CHZ': 58.34900442477877, 'DAVIES': 0.4296499929915873, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 3, 0, 0,\n",
            "       3, 0, 0, 0, 0, 0, 0, 0, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.6701666666666655, 'isoG': 0, 'SC': 0.5076204880914026, 'CHZ': 121.24204169527502, 'DAVIES': 0.5335428298737098, 'grupos': array([1, 4, 4, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 4, 4, 4, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 9.851818181818176, 'isoG': 0, 'SC': 0.5751812358182847, 'CHZ': 269.64457183722453, 'DAVIES': 0.5011574663575737, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 2, 2, 2, 3, 2, 3,\n",
            "       3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.278666666666667, 'isoG': 0, 'SC': 0.39873162165842296, 'CHZ': 68.7479289211912, 'DAVIES': 5.338498478307628, 'grupos': array([0, 0, 0, 0, 0, 0, 3, 4, 4, 3, 1, 4, 1, 1, 1, 1, 2, 2, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 12.050619047619048, 'isoG': 0, 'SC': 0.43389729640155744, 'CHZ': 105.01702101409093, 'DAVIES': 0.5662267482083261, 'grupos': array([0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 1, 4, 1, 4, 1, 1,\n",
            "       1, 1, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 14.77709979494191, 'isoG': 0, 'SC': 0.6618045583972427, 'CHZ': 501.7525790927449, 'DAVIES': 0.43499251378368, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 8.679703379953384, 'isoG': 0, 'SC': 0.5326550352734718, 'CHZ': 297.76593312593656, 'DAVIES': 0.5005164435504065, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.8184761904761901, 'isoG': 0, 'SC': 0.4686654646870935, 'CHZ': 571.7602641002354, 'DAVIES': 0.6295238095238437, 'grupos': array([3, 3, 3, 3, 1, 1, 3, 1, 1, 4, 1, 1, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0,\n",
            "       0, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering "
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 48.453103729603725, 'isoG': 0, 'SC': 0.3762378446040589, 'CHZ': 228.8555576730612, 'DAVIES': 0.6608070696339041, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2,\n",
            "       0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 13.575151515151521, 'isoG': 0, 'SC': 0.48134219538698825, 'CHZ': 436.0480253631272, 'DAVIES': 0.5797448036740296, 'grupos': array([4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 24.190590909090915, 'isoG': 0, 'SC': 0.5110703686088756, 'CHZ': 129.2907589995646, 'DAVIES': 0.5876871892251072, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 16.065499999999993, 'isoG': 0, 'SC': 0.6967095688817032, 'CHZ': 780.3192448891801, 'DAVIES': 0.36978426804960135, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 24.234967320261465, 'isoG': 0, 'SC': 0.42260291461692273, 'CHZ': 145.9302579592497, 'DAVIES': 0.59956253506285, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 11.943083333333332, 'isoG': 0, 'SC': 0.5955434542264676, 'CHZ': 313.008646281257, 'DAVIES': 0.48363328659110766, 'grupos': array([4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 16.70122222222221, 'isoG': 0, 'SC': 0.6738255318234795, 'CHZ': 302.21433582136757, 'DAVIES': 0.4274621610760926, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 0, 0, 0, 0, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 8.857676767676768, 'isoG': 0, 'SC': 0.658795539154786, 'CHZ': 732.6922906351647, 'DAVIES': 0.42739774296981786, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.6275000000000004, 'isoG': 1, 'SC': 0.481798489417814, 'CHZ': 574.8351593625493, 'DAVIES': 1.2415364455364581, 'grupos': array([3, 3, 3, 3, 3, 2, 3, 4, 2, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 6.4291742424242395, 'isoG': 0, 'SC': 0.4331732558946613, 'CHZ': 401.94276742645803, 'DAVIES': 0.5963555293045315, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4,\n",
            "       4, 4, 4, 4, 4, 4, 4, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.984035714285711, 'isoG': 0, 'SC': 0.587950895483969, 'CHZ': 277.8308895210167, 'DAVIES': 0.5396935527141093, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 32.12190476190475, 'isoG': 0, 'SC': 0.35505886335516895, 'CHZ': 93.86442677785928, 'DAVIES': 0.6148451449301235, 'grupos': array([0, 0, 0, 0, 0, 3, 3, 3, 4, 4, 4, 1, 1, 1, 4, 1, 1, 1, 1, 2, 2, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.2407222222222214, 'isoG': 0, 'SC': 0.79857117321123, 'CHZ': 2243.807501655859, 'DAVIES': 0.3324423824945381, 'grupos': array([0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n",
            "       1, 0, 0, 0, 4, 4, 4, 4, 2, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.0989999999999995, 'isoG': 0, 'SC': 0.6372729700854549, 'CHZ': 5665.615056818215, 'DAVIES': 0.40000000000027863, 'grupos': array([1, 1, 4, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 3, 3, 3, 3, 0, 0, 2, 0,\n",
            "       2, 2, 0, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.005000000000000009, 'isoG': 1, 'SC': 0.19841269841269843, 'CHZ': 122.4761904761901, 'DAVIES': 0.1885714285714227, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 1, 2, 1, 2, 4, 2, 0, 3, 3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 139.67220690943049, 'isoG': 0, 'SC': 0.5287892559040327, 'CHZ': 440.10078944818895, 'DAVIES': 0.4906280187539657, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.3567158119658087, 'isoG': 0, 'SC': 0.495023879083169, 'CHZ': 383.80695272460093, 'DAVIES': 0.5774359672052806, 'grupos': array([1, 1, 1, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 3, 3, 3, 3, 3, 1,\n",
            "       1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 4, 2, 2, 4, 4, 4,\n",
            "       4, 4, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 47.15336263736267, 'isoG': 0, 'SC': 0.5024497080951474, 'CHZ': 88.59646260962803, 'DAVIES': 0.4921795620645045, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 4, 4, 4, 4, 4, 4, 4, 3, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.5096666666666664, 'isoG': 1, 'SC': 0.33744486666398804, 'CHZ': 512.9619440810987, 'DAVIES': 1.148660287080716, 'grupos': array([1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 4, 4, 0, 4, 4,\n",
            "       4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.14749999999999985, 'isoG': 0, 'SC': 0.16432539682538447, 'CHZ': 32.08474576271194, 'DAVIES': 0.8199999999997886, 'grupos': array([3, 2, 4, 3, 3, 2, 4, 1, 1, 1, 1, 0, 0, 1, 1, 1, 3, 2, 2, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.890555555555556, 'isoG': 0, 'SC': 0.46580123968493664, 'CHZ': 71.73590853864893, 'DAVIES': 0.523073155970613, 'grupos': array([0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 2, 2, 3, 3,\n",
            "       3, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 6.542222222222222, 'isoG': 0, 'SC': 0.6846080887224735, 'CHZ': 935.5721984506814, 'DAVIES': 0.43056449649403544, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 10.401543290043296, 'isoG': 0, 'SC': 0.6075336842590844, 'CHZ': 374.1469392926488, 'DAVIES': 0.44471410398713934, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3,\n",
            "       3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 21.303428571428565, 'isoG': 0, 'SC': 0.6432237295843534, 'CHZ': 495.76647999316, 'DAVIES': 0.46742283674794205, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.449555555555555, 'isoG': 0, 'SC': 0.6732789500602768, 'CHZ': 319.1750601476165, 'DAVIES': 0.3651386495372965, 'grupos': array([1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 2, 2,\n",
            "       2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.8537857142857144, 'isoG': 0, 'SC': 0.6692332151469976, 'CHZ': 1411.353690394907, 'DAVIES': 0.430137970323395, 'grupos': array([3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1,\n",
            "       1, 4, 4, 1, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.9278634085213024, 'isoG': 0, 'SC': 0.6692230848374268, 'CHZ': 2632.7557106232357, 'DAVIES': 0.40238114520467355, 'grupos': array([4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4,\n",
            "       4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.06800000000000003, 'isoG': 2, 'SC': 0.12976190476190516, 'CHZ': 8.810924369747909, 'DAVIES': 1.1600000000000203, 'grupos': array([1, 4, 1, 1, 0, 1, 3, 1, 4, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 10.373293650793652, 'isoG': 0, 'SC': 0.6088941232519506, 'CHZ': 242.77196485223823, 'DAVIES': 0.4419922988525521, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0,\n",
            "       0, 0, 3, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 8.89875, 'isoG': 0, 'SC': 0.735419095605887, 'CHZ': 58.34900442477877, 'DAVIES': 0.4296499929915873, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 2, 4, 4,\n",
            "       2, 4, 4, 4, 4, 4, 4, 4, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.636, 'isoG': 0, 'SC': 0.5257388527745629, 'CHZ': 122.89453717754189, 'DAVIES': 0.5610639566342666, 'grupos': array([1, 0, 0, 1, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 0, 0, 0, 3, 3, 3, 3,\n",
            "       3, 2, 2, 3, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 9.851818181818176, 'isoG': 0, 'SC': 0.5751812358182847, 'CHZ': 269.6445718372245, 'DAVIES': 0.5011574663575737, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 3, 3, 3, 0, 3, 0,\n",
            "       0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.278666666666667, 'isoG': 0, 'SC': 0.39873162165842296, 'CHZ': 68.7479289211912, 'DAVIES': 5.338498478307628, 'grupos': array([3, 3, 3, 3, 3, 3, 4, 2, 2, 4, 0, 2, 0, 0, 0, 0, 1, 1, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 5 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 5, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 12.050619047619042, 'isoG': 0, 'SC': 0.43389729640155744, 'CHZ': 105.01702101409094, 'DAVIES': 0.566226748208326, 'grupos': array([2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0,\n",
            "       0, 0, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 6.481714285714282, 'isoG': 0, 'SC': 0.5982222823872326, 'CHZ': 479.9772921323749, 'DAVIES': 0.4356775036183421, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5,\n",
            "       7, 7, 7, 5, 5, 5, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
            "       1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 6, 6, 6, 6, 6, 6, 3, 3, 3, 8, 8, 8,\n",
            "       8, 8, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.638559523809524, 'isoG': 0, 'SC': 0.5545203110239302, 'CHZ': 290.2547944987467, 'DAVIES': 0.46970853130476475, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 4, 4, 4, 4, 8, 8, 8, 8, 8, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 7, 7, 7, 0,\n",
            "       0, 0, 0, 0, 0, 0, 6, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.6071666666666671, 'isoG': 1, 'SC': 0.03941178296016871, 'CHZ': 277.49063308923564, 'DAVIES': 2.8393600668328336, 'grupos': array([2, 2, 2, 2, 7, 9, 2, 7, 9, 1, 6, 7, 1, 1, 1, 1, 4, 4, 4, 0, 3, 4,\n",
            "       8, 0, 0, 3, 8, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.7580833333333334, 'isoG': 0, 'SC': 0.5568099745461641, 'CHZ': 2777.0179857062376, 'DAVIES': 0.5037283309992342, 'grupos': array([3, 3, 3, 3, 3, 9, 9, 9, 9, 3, 3, 3, 3, 3, 2, 8, 8, 8, 8, 8, 8, 2,\n",
            "       2, 2, 2, 8, 2, 5, 5, 5, 5, 5, 5, 5, 5, 2, 4, 4, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 6,\n",
            "       6, 6, 6, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.066095238095236, 'isoG': 0, 'SC': 0.4291622412153235, 'CHZ': 1140.3409518159708, 'DAVIES': 2.593479872306087, 'grupos': array([1, 3, 1, 1, 1, 7, 7, 7, 7, 3, 1, 7, 3, 3, 3, 4, 4, 4, 8, 8, 8, 6,\n",
            "       6, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2,\n",
            "       2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 5.6206547619047615, 'isoG': 0, 'SC': 0.4357434393703496, 'CHZ': 231.4523599991097, 'DAVIES': 1.9309006352682982, 'grupos': array([0, 0, 3, 3, 3, 3, 9, 9, 9, 9, 3, 9, 9, 1, 1, 1, 1, 1, 1, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 7, 5, 7, 5, 7, 5, 6, 6, 8, 8, 8, 8, 8, 8, 8, 4, 4,\n",
            "       4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 4.953928571428567, 'isoG': 0, 'SC': 0.5690129148137343, 'CHZ': 1057.6966105494575, 'DAVIES': 0.5102730472502229, 'grupos': array([8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5,\n",
            "       5, 5, 5, 5, 5, 9, 5, 9, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 1, 4, 4, 4,\n",
            "       4, 4, 9, 9, 4, 4, 4, 1, 1, 1, 1, 1, 9, 1, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 5.839261904761905, 'isoG': 0, 'SC': 0.4752273002847937, 'CHZ': 262.2135734158616, 'DAVIES': 0.5215779761459374, 'grupos': array([6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4,\n",
            "       8, 8, 1, 9, 9, 1, 1, 4, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3,\n",
            "       3, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 5.532476190476193, 'isoG': 0, 'SC': 0.35022912775045617, 'CHZ': 266.18667715526084, 'DAVIES': 0.708605823318486, 'grupos': array([7, 7, 7, 7, 5, 5, 6, 5, 5, 6, 2, 2, 6, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n",
            "       4, 4, 4, 4, 4, 8, 8, 9, 9, 9, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.2541428571428557, 'isoG': 0, 'SC': 0.674112057910154, 'CHZ': 674.4597459389182, 'DAVIES': 0.5457545896743261, 'grupos': array([6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8,\n",
            "       8, 2, 2, 2, 2, 4, 4, 4, 4, 4, 9, 9, 4, 9, 0, 0, 2, 2, 2, 2, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 3, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.0840357142857138, 'isoG': 0, 'SC': 0.5229215810429859, 'CHZ': 873.1119182555813, 'DAVIES': 0.5670270605399649, 'grupos': array([2, 3, 3, 3, 8, 3, 2, 2, 3, 8, 3, 3, 3, 8, 2, 2, 2, 2, 2, 3, 3, 8,\n",
            "       3, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 4, 4, 4, 4,\n",
            "       4, 4, 4, 6, 6, 6, 6, 6, 1, 1, 1, 1, 4, 6, 6, 1, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.450666666666667, 'isoG': 5, 'SC': -0.03569173881672973, 'CHZ': 262.72637245233386, 'DAVIES': 3.483076923080951, 'grupos': array([2, 2, 7, 2, 2, 8, 2, 6, 9, 1, 1, 1, 1, 1, 5, 4, 3, 4, 0, 4, 4, 0,\n",
            "       0, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.9668214285714288, 'isoG': 0, 'SC': 0.4772808188932346, 'CHZ': 1087.919685082627, 'DAVIES': 0.7177486104214148, 'grupos': array([5, 5, 5, 5, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4,\n",
            "       4, 4, 1, 4, 7, 1, 7, 1, 1, 6, 6, 6, 6, 1, 0, 0, 0, 0, 9, 9, 9, 9,\n",
            "       3, 9, 9, 3, 3, 3, 3, 9], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8303214285714279, 'isoG': 1, 'SC': 0.6287250736058865, 'CHZ': 809.4852885205064, 'DAVIES': 0.3791969793771642, 'grupos': array([3, 3, 3, 3, 3, 6, 9, 9, 8, 8, 4, 5, 5, 5, 5, 5, 5, 4, 5, 5, 4, 4,\n",
            "       4, 4, 7, 8, 8, 8, 8, 8, 8, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 2,\n",
            "       2, 2, 2], dtype=int32)}"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 57.693333333333364, 'isoG': 5, 'SC': -0.09170891552791681, 'CHZ': 15.804595527729328, 'DAVIES': 11.204957581635966, 'grupos': array([1, 1, 1, 1, 1, 1, 5, 7, 2, 3, 4, 9, 6, 8, 0, 2, 9, 4, 0, 0, 2, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.3549999999999984, 'isoG': 4, 'SC': 0.44163904751252414, 'CHZ': 1428.588609695622, 'DAVIES': 0.2301145458183182, 'grupos': array([5, 5, 5, 5, 5, 1, 1, 5, 1, 1, 8, 1, 1, 1, 1, 1, 1, 0, 9, 5, 4, 3,\n",
            "       9, 5, 5, 5, 2, 2, 2, 2, 7, 7, 7, 6, 6, 7, 7, 7, 7, 7, 7, 7],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.06805555555555537, 'isoG': 3, 'SC': 0.0725694444444292, 'CHZ': 2985.772902494339, 'DAVIES': 0.937475198412745, 'grupos': array([3, 5, 2, 2, 3, 3, 6, 8, 8, 5, 5, 7, 2, 3, 4, 4, 4, 4, 1, 1, 0, 1,\n",
            "       0, 9, 1, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.005000000000000009, 'isoG': 7, 'SC': 0.19841269841269843, 'CHZ': 37.423280423280296, 'DAVIES': 0.19428571428570823, 'grupos': array([1, 1, 1, 1, 7, 1, 1, 1, 3, 1, 1, 6, 3, 9, 3, 0, 4, 8, 5, 2, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 31.249472943722935, 'isoG': 0, 'SC': 0.547445426330675, 'CHZ': 851.6565173122287, 'DAVIES': 0.4916700014135557, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 9, 9,\n",
            "       9, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 6, 6, 6, 6, 6,\n",
            "       6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8552142857142857, 'isoG': 0, 'SC': 0.6333850168382302, 'CHZ': 601.8489183404976, 'DAVIES': 0.392306247411642, 'grupos': array([9, 9, 9, 3, 7, 2, 2, 2, 7, 7, 2, 2, 2, 3, 9, 7, 2, 3, 3, 3, 9, 9,\n",
            "       9, 0, 0, 0, 0, 5, 5, 8, 8, 1, 1, 8, 8, 1, 6, 1, 6, 1, 1, 4, 6, 4,\n",
            "       4, 4, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 27.9079523809524, 'isoG': 0, 'SC': 0.5003698104299462, 'CHZ': 64.12446458457373, 'DAVIES': 0.49457619594687163, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 3, 3, 3, 3, 6, 6, 6, 6,\n",
            "       5, 5, 5, 9, 0, 0, 0, 0, 7, 6, 6, 6, 5, 9, 9, 6, 0, 0, 0, 7, 7, 7,\n",
            "       7, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8216666666666658, 'isoG': 5, 'SC': -0.24804360767968273, 'CHZ': 103.60930809105263, 'DAVIES': 1.1390756302520746, 'grupos': array([5, 2, 5, 5, 5, 2, 0, 0, 2, 0, 2, 3, 3, 3, 3, 8, 7, 9, 6, 1, 4, 1,\n",
            "       1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.09750000000000003, 'isoG': 4, 'SC': -0.12500000000000333, 'CHZ': 14.951566951566969, 'DAVIES': 0.9833333333334988, 'grupos': array([7, 7, 6, 1, 1, 7, 6, 0, 2, 5, 8, 3, 3, 2, 2, 2, 1, 4, 4, 9],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.8521666666666645, 'isoG': 0, 'SC': 0.2080815187311753, 'CHZ': 89.73004942101032, 'DAVIES': 2.201441079560542, 'grupos': array([3, 3, 3, 8, 8, 5, 5, 5, 1, 1, 1, 0, 9, 1, 9, 7, 7, 7, 0, 9, 0, 0,\n",
            "       7, 6, 7, 2, 2, 6, 4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.6015317460317453, 'isoG': 0, 'SC': 0.4753638536305553, 'CHZ': 970.9270572908733, 'DAVIES': 0.5641952340466243, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 7, 7, 7, 7, 7, 7, 2, 2, 3, 2, 3, 2, 2, 2, 2, 2, 3, 3, 3,\n",
            "       3, 3, 3, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5,\n",
            "       5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.173321428571429, 'isoG': 0, 'SC': 0.5704139503622577, 'CHZ': 505.78652096301136, 'DAVIES': 0.47992017608164605, 'grupos': array([4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 3, 3, 3, 9, 5, 2, 2,\n",
            "       7, 7, 7, 7, 3, 3, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2,\n",
            "       1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 5.258222222222223, 'isoG': 0, 'SC': 0.552663445788223, 'CHZ': 820.7760935087132, 'DAVIES': 0.48198228221567374, 'grupos': array([1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 7, 7, 7, 0,\n",
            "       0, 0, 0, 0, 9, 9, 6, 6, 6, 6, 4, 4, 4, 4, 4, 7, 0, 0, 0, 0, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.0118888888888877, 'isoG': 2, 'SC': 0.42219168994582573, 'CHZ': 227.73033205854983, 'DAVIES': 0.8363612634153818, 'grupos': array([2, 2, 2, 2, 8, 4, 4, 4, 3, 3, 3, 3, 4, 3, 9, 6, 9, 9, 7, 4, 7, 7,\n",
            "       9, 7, 7, 7, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8688333333333331, 'isoG': 3, 'SC': -0.04325521717931999, 'CHZ': 497.8247082871812, 'DAVIES': 5.110434782595934, 'grupos': array([7, 7, 7, 7, 7, 4, 1, 1, 1, 6, 4, 4, 4, 1, 1, 5, 5, 5, 5, 2, 2, 3,\n",
            "       9, 8, 0, 2, 3, 3, 3, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.9822103174603175, 'isoG': 0, 'SC': 0.6218199895232627, 'CHZ': 3256.876984596981, 'DAVIES': 0.49240127966775604, 'grupos': array([1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,\n",
            "       1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 3, 3, 3, 3,\n",
            "       3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 6, 5, 5, 5, 5, 5, 5, 6, 6,\n",
            "       6, 6, 6, 6, 6, 6, 6, 8, 8, 8], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.032000000000000056, 'isoG': 9, 'SC': -0.2857142857142865, 'CHZ': 4.19841269841269, 'DAVIES': 0.5416386554622286, 'grupos': array([3, 1, 2, 4, 6, 7, 0, 8, 0, 5, 0, 0, 0, 9], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 15.0555, 'isoG': 2, 'SC': -0.22885128032063276, 'CHZ': 59.32025448492904, 'DAVIES': 3.524702068844456, 'grupos': array([8, 8, 8, 1, 1, 1, 8, 8, 0, 1, 0, 4, 6, 6, 4, 2, 7, 7, 3, 7, 9, 2,\n",
            "       2, 5, 3, 2, 2, 3, 2, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 8.532638888888892, 'isoG': 4, 'SC': 0.19524770444365852, 'CHZ': 22.142037202825023, 'DAVIES': 1.4849236811209388, 'grupos': array([2, 4, 4, 4, 4, 4, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 6, 0, 3,\n",
            "       6, 8, 3, 3, 3, 3, 5, 9, 7, 7], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.710833333333332, 'isoG': 1, 'SC': 0.13673413683219893, 'CHZ': 68.52692536667213, 'DAVIES': 0.978095274785286, 'grupos': array([9, 7, 7, 2, 4, 4, 9, 9, 2, 4, 9, 0, 0, 9, 2, 8, 8, 5, 1, 3, 1, 1,\n",
            "       1, 3, 3, 1, 3, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.1070714285714294, 'isoG': 0, 'SC': 0.4628136144099326, 'CHZ': 347.4184387380553, 'DAVIES': 0.5996252036877248, 'grupos': array([4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 9, 9, 9, 9, 3, 3, 8, 8, 7, 7, 7,\n",
            "       7, 1, 7, 1, 1, 8, 8, 8, 8, 8, 3, 8, 5, 1, 5, 5, 5, 0, 0, 0, 6, 0,\n",
            "       0, 6, 6, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.9650000000000003, 'isoG': 6, 'SC': 0.07141566036303243, 'CHZ': 22.937324226597013, 'DAVIES': 2.891627268817397, 'grupos': array([1, 1, 1, 1, 1, 1, 9, 3, 8, 9, 5, 3, 4, 7, 6, 2, 0, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 6.172666666666661, 'isoG': 4, 'SC': 0.11796667776521196, 'CHZ': 72.20961253581768, 'DAVIES': 2.4581434301369542, 'grupos': array([1, 1, 1, 1, 1, 8, 5, 3, 3, 6, 3, 3, 6, 6, 7, 7, 2, 0, 2, 9, 2, 2,\n",
            "       7, 2, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 7.067857142857139, 'isoG': 0, 'SC': 0.5541564898622747, 'CHZ': 439.5918888050556, 'DAVIES': 0.49026242203254544, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5,\n",
            "       9, 9, 9, 5, 5, 5, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
            "       6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 0, 0, 0,\n",
            "       0, 0, 1, 1, 1, 1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.807702380952382, 'isoG': 0, 'SC': 0.49616046750427817, 'CHZ': 277.14414642772675, 'DAVIES': 0.5052912903580892, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,\n",
            "       7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 6, 6, 6, 8, 8, 8, 8, 8, 0,\n",
            "       0, 0, 0, 0, 0, 0, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.6071666666666672, 'isoG': 1, 'SC': 0.039411782960168694, 'CHZ': 277.49063308923564, 'DAVIES': 2.839360066832834, 'grupos': array([5, 5, 5, 5, 7, 2, 5, 3, 2, 4, 7, 7, 4, 4, 4, 4, 6, 6, 6, 9, 8, 6,\n",
            "       1, 9, 9, 8, 1, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.7560793650793645, 'isoG': 0, 'SC': 0.5611881865776597, 'CHZ': 2780.1948700257235, 'DAVIES': 0.49652126582862516, 'grupos': array([2, 2, 2, 2, 2, 9, 9, 9, 9, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 0,\n",
            "       0, 0, 0, 4, 0, 0, 5, 5, 5, 5, 5, 0, 5, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 3,\n",
            "       3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.3718333333333326, 'isoG': 0, 'SC': 0.4114420591522015, 'CHZ': 992.8311677201951, 'DAVIES': 2.6414338017340118, 'grupos': array([8, 1, 8, 8, 8, 2, 2, 2, 2, 1, 8, 2, 1, 1, 1, 5, 5, 5, 6, 6, 6, 4,\n",
            "       4, 4, 4, 4, 7, 7, 7, 7, 9, 9, 9, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 4.183369047619045, 'isoG': 0, 'SC': 0.46288059684962607, 'CHZ': 312.3852176983303, 'DAVIES': 1.848540060987288, 'grupos': array([4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 9, 0, 9, 0, 9, 0, 8, 8, 8, 8, 8, 8, 5, 5, 5, 7, 7,\n",
            "       7, 7, 7], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 4.953928571428572, 'isoG': 0, 'SC': 0.5690129148137343, 'CHZ': 1057.6966105494578, 'DAVIES': 0.510273047250223, 'grupos': array([2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 7,\n",
            "       7, 7, 7, 7, 7, 6, 7, 6, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 0, 9, 9, 9,\n",
            "       9, 9, 6, 6, 9, 9, 9, 0, 0, 0, 0, 0, 6, 0, 8, 8, 8, 8, 8, 8, 8, 8,\n",
            "       4, 4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 5.8400952380952385, 'isoG': 0, 'SC': 0.46172418121794967, 'CHZ': 262.17536497375374, 'DAVIES': 0.5402313168147191, 'grupos': array([8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0,\n",
            "       6, 6, 3, 9, 9, 3, 3, 0, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 9, 7, 7,\n",
            "       7, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 4.902595238095242, 'isoG': 0, 'SC': 0.3360977746884004, 'CHZ': 300.87146342129836, 'DAVIES': 1.259396160451499, 'grupos': array([5, 5, 5, 5, 1, 1, 1, 1, 1, 7, 8, 8, 7, 8, 8, 2, 2, 2, 2, 2, 2, 2,\n",
            "       4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 9, 0, 9, 9, 0, 3, 3, 3, 3, 3, 3, 3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.254142857142856, 'isoG': 0, 'SC': 0.674112057910154, 'CHZ': 674.4597459389182, 'DAVIES': 0.5457545896743261, 'grupos': array([7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6,\n",
            "       6, 1, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 0, 9, 3, 3, 1, 1, 1, 1, 3, 3,\n",
            "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 2, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.0840357142857138, 'isoG': 0, 'SC': 0.5229215810429859, 'CHZ': 873.1119182555814, 'DAVIES': 0.5670270605399649, 'grupos': array([3, 4, 4, 4, 7, 4, 3, 3, 4, 7, 4, 4, 4, 7, 3, 3, 3, 3, 3, 4, 4, 7,\n",
            "       4, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 5, 5, 5, 5,\n",
            "       5, 5, 5, 1, 1, 1, 1, 1, 9, 9, 9, 9, 5, 1, 1, 9, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.36066666666666675, 'isoG': 5, 'SC': 0.04027777777778701, 'CHZ': 328.67472787019915, 'DAVIES': 2.4779788838580306, 'grupos': array([0, 0, 0, 0, 0, 8, 9, 5, 6, 2, 2, 2, 2, 2, 1, 3, 3, 7, 3, 3, 4, 1,\n",
            "       7, 7], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.0120436507936512, 'isoG': 0, 'SC': 0.45434941156340464, 'CHZ': 1039.0984877389878, 'DAVIES': 1.0385957988863919, 'grupos': array([5, 5, 5, 5, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 9, 3,\n",
            "       3, 3, 9, 3, 8, 9, 8, 9, 9, 2, 2, 2, 2, 9, 4, 4, 4, 4, 6, 6, 6, 6,\n",
            "       0, 6, 6, 0, 0, 0, 0, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.8158571428571423, 'isoG': 1, 'SC': 0.6846360891960465, 'CHZ': 823.9094936444252, 'DAVIES': 0.3711764203890667, 'grupos': array([3, 3, 3, 3, 3, 9, 7, 7, 1, 1, 5, 2, 2, 2, 2, 2, 2, 5, 2, 2, 5, 5,\n",
            "       5, 5, 8, 8, 1, 1, 1, 1, 1, 8, 6, 6, 6, 0, 0, 0, 0, 0, 0, 4, 0, 4,\n",
            "       4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 25.49333333333335, 'isoG': 5, 'SC': -0.12746167585818502, 'CHZ': 37.45109040192721, 'DAVIES': 4.788720429512096, 'grupos': array([1, 1, 1, 1, 1, 9, 5, 8, 7, 8, 6, 2, 6, 4, 3, 2, 2, 6, 3, 3, 3, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 345.3318771929826, 'isoG': 6, 'SC': -0.13032146000097306, 'CHZ': 2.0638368958134774, 'DAVIES': 1.434355894882668, 'grupos': array([7, 7, 7, 7, 7, 0, 0, 7, 0, 0, 9, 0, 0, 0, 0, 0, 0, 4, 1, 7, 5, 3,\n",
            "       6, 7, 7, 7, 2, 2, 2, 2, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 13.503952380952384, 'isoG': 3, 'SC': 0.18847017973857777, 'CHZ': 12.615205199575119, 'DAVIES': 1.7529445148534948, 'grupos': array([4, 6, 0, 0, 9, 4, 7, 4, 4, 6, 6, 5, 0, 4, 2, 2, 2, 2, 1, 1, 3, 1,\n",
            "       8, 7, 1, 3, 3, 3, 6, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.005000000000000009, 'isoG': 6, 'SC': 0.19841269841269843, 'CHZ': 37.423280423280296, 'DAVIES': 0.19428571428570823, 'grupos': array([0, 0, 0, 0, 9, 0, 0, 9, 3, 0, 0, 7, 3, 4, 3, 6, 5, 2, 8, 1, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 29.64065151515151, 'isoG': 0, 'SC': 0.5463920066524701, 'CHZ': 898.3527369676749, 'DAVIES': 0.49347955731915016, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4,\n",
            "       4, 5, 5, 5, 5, 9, 9, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.8952380952380942, 'isoG': 0, 'SC': 0.5976904477013982, 'CHZ': 574.7579925557072, 'DAVIES': 0.4277830310796089, 'grupos': array([2, 2, 2, 4, 8, 0, 0, 0, 8, 8, 8, 8, 0, 4, 2, 8, 0, 0, 0, 0, 4, 2,\n",
            "       2, 2, 9, 9, 9, 5, 5, 7, 7, 1, 1, 7, 7, 1, 3, 1, 3, 1, 1, 6, 3, 6,\n",
            "       6, 6, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 23.83234523809525, 'isoG': 0, 'SC': 0.445237764995962, 'CHZ': 76.02155401185438, 'DAVIES': 0.5504658393756974, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 3, 3, 3, 3,\n",
            "       4, 4, 4, 9, 9, 9, 0, 0, 8, 3, 3, 3, 4, 9, 9, 3, 9, 9, 0, 8, 8, 8,\n",
            "       8, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.439666666666667, 'isoG': 6, 'SC': -0.1877653424786144, 'CHZ': 58.46560417792181, 'DAVIES': 1.1524819624821188, 'grupos': array([1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 5, 5, 5, 5, 8, 4, 2, 7, 6, 9, 3,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.10199999999999998, 'isoG': 4, 'SC': -0.24583333333332824, 'CHZ': 14.242919389978216, 'DAVIES': 0.8915789473686244, 'grupos': array([2, 2, 3, 1, 1, 9, 0, 8, 6, 3, 0, 4, 4, 7, 3, 3, 1, 5, 5, 3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.9326666666666645, 'isoG': 0, 'SC': 0.11921678252827536, 'CHZ': 85.88151424764465, 'DAVIES': 3.4247150274107527, 'grupos': array([5, 5, 5, 6, 6, 2, 2, 2, 3, 3, 3, 1, 8, 1, 8, 0, 0, 0, 1, 8, 1, 1,\n",
            "       0, 7, 0, 4, 4, 7, 4, 4, 4, 9, 9, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.74461507936508, 'isoG': 0, 'SC': 0.4909090157877214, 'CHZ': 919.9801411726776, 'DAVIES': 0.6016885220831628, 'grupos': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 6, 6, 6, 6, 6, 6, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4, 2, 2, 2,\n",
            "       2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5,\n",
            "       5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.1733214285714286, 'isoG': 0, 'SC': 0.5704139503622577, 'CHZ': 505.78652096301124, 'DAVIES': 0.47992017608164605, 'grupos': array([5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 1, 1, 1, 9, 3, 2, 2,\n",
            "       8, 8, 8, 8, 1, 1, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,\n",
            "       7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 5.122, 'isoG': 0, 'SC': 0.5500477351429377, 'CHZ': 842.7409881432725, 'DAVIES': 0.5031375883371486, 'grupos': array([7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 0, 0, 0, 4,\n",
            "       4, 4, 4, 4, 9, 9, 9, 9, 8, 8, 8, 3, 3, 3, 3, 4, 4, 4, 4, 4, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.8497222222222236, 'isoG': 2, 'SC': 0.5304143638768255, 'CHZ': 240.91088583466012, 'DAVIES': 0.4608137935035802, 'grupos': array([0, 0, 0, 0, 7, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 8, 9, 9, 4, 5, 4, 4,\n",
            "       9, 4, 4, 4, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.8528333333333331, 'isoG': 3, 'SC': -0.02980527536979507, 'CHZ': 507.2081696894813, 'DAVIES': 9.410434782489709, 'grupos': array([2, 2, 2, 2, 2, 5, 0, 7, 0, 0, 5, 5, 5, 0, 0, 4, 4, 4, 4, 3, 3, 8,\n",
            "       1, 6, 9, 3, 1, 1, 1, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.9546547619047614, 'isoG': 0, 'SC': 0.6188088826064128, 'CHZ': 3351.0965206534297, 'DAVIES': 0.48113632240285575, 'grupos': array([4, 4, 4, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4,\n",
            "       4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9,\n",
            "       9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 2, 8, 8, 8, 8, 8, 8, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 7, 7, 7], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.032000000000000056, 'isoG': 9, 'SC': -0.2857142857142865, 'CHZ': 4.19841269841269, 'DAVIES': 0.5416386554622286, 'grupos': array([3, 5, 6, 0, 7, 8, 2, 1, 2, 4, 2, 2, 2, 9], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 11.278750000000004, 'isoG': 1, 'SC': -0.005144717894003718, 'CHZ': 79.96528942165722, 'DAVIES': 3.0292044022392144, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 4, 2, 5, 5, 2, 0, 9, 9, 8, 7, 6, 0,\n",
            "       0, 1, 8, 6, 6, 8, 1, 8, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.867857142857143, 'isoG': 2, 'SC': 0.4160400547365006, 'CHZ': 109.87012428298281, 'DAVIES': 0.24382659827910244, 'grupos': array([1, 7, 7, 7, 7, 7, 1, 7, 0, 0, 0, 7, 0, 0, 0, 0, 9, 8, 4, 5, 8, 9,\n",
            "       5, 4, 4, 4, 4, 4, 6, 2, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.6515833333333327, 'isoG': 3, 'SC': 0.39438565198365655, 'CHZ': 71.06502738673889, 'DAVIES': 0.61435092189767, 'grupos': array([0, 7, 7, 0, 3, 3, 0, 0, 0, 0, 0, 2, 2, 0, 8, 7, 6, 9, 1, 5, 1, 1,\n",
            "       1, 5, 5, 1, 5, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.4725714285714284, 'isoG': 0, 'SC': 0.45686946400833056, 'CHZ': 310.383668842448, 'DAVIES': 0.6424930282097157, 'grupos': array([4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 0, 0, 9, 1, 3, 1, 3,\n",
            "       3, 3, 3, 3, 3, 9, 9, 1, 1, 9, 0, 1, 6, 6, 6, 6, 6, 7, 7, 7, 2, 7,\n",
            "       7, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.9650000000000003, 'isoG': 6, 'SC': 0.07141566036303243, 'CHZ': 22.937324226597017, 'DAVIES': 2.891627268817397, 'grupos': array([2, 2, 2, 2, 2, 2, 7, 0, 9, 7, 8, 9, 5, 3, 6, 4, 1, 1, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 6.490999999999994, 'isoG': 4, 'SC': 0.08401806464993315, 'CHZ': 68.57565429309214, 'DAVIES': 2.4071836297389524, 'grupos': array([0, 0, 0, 0, 0, 6, 9, 1, 1, 5, 1, 1, 5, 5, 3, 5, 2, 7, 2, 8, 2, 2,\n",
            "       3, 2, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 6.481714285714286, 'isoG': 0, 'SC': 0.5982222823872326, 'CHZ': 479.97729213237506, 'DAVIES': 0.4356775036183421, 'grupos': array([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6,\n",
            "       0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 4, 4, 4, 4, 4, 4, 3, 3, 3, 8, 8, 8,\n",
            "       8, 8, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.857226190476191, 'isoG': 0, 'SC': 0.5297588749745489, 'CHZ': 273.5230597631882, 'DAVIES': 0.4813078992570521, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 4, 4, 4, 4, 9, 9, 9, 9, 9, 3,\n",
            "       3, 3, 3, 3, 3, 3, 7, 7, 7, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 1,\n",
            "       1, 1, 1, 1, 1, 1, 6, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.6191666666666672, 'isoG': 1, 'SC': 0.025586898167524248, 'CHZ': 272.0673960549354, 'DAVIES': 2.6276232247274036, 'grupos': array([4, 4, 4, 4, 6, 3, 4, 6, 3, 2, 6, 2, 2, 2, 2, 9, 5, 5, 5, 1, 7, 5,\n",
            "       0, 1, 1, 7, 0, 8, 8, 8, 8], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.7560793650793636, 'isoG': 0, 'SC': 0.5611881865776597, 'CHZ': 2780.194870025723, 'DAVIES': 0.49652126582862516, 'grupos': array([3, 3, 3, 3, 3, 6, 6, 6, 6, 3, 3, 3, 3, 3, 7, 4, 4, 4, 4, 4, 4, 7,\n",
            "       7, 7, 7, 4, 7, 7, 5, 5, 5, 5, 5, 7, 5, 7, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 2,\n",
            "       2, 2, 2, 2, 2, 2], dtype=int32)}\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.943499999999999, 'isoG': 0, 'SC': 0.3499854138412769, 'CHZ': 799.2333586901136, 'DAVIES': 2.6995838390809013, 'grupos': array([5, 8, 5, 5, 5, 4, 4, 4, 4, 8, 5, 4, 8, 8, 8, 2, 2, 2, 7, 7, 7, 6,\n",
            "       6, 6, 6, 6, 1, 1, 1, 1, 9, 1, 1, 9, 9, 9, 0, 0, 0, 0, 3, 3, 3, 3,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 4.230535714285714, 'isoG': 0, 'SC': 0.3992995347098511, 'CHZ': 308.85656840888703, 'DAVIES': 2.07664700553434, 'grupos': array([3, 3, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 7, 9, 7, 9, 7, 9, 4, 4, 2, 2, 4, 4, 2, 2, 2, 6, 6,\n",
            "       6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 4.933470695970693, 'isoG': 0, 'SC': 0.5710143613495061, 'CHZ': 1062.1116424816084, 'DAVIES': 0.4813132226646024, 'grupos': array([7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 5, 5, 5, 5, 5, 3,\n",
            "       3, 3, 3, 3, 3, 9, 3, 9, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1,\n",
            "       1, 1, 9, 9, 1, 1, 1, 1, 1, 8, 8, 8, 9, 8, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       6, 6, 6, 6, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 5.839261904761907, 'isoG': 0, 'SC': 0.4752273002847937, 'CHZ': 262.21357341586156, 'DAVIES': 0.5215779761459374, 'grupos': array([8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7,\n",
            "       2, 2, 1, 9, 9, 1, 1, 7, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4,\n",
            "       4, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 5.245309523809527, 'isoG': 0, 'SC': 0.3516503419019426, 'CHZ': 280.9665089820965, 'DAVIES': 0.7069358913235887, 'grupos': array([4, 4, 4, 4, 0, 0, 0, 0, 0, 7, 6, 6, 7, 6, 6, 3, 3, 3, 3, 3, 8, 8,\n",
            "       1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 9, 9, 9, 9, 2, 2, 2, 2, 2, 2, 2, 2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.2541428571428552, 'isoG': 0, 'SC': 0.674112057910154, 'CHZ': 674.4597459389182, 'DAVIES': 0.5457545896743261, 'grupos': array([7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 9, 9, 9, 9, 9, 9,\n",
            "       9, 4, 4, 4, 4, 5, 5, 5, 5, 5, 8, 8, 5, 8, 2, 2, 4, 4, 4, 4, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.0840357142857133, 'isoG': 0, 'SC': 0.5229215810429859, 'CHZ': 873.1119182555814, 'DAVIES': 0.5670270605399649, 'grupos': array([0, 3, 3, 3, 8, 3, 0, 0, 3, 8, 3, 3, 3, 8, 0, 0, 0, 0, 0, 3, 3, 8,\n",
            "       3, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 2, 2, 2, 2,\n",
            "       2, 2, 2, 5, 5, 5, 5, 5, 4, 4, 4, 4, 2, 5, 5, 4, 7, 7, 7, 7, 7, 7,\n",
            "       7, 7], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.2939999999999998, 'isoG': 5, 'SC': -0.018055555555551505, 'CHZ': 403.5568783068786, 'DAVIES': 1.4826007326004287, 'grupos': array([0, 0, 8, 0, 0, 6, 0, 7, 2, 1, 1, 1, 1, 1, 4, 9, 4, 4, 9, 5, 9, 9,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.9668214285714283, 'isoG': 0, 'SC': 0.4772808188932346, 'CHZ': 1087.9196850826268, 'DAVIES': 0.7177486104214148, 'grupos': array([6, 6, 6, 6, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 5, 1, 9, 5, 9, 5, 5, 8, 8, 8, 8, 5, 0, 0, 0, 0, 4, 4, 4, 4,\n",
            "       3, 4, 4, 3, 3, 3, 3, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.8303214285714279, 'isoG': 1, 'SC': 0.6287250736058865, 'CHZ': 809.4852885205064, 'DAVIES': 0.3791969793771642, 'grupos': array([5, 5, 5, 5, 5, 9, 8, 8, 2, 2, 7, 1, 1, 1, 1, 1, 1, 7, 1, 1, 7, 7,\n",
            "       7, 7, 6, 2, 2, 2, 2, 2, 2, 6, 3, 3, 3, 0, 0, 0, 0, 0, 0, 4, 0, 4,\n",
            "       4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 29.99333333333335, 'isoG': 5, 'SC': -0.061653200701735196, 'CHZ': 31.632133740157737, 'DAVIES': 4.509460499727576, 'grupos': array([0, 0, 0, 0, 0, 7, 6, 9, 4, 9, 1, 3, 8, 5, 2, 3, 3, 1, 2, 2, 2, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.1211111111111105, 'isoG': 5, 'SC': 0.22703335585393628, 'CHZ': 911.3212435663979, 'DAVIES': 2.0332458442661188, 'grupos': array([7, 7, 7, 7, 7, 2, 2, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 4, 7, 6, 3,\n",
            "       5, 2, 7, 7, 1, 1, 1, 1, 9, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.0635555555555554, 'isoG': 4, 'SC': 0.1991319444444602, 'CHZ': 3197.3512286324876, 'DAVIES': 0.8873302708768958, 'grupos': array([7, 6, 1, 1, 3, 7, 8, 7, 7, 3, 5, 3, 1, 7, 4, 4, 4, 4, 0, 0, 9, 0,\n",
            "       2, 2, 0, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.005000000000000009, 'isoG': 6, 'SC': 0.19841269841269843, 'CHZ': 37.423280423280296, 'DAVIES': 0.19428571428570823, 'grupos': array([8, 2, 2, 2, 8, 2, 2, 2, 1, 2, 2, 4, 1, 6, 1, 5, 9, 3, 7, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 33.84097222222221, 'isoG': 0, 'SC': 0.5265578546542429, 'CHZ': 785.7740451445568, 'DAVIES': 0.4926371755841208, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6,\n",
            "       6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 9,\n",
            "       9, 3, 3, 3, 3, 7, 7, 3, 3, 3, 3, 3, 3, 7, 7, 7, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.8049047619047613, 'isoG': 0, 'SC': 0.6498990938778736, 'CHZ': 639.7236607599281, 'DAVIES': 0.38084206005148846, 'grupos': array([4, 4, 4, 0, 3, 7, 7, 7, 3, 3, 3, 3, 7, 0, 4, 3, 7, 0, 0, 0, 0, 4,\n",
            "       4, 4, 9, 9, 9, 2, 2, 6, 6, 1, 1, 6, 6, 1, 8, 1, 8, 1, 1, 5, 8, 5,\n",
            "       5, 5, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 23.710321428571422, 'isoG': 0, 'SC': 0.4587638376039812, 'CHZ': 76.44081410110478, 'DAVIES': 0.5505887726449817, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 9, 9, 9, 9, 3, 3, 3, 3, 7,\n",
            "       7, 7, 1, 1, 8, 8, 8, 8, 4, 3, 3, 7, 7, 1, 1, 3, 8, 8, 8, 4, 4, 4,\n",
            "       4, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.8216666666666658, 'isoG': 5, 'SC': -0.24804360767968273, 'CHZ': 103.60930809105261, 'DAVIES': 1.1390756302520746, 'grupos': array([5, 0, 5, 5, 5, 0, 2, 2, 0, 2, 0, 3, 3, 3, 3, 9, 8, 4, 7, 1, 6, 1,\n",
            "       1, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.10199999999999998, 'isoG': 4, 'SC': -0.24583333333332824, 'CHZ': 14.242919389978212, 'DAVIES': 0.8915789473686244, 'grupos': array([2, 2, 1, 3, 3, 9, 8, 7, 8, 1, 6, 4, 4, 1, 1, 0, 3, 5, 5, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.8521666666666645, 'isoG': 0, 'SC': 0.2080815187311753, 'CHZ': 89.73004942101032, 'DAVIES': 2.201441079560542, 'grupos': array([2, 2, 2, 6, 6, 4, 4, 4, 1, 1, 1, 8, 7, 1, 7, 0, 0, 0, 8, 7, 8, 8,\n",
            "       0, 5, 0, 9, 9, 5, 3, 3, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.8331984126984135, 'isoG': 0, 'SC': 0.4889402613775919, 'CHZ': 891.0178436803635, 'DAVIES': 0.584479505755126, 'grupos': array([3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 9, 9, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 4, 4, 4, 4, 4, 4, 4, 6, 6, 2, 6, 2, 6, 6, 6, 6, 6, 2, 2, 2,\n",
            "       2, 2, 2, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0,\n",
            "       0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.179321428571429, 'isoG': 0, 'SC': 0.5271067225167498, 'CHZ': 504.82193804974605, 'DAVIES': 0.5022821196670423, 'grupos': array([7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 1, 1, 1, 1, 3, 3, 2, 0, 0,\n",
            "       9, 9, 9, 9, 1, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,\n",
            "       5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 5.587888888888892, 'isoG': 0, 'SC': 0.5353832693711721, 'CHZ': 772.0515237823802, 'DAVIES': 0.4896983758740615, 'grupos': array([1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 2, 2, 2, 2, 2, 2, 6, 6, 6, 0,\n",
            "       0, 0, 0, 7, 7, 7, 3, 3, 3, 3, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 4, 4,\n",
            "       4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.0083888888888874, 'isoG': 2, 'SC': 0.4526923418901136, 'CHZ': 227.99980096807485, 'DAVIES': 0.5614946571533894, 'grupos': array([4, 4, 4, 4, 8, 5, 5, 5, 3, 3, 3, 3, 5, 6, 9, 9, 9, 9, 2, 5, 2, 2,\n",
            "       9, 2, 2, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.8528333333333333, 'isoG': 3, 'SC': -0.02980527536979507, 'CHZ': 507.2081696894812, 'DAVIES': 9.410434782489707, 'grupos': array([5, 5, 5, 5, 5, 4, 1, 9, 1, 1, 4, 4, 4, 1, 1, 0, 0, 0, 0, 7, 7, 8,\n",
            "       2, 3, 6, 7, 2, 2, 2, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.9822103174603173, 'isoG': 0, 'SC': 0.6218199895232627, 'CHZ': 3256.8769845969814, 'DAVIES': 0.492401279667756, 'grupos': array([4, 4, 4, 8, 8, 8, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4,\n",
            "       4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3,\n",
            "       3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 2, 6, 6, 6, 6, 6, 6, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 7, 7, 7], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.032000000000000056, 'isoG': 9, 'SC': -0.2857142857142865, 'CHZ': 4.19841269841269, 'DAVIES': 0.5416386554622286, 'grupos': array([3, 6, 2, 4, 7, 8, 5, 1, 1, 0, 1, 1, 1, 9], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 14.463333333333336, 'isoG': 2, 'SC': -0.08333467431187375, 'CHZ': 61.8445135021944, 'DAVIES': 2.2971483871267258, 'grupos': array([2, 2, 2, 0, 0, 0, 2, 2, 2, 0, 3, 9, 8, 8, 9, 8, 1, 1, 7, 7, 5, 6,\n",
            "       6, 6, 4, 6, 6, 4, 6, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 4.73357142857143, 'isoG': 2, 'SC': 0.39556381799397466, 'CHZ': 41.87464371342823, 'DAVIES': 0.9782609197425242, 'grupos': array([7, 1, 1, 1, 1, 1, 7, 1, 2, 2, 2, 2, 9, 2, 2, 2, 5, 5, 5, 3, 5, 6,\n",
            "       3, 9, 6, 5, 5, 5, 8, 0, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.6899166666666656, 'isoG': 2, 'SC': 0.36660787420587115, 'CHZ': 69.40261134945297, 'DAVIES': 0.7078259145148285, 'grupos': array([3, 9, 9, 3, 5, 5, 3, 3, 3, 3, 3, 1, 1, 3, 7, 2, 2, 8, 0, 6, 0, 0,\n",
            "       0, 6, 6, 0, 6, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.1636428571428565, 'isoG': 0, 'SC': 0.4493475015350555, 'CHZ': 341.1265193079106, 'DAVIES': 0.6692516874136711, 'grupos': array([3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 8, 8, 1, 9, 6, 9, 6,\n",
            "       6, 6, 6, 6, 6, 1, 1, 9, 9, 1, 8, 9, 2, 2, 2, 2, 2, 0, 0, 0, 5, 0,\n",
            "       0, 5, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.9650000000000003, 'isoG': 6, 'SC': 0.07141566036303243, 'CHZ': 22.937324226597017, 'DAVIES': 2.891627268817397, 'grupos': array([2, 2, 2, 2, 2, 2, 8, 0, 5, 8, 7, 0, 3, 9, 4, 6, 1, 1, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 8.092999999999995, 'isoG': 3, 'SC': 0.01951853066567813, 'CHZ': 54.62727937927357, 'DAVIES': 3.6644815358288483, 'grupos': array([2, 2, 2, 2, 2, 7, 1, 5, 5, 1, 5, 5, 1, 1, 6, 3, 4, 9, 3, 8, 4, 4,\n",
            "       6, 4, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 7.067857142857136, 'isoG': 0, 'SC': 0.5541564898622747, 'CHZ': 439.59188880505553, 'DAVIES': 0.49026242203254544, 'grupos': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7,\n",
            "       9, 9, 9, 7, 7, 7, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 6, 6, 6,\n",
            "       6, 6, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.8077023809523816, 'isoG': 0, 'SC': 0.49616046750427817, 'CHZ': 277.14414642772675, 'DAVIES': 0.5052912903580892, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9,\n",
            "       1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 0, 0, 0, 8, 8, 8, 8, 8, 3,\n",
            "       3, 3, 3, 3, 3, 3, 6, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.6071666666666673, 'isoG': 1, 'SC': 0.039411782960168694, 'CHZ': 277.49063308923564, 'DAVIES': 2.839360066832834, 'grupos': array([4, 4, 4, 4, 1, 5, 4, 1, 5, 6, 1, 8, 6, 6, 6, 6, 0, 0, 0, 9, 2, 0,\n",
            "       7, 9, 9, 2, 7, 3, 3, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.7560793650793642, 'isoG': 0, 'SC': 0.5611881865776597, 'CHZ': 2780.194870025723, 'DAVIES': 0.49652126582862516, 'grupos': array([4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 6, 6, 6, 6, 6, 6, 1,\n",
            "       1, 1, 1, 6, 1, 1, 7, 7, 7, 7, 7, 1, 7, 1, 2, 2, 2, 2, 2, 2, 2, 2,\n",
            "       2, 2, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 5,\n",
            "       5, 5, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.047761904761903, 'isoG': 0, 'SC': 0.42761242792380694, 'CHZ': 1150.5860804453491, 'DAVIES': 2.599256167780289, 'grupos': array([3, 6, 3, 3, 3, 2, 2, 2, 2, 6, 3, 2, 6, 6, 6, 4, 4, 4, 8, 8, 8, 0,\n",
            "       0, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 9,\n",
            "       9, 9], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.6825833333333335, 'isoG': 0, 'SC': 0.3555273751930904, 'CHZ': 228.88519848279026, 'DAVIES': 2.142173577920547, 'grupos': array([5, 5, 4, 4, 4, 4, 1, 1, 1, 1, 4, 1, 1, 6, 6, 6, 6, 6, 6, 0, 0, 0,\n",
            "       0, 0, 0, 0, 0, 7, 8, 7, 8, 7, 8, 3, 3, 9, 9, 3, 3, 9, 9, 9, 2, 2,\n",
            "       2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.59411904761905, 'isoG': 0, 'SC': 0.5519377108602826, 'CHZ': 935.8528270504005, 'DAVIES': 0.5071284056322753, 'grupos': array([3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 1,\n",
            "       1, 1, 1, 1, 1, 8, 1, 8, 9, 9, 2, 2, 2, 2, 2, 2, 2, 2, 5, 9, 9, 9,\n",
            "       9, 9, 8, 8, 9, 9, 9, 5, 5, 5, 5, 5, 8, 5, 6, 6, 6, 6, 6, 6, 6, 6,\n",
            "       4, 4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.839261904761907, 'isoG': 0, 'SC': 0.4752273002847937, 'CHZ': 262.2135734158616, 'DAVIES': 0.5215779761459374, 'grupos': array([3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7,\n",
            "       4, 4, 1, 9, 9, 1, 1, 7, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6,\n",
            "       6, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.168595238095242, 'isoG': 1, 'SC': 0.36953123338237875, 'CHZ': 285.1927936036907, 'DAVIES': 0.6904346433770825, 'grupos': array([5, 5, 5, 5, 9, 9, 2, 9, 9, 2, 3, 3, 2, 3, 3, 1, 1, 1, 1, 1, 1, 1,\n",
            "       8, 4, 4, 4, 4, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.2541428571428557, 'isoG': 0, 'SC': 0.674112057910154, 'CHZ': 674.4597459389183, 'DAVIES': 0.5457545896743262, 'grupos': array([5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7,\n",
            "       7, 8, 8, 8, 8, 6, 6, 6, 6, 6, 0, 0, 6, 0, 2, 2, 8, 8, 8, 8, 2, 2,\n",
            "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.084035714285715, 'isoG': 0, 'SC': 0.5229215810429859, 'CHZ': 873.1119182555815, 'DAVIES': 0.5670270605399649, 'grupos': array([4, 3, 3, 3, 6, 3, 4, 4, 3, 6, 3, 3, 3, 6, 4, 4, 4, 4, 4, 3, 3, 6,\n",
            "       3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 2, 2, 2, 2,\n",
            "       2, 2, 2, 8, 8, 8, 8, 8, 7, 7, 7, 7, 2, 8, 8, 7, 5, 5, 5, 5, 5, 5,\n",
            "       5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.3115000000000002, 'isoG': 5, 'SC': -0.05347476597476137, 'CHZ': 380.7977528089886, 'DAVIES': 0.8497964997965367, 'grupos': array([0, 0, 0, 0, 0, 7, 6, 9, 8, 1, 1, 1, 1, 1, 3, 4, 5, 2, 5, 2, 2, 2,\n",
            "       3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.9668214285714285, 'isoG': 0, 'SC': 0.4772808188932346, 'CHZ': 1087.9196850826265, 'DAVIES': 0.7177486104214148, 'grupos': array([5, 5, 5, 5, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 6, 3, 9, 6, 9, 6, 6, 0, 0, 0, 0, 6, 4, 4, 4, 4, 7, 7, 7, 7,\n",
            "       2, 7, 7, 2, 2, 2, 2, 7], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.8158571428571422, 'isoG': 1, 'SC': 0.6846360891960465, 'CHZ': 823.9094936444254, 'DAVIES': 0.3711764203890667, 'grupos': array([0, 0, 0, 0, 0, 9, 4, 4, 7, 7, 5, 1, 1, 1, 1, 1, 1, 5, 1, 1, 5, 5,\n",
            "       5, 5, 6, 6, 7, 7, 7, 7, 7, 6, 3, 3, 3, 8, 8, 8, 8, 8, 8, 2, 8, 2,\n",
            "       2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 30.619166666666676, 'isoG': 4, 'SC': -0.03329132436361607, 'CHZ': 30.958343745541317, 'DAVIES': 6.453738112950694, 'grupos': array([0, 0, 0, 0, 0, 9, 1, 7, 4, 7, 2, 5, 6, 2, 8, 4, 5, 2, 3, 3, 3, 3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.3549999999999984, 'isoG': 5, 'SC': 0.44163904751252414, 'CHZ': 1428.5886096956224, 'DAVIES': 0.23011454581831825, 'grupos': array([0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 8, 1, 1, 1, 1, 1, 1, 7, 1, 0, 5, 2,\n",
            "       9, 0, 0, 0, 6, 6, 6, 6, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 8.063416666666669, 'isoG': 4, 'SC': 0.2048392273576254, 'CHZ': 22.77622814058465, 'DAVIES': 1.194915270645462, 'grupos': array([3, 8, 0, 0, 6, 3, 8, 3, 3, 8, 5, 7, 0, 3, 4, 4, 4, 4, 1, 1, 2, 1,\n",
            "       9, 2, 1, 2, 8, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.005000000000000009, 'isoG': 7, 'SC': 0.19841269841269843, 'CHZ': 37.423280423280296, 'DAVIES': 0.19428571428570823, 'grupos': array([1, 1, 1, 9, 1, 1, 1, 1, 2, 1, 1, 4, 2, 8, 2, 3, 6, 5, 7, 0, 0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 30.974123737373706, 'isoG': 0, 'SC': 0.5451269924633907, 'CHZ': 859.3044917285825, 'DAVIES': 0.49446320069595595, 'grupos': array([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8,\n",
            "       8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9,\n",
            "       9, 3, 3, 3, 3, 7, 7, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 5, 5, 5, 5, 5,\n",
            "       5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.8188333333333329, 'isoG': 0, 'SC': 0.6429001377588712, 'CHZ': 628.7718611162842, 'DAVIES': 0.38015314323353533, 'grupos': array([5, 5, 5, 3, 0, 8, 8, 8, 0, 0, 0, 0, 8, 3, 5, 0, 8, 3, 3, 3, 3, 5,\n",
            "       5, 6, 6, 6, 6, 4, 4, 7, 7, 1, 1, 7, 7, 1, 9, 1, 9, 1, 1, 2, 9, 2,\n",
            "       2, 2, 1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 21.229047619047623, 'isoG': 0, 'SC': 0.41966295525638153, 'CHZ': 86.01165077080331, 'DAVIES': 0.575257258533887, 'grupos': array([3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 2, 2, 2, 9,\n",
            "       9, 9, 9, 6, 6, 6, 5, 5, 8, 2, 2, 9, 9, 6, 6, 2, 6, 6, 5, 8, 8, 8,\n",
            "       8, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.1669999999999998, 'isoG': 6, 'SC': -0.08473453755831506, 'CHZ': 72.48939985401, 'DAVIES': 0.7105361305362601, 'grupos': array([0, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 1, 7, 1, 1, 9, 1, 3, 8, 5, 6, 4,\n",
            "       4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.09666666666666669, 'isoG': 3, 'SC': 0.02499999999999668, 'CHZ': 15.090038314176255, 'DAVIES': 0.9515151515154298, 'grupos': array([2, 2, 8, 3, 3, 2, 8, 7, 9, 1, 5, 0, 0, 1, 6, 6, 3, 4, 4, 6],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.8521666666666647, 'isoG': 0, 'SC': 0.2080815187311753, 'CHZ': 89.73004942101032, 'DAVIES': 2.2014410795605417, 'grupos': array([0, 0, 0, 4, 4, 9, 9, 9, 1, 1, 1, 7, 2, 1, 2, 3, 3, 3, 7, 2, 7, 7,\n",
            "       3, 6, 3, 8, 8, 6, 5, 5, 5, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.5376428571428558, 'isoG': 0, 'SC': 0.484411683962831, 'CHZ': 995.5310240533199, 'DAVIES': 0.5560960556697785, 'grupos': array([6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3,\n",
            "       3, 3, 3, 5, 5, 5, 5, 5, 5, 7, 7, 2, 7, 2, 7, 7, 7, 7, 7, 2, 2, 2,\n",
            "       2, 2, 2, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n",
            "       1], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.173321428571429, 'isoG': 0, 'SC': 0.5704139503622577, 'CHZ': 505.78652096301136, 'DAVIES': 0.47992017608164605, 'grupos': array([6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 1, 1, 1, 9, 3, 2, 2,\n",
            "       7, 7, 7, 7, 1, 1, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,\n",
            "       5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.122, 'isoG': 0, 'SC': 0.5500477351429377, 'CHZ': 842.7409881432725, 'DAVIES': 0.5031375883371486, 'grupos': array([2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 5, 5, 5, 0,\n",
            "       0, 0, 0, 0, 9, 9, 9, 9, 4, 4, 4, 8, 8, 8, 8, 0, 0, 0, 0, 0, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.9038888888888876, 'isoG': 2, 'SC': 0.46583894220337346, 'CHZ': 236.34459962162273, 'DAVIES': 0.6042479316789139, 'grupos': array([5, 5, 5, 5, 4, 8, 7, 7, 3, 3, 3, 3, 7, 3, 9, 9, 9, 9, 2, 7, 2, 2,\n",
            "       9, 2, 2, 2, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n",
            "       0], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.8728333333333331, 'isoG': 3, 'SC': -0.028289900064098608, 'CHZ': 495.5325958184219, 'DAVIES': 10.19043478274959, 'grupos': array([1, 1, 1, 1, 1, 6, 2, 2, 8, 2, 6, 6, 6, 2, 2, 3, 3, 3, 3, 5, 5, 9,\n",
            "       4, 0, 7, 5, 4, 4, 4, 7, 7], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.9822103174603176, 'isoG': 0, 'SC': 0.6218199895232627, 'CHZ': 3256.876984596981, 'DAVIES': 0.49240127966775604, 'grupos': array([7, 7, 7, 6, 6, 6, 6, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,\n",
            "       7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,\n",
            "       3, 3, 3, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 1, 4, 4, 4, 4, 4, 4, 1, 1,\n",
            "       1, 1, 1, 1, 1, 1, 1, 8, 8, 8], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.032000000000000056, 'isoG': 9, 'SC': -0.2857142857142865, 'CHZ': 4.19841269841269, 'DAVIES': 0.5416386554622286, 'grupos': array([0, 2, 7, 6, 8, 1, 9, 4, 4, 5, 4, 4, 4, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 11.11491666666667, 'isoG': 2, 'SC': 0.024226330789433276, 'CHZ': 81.17836713506271, 'DAVIES': 2.178543741578524, 'grupos': array([2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 6, 5, 0, 0, 5, 1, 4, 4, 8, 1, 9, 1,\n",
            "       1, 7, 3, 7, 7, 3, 1, 3, 3], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.6387500000000002, 'isoG': 3, 'SC': 0.472867442096924, 'CHZ': 125.57237901517078, 'DAVIES': 0.2322194517659701, 'grupos': array([1, 2, 2, 2, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 9, 3, 9, 9,\n",
            "       3, 4, 8, 9, 9, 9, 6, 7, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.704738095238094, 'isoG': 2, 'SC': 0.3060015360995305, 'CHZ': 68.77988674578017, 'DAVIES': 0.8141270208163018, 'grupos': array([1, 2, 2, 1, 0, 0, 1, 1, 1, 0, 1, 3, 3, 1, 7, 6, 6, 9, 8, 4, 8, 8,\n",
            "       8, 4, 4, 8, 4, 5, 5, 5], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.38397619047619, 'isoG': 0, 'SC': 0.4092591116513051, 'CHZ': 318.6261238970155, 'DAVIES': 0.8708345859483391, 'grupos': array([9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 8, 5, 7, 5, 6, 5, 6,\n",
            "       6, 6, 6, 6, 6, 7, 7, 5, 5, 7, 8, 5, 0, 0, 0, 0, 0, 3, 3, 3, 2, 3,\n",
            "       3, 2, 2, 2, 2, 2], dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.9650000000000003, 'isoG': 6, 'SC': 0.07141566036303243, 'CHZ': 22.937324226597013, 'DAVIES': 2.8916272688173974, 'grupos': array([0, 0, 0, 0, 0, 0, 7, 8, 3, 7, 9, 3, 6, 4, 2, 5, 1, 1, 1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 10 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 10, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 7.211666666666662, 'isoG': 3, 'SC': 0.05928782098928056, 'CHZ': 61.53408542970212, 'DAVIES': 1.7157412740669984, 'grupos': array([1, 1, 1, 1, 1, 5, 3, 3, 3, 0, 3, 3, 0, 0, 2, 4, 7, 8, 4, 9, 7, 7,\n",
            "       2, 7, 6, 6, 6], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.8087857142857136, 'isoG': 1, 'SC': 0.43910950734475995, 'CHZ': 660.9494186663087, 'DAVIES': 0.7359831509170246, 'grupos': array([ 6,  6,  6,  9,  9,  9,  9,  9,  9,  9, 12, 12, 12, 12, 12, 12,  1,\n",
            "        1,  1,  1,  1, 14, 14,  3,  3,  1,  1, 14, 13,  3, 13, 13, 13, 13,\n",
            "        5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 10, 10, 10, 10,  2,  2,  2,\n",
            "        2,  2, 11,  0,  0,  0,  0,  8,  8,  7,  7,  7,  4,  4,  4,  4,  4,\n",
            "        8,  7,  8,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.93, 'isoG': 1, 'SC': 0.10720540358382873, 'CHZ': 152.91723211761385, 'DAVIES': 5.174232695062175, 'grupos': array([10, 10, 10, 10, 10,  1, 10,  1,  1,  8,  8,  3,  5,  5,  3,  3, 14,\n",
            "       14,  4,  4,  4,  4, 14,  4,  4,  4, 14,  4, 14,  2, 12, 11,  2,  2,\n",
            "       13, 11, 11, 13,  6,  6,  6,  9,  9,  0,  0,  9,  9,  0,  0,  0,  7,\n",
            "        7,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.4971666666666667, 'isoG': 7, 'SC': 0.01486912132069765, 'CHZ': 166.23807721481646, 'DAVIES': 3.2267227640695912, 'grupos': array([ 1,  1,  1,  1,  7, 14,  1, 13,  7,  4,  9,  8,  5,  5,  4,  7,  2,\n",
            "        2,  2,  2, 12,  0, 11, 10,  6, 12, 11,  3,  3,  3,  3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.557960317460317, 'isoG': 0, 'SC': 0.4168311863145165, 'CHZ': 1126.7603314494218, 'DAVIES': 3.8294884180784545, 'grupos': array([ 9,  5,  5,  5,  5,  4,  4,  4,  4,  5,  5,  9,  9,  9,  1,  2,  2,\n",
            "        2,  2,  2,  2,  1,  1,  1,  1,  2,  1,  1,  6,  6,  6,  6,  6,  1,\n",
            "        6,  1, 10, 10, 10, 10, 10, 10,  3,  3,  3, 11, 14, 14, 11, 13, 13,\n",
            "       11, 11, 11,  7,  7,  7,  7,  7, 12, 12,  0, 12, 12,  7,  0,  0,  0,\n",
            "        8,  8,  8,  8], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.957416666666664, 'isoG': 3, 'SC': 0.12201604614356518, 'CHZ': 440.34038392440436, 'DAVIES': 1.306110213413183, 'grupos': array([ 8, 12,  8,  8,  8,  7,  7,  8,  7,  2, 11,  7,  2,  2, 10, 11,  5,\n",
            "        5,  0,  0, 13, 14, 14,  3,  3,  3,  6,  6,  6,  6,  4,  6,  6,  4,\n",
            "        4,  9,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 5.498333333333334, 'isoG': 1, 'SC': 0.16646394070175843, 'CHZ': 131.5976196157812, 'DAVIES': 3.54588494838453, 'grupos': array([10, 10,  8,  8, 12, 11, 14,  3,  3, 12, 12, 11,  3,  3, 11,  1,  1,\n",
            "        1,  1,  7,  7,  7,  4,  4,  4,  7,  7,  4,  6,  2,  9,  2,  6,  9,\n",
            "        2, 13, 13, 13, 13,  0,  0,  0,  5,  5,  5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.0056388888888903, 'isoG': 1, 'SC': 0.528770970408415, 'CHZ': 1552.269921538081, 'DAVIES': 0.4406120953785943, 'grupos': array([11, 11, 11, 11,  6,  6,  6,  6,  6,  6, 11, 11,  4,  4,  4,  4, 12,\n",
            "       13, 13,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8, 10,  5,  5,  3,  3,\n",
            "        3,  3,  3,  3,  3,  3,  5,  5,  5, 14, 14, 14, 10, 10, 14,  5,  5,\n",
            "        5,  5,  1,  1,  1, 10,  1,  7,  7,  7,  7,  7,  9,  9,  9,  2,  2,\n",
            "        2,  9,  2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.0395, 'isoG': 0, 'SC': 0.3857643168854761, 'CHZ': 294.4133786102037, 'DAVIES': 1.1743689854958912, 'grupos': array([ 1,  1,  1,  1,  8,  8,  8,  8, 13, 13, 13, 13,  5,  5,  5,  5, 14,\n",
            "       14, 14,  3,  3,  6,  6, 12,  7,  0,  0,  7,  7,  6,  6, 12, 12, 12,\n",
            "        7,  7,  7,  7,  7,  7,  7, 11, 11,  2, 11,  2,  2,  2,  9, 10,  9,\n",
            "       10, 10,  9,  9,  4,  4,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 6.4147380952380955, 'isoG': 3, 'SC': -0.041564376487803756, 'CHZ': 125.59619222470212, 'DAVIES': 12.073728500272697, 'grupos': array([12, 12, 12,  0,  7,  0,  0,  7,  6, 11,  7,  6,  5,  6, 14, 14,  5,\n",
            "        5,  5, 14,  4,  4, 13,  2,  1,  1,  1,  2,  2,  1,  1,  2,  9,  8,\n",
            "       10, 10,  8, 10, 10, 10,  3,  3, 10, 10], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 4.47422222222222, 'isoG': 1, 'SC': 0.32530732588141903, 'CHZ': 291.2497665280955, 'DAVIES': 1.4625988464478306, 'grupos': array([ 2,  2,  2,  2,  2,  2, 12, 12, 12, 12, 12,  1,  1,  1,  1,  1,  6,\n",
            "        6,  6,  6, 14, 14, 14,  5,  5,  5,  5,  7,  7,  7,  7,  7,  7,  7,\n",
            "        7,  7, 11,  3,  5,  5,  5,  5,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n",
            "       13,  8, 13,  9, 10,  3, 10, 11,  0,  0,  0,  9, 10,  0,  0,  0,  0,\n",
            "        0,  0,  0,  0,  0,  4,  4,  4,  4,  0,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.8895595238095237, 'isoG': 2, 'SC': 0.45564797922284783, 'CHZ': 839.5196167553042, 'DAVIES': 0.6504661754106352, 'grupos': array([ 1,  4,  4,  4,  5,  4, 10,  1,  4,  5,  4,  4,  4,  5,  1,  1,  1,\n",
            "        1,  1,  4,  4,  5,  4, 13, 13,  2,  2,  2,  2,  2,  2,  9,  9,  9,\n",
            "        9,  9, 14, 14, 14, 14,  6, 11, 11,  8,  8, 11,  8,  7,  7,  7,  7,\n",
            "        7, 12, 12, 12,  7,  8,  0,  0, 12,  3,  3,  3,  3,  3,  3,  3,  3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 8.892, 'isoG': 13, 'SC': -0.09434001670843706, 'CHZ': 4.8925860323886665, 'DAVIES': 0.6331796836624421, 'grupos': array([ 0,  0, 14,  0,  0, 11,  0, 13, 12,  4,  4,  4,  4,  4,  0, 10,  8,\n",
            "        7,  3,  1,  2,  9,  5,  6], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.0198333333333331, 'isoG': 1, 'SC': 0.1312415429824332, 'CHZ': 583.954015505658, 'DAVIES': 4.137485377194308, 'grupos': array([10, 10, 10, 10,  3,  3,  6,  6,  6,  2,  2,  6,  2,  6,  2,  5,  2,\n",
            "        9,  5,  5,  9,  5,  5,  9, 12,  9,  5,  4, 13,  4, 12,  0,  0, 11,\n",
            "       11,  4,  8,  8,  8,  8, 14, 14, 14,  7,  1, 14, 14,  1,  1,  1,  1,\n",
            "        7], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8279999999999994, 'isoG': 5, 'SC': 0.32122559334701684, 'CHZ': 451.32954495396694, 'DAVIES': 1.0653086419757511, 'grupos': array([ 3,  3,  3,  3,  3, 10,  5,  5,  2,  2, 14,  0,  0,  0,  0,  0,  0,\n",
            "       14,  0,  0, 11, 14, 14, 11, 11, 11,  2, 13,  2,  2,  8,  2,  7,  7,\n",
            "        7, 12, 12,  4,  6,  9,  6,  1, 12,  6,  6,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 19.216666666666672, 'isoG': 10, 'SC': -0.326159360653449, 'CHZ': 18.794662146179924, 'DAVIES': 6.340813836978047, 'grupos': array([ 1,  1,  5,  1,  4, 13,  4,  7,  6, 10,  6,  0, 12,  8,  9,  3,  3,\n",
            "        2, 14,  9,  3, 11], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.562888888888889, 'isoG': 9, 'SC': 0.4248443171125712, 'CHZ': 1868.0284147215928, 'DAVIES': 0.18592705719141336, 'grupos': array([ 1,  1,  1,  1,  1, 12, 12,  1, 12, 14,  4, 12, 11, 12, 14, 12, 12,\n",
            "        8,  3,  1,  2,  5,  0, 10,  1,  1,  9, 13, 13, 13,  6,  6,  6,  7,\n",
            "        7,  6,  6,  6,  6,  6,  6,  6], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 6.1745, 'isoG': 9, 'SC': 0.09831349206350887, 'CHZ': 15.146896654442816, 'DAVIES': 1.1258393108733813, 'grupos': array([ 1,  9,  0,  0,  8,  1, 11,  1,  1,  0,  6,  5,  0, 14,  2,  2,  2,\n",
            "        2,  3,  3,  4,  3,  4,  7,  3, 14, 12,  4, 13,  4,  4, 10],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.005000000000000009, 'isoG': 12, 'SC': 0.19841269841269843, 'CHZ': 13.122448979591793, 'DAVIES': 0.19619047619047014, 'grupos': array([13,  9,  9, 14, 12,  9,  0, 11,  2,  9,  3,  6,  2,  5,  2, 10,  7,\n",
            "        4,  8,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 12.127059523809521, 'isoG': 0, 'SC': 0.5171711263181366, 'CHZ': 1328.5882700706334, 'DAVIES': 0.49151909673181277, 'grupos': array([ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 13, 13, 13, 13, 13,  4,  4,\n",
            "        4,  4,  1,  1,  1,  1,  1,  1, 11, 11, 11, 11, 11, 11,  9,  9,  9,\n",
            "        9,  9,  6,  6,  6,  6,  6, 10, 10, 10, 10,  3,  3,  3, 14, 14, 14,\n",
            "        3,  3,  3,  3,  3, 14, 14,  5,  5,  5,  5,  0,  0,  0,  0,  0,  0,\n",
            "        0,  8,  8,  8,  8, 12, 12, 12, 12, 12,  7,  7,  7,  7,  7,  7,  7,\n",
            "        7,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 7.319404761904761, 'isoG': 2, 'SC': 0.09302972461139564, 'CHZ': 37.078889872293765, 'DAVIES': 1.1394370071099118, 'grupos': array([ 8,  8,  8,  6, 11,  0, 13,  9, 11, 11,  0,  0, 13,  6,  8,  0,  9,\n",
            "       13,  3,  3,  6,  8,  8,  4,  4,  2,  4,  7,  7, 10, 10,  1,  8, 10,\n",
            "       10, 12,  5,  4,  5,  1,  1,  5,  5, 14, 14, 14,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 10.035702380952383, 'isoG': 0, 'SC': 0.31298670465134476, 'CHZ': 108.53484334137649, 'DAVIES': 1.8360838321336521, 'grupos': array([ 8,  8,  5,  5,  5,  5,  5,  5,  2,  2,  5,  2,  2, 10, 10, 10,  7,\n",
            "        7,  7,  7,  6,  7,  6,  9,  9, 14,  0,  0, 11, 11,  4,  7,  7,  7,\n",
            "        9, 12, 12,  6,  0,  0, 14,  4,  4,  4,  4, 13, 13,  1,  1,  1,  1,\n",
            "       13,  1,  3,  3,  3,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.4861666666666671, 'isoG': 12, 'SC': -0.08212331649831979, 'CHZ': 72.81023801361471, 'DAVIES': 1.4877809909392714, 'grupos': array([ 9, 13, 12,  5,  7, 11,  6,  5,  8,  5,  3,  4,  4,  4,  4,  4,  1,\n",
            "       10,  0, 14,  2,  2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.03500000000000011, 'isoG': 10, 'SC': -0.03750000000002109, 'CHZ': 14.025510204081593, 'DAVIES': 0.994444444444163, 'grupos': array([ 5,  5, 10,  3,  3,  0,  4,  1, 14,  9, 13,  2,  2,  8, 11,  7,  0,\n",
            "        6, 12,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.9158333333333317, 'isoG': 3, 'SC': -0.16459934833791665, 'CHZ': 28.512548603322447, 'DAVIES': 5.304883222549366, 'grupos': array([ 5,  5,  5,  0,  8, 13,  4, 13, 14,  9,  9,  8,  4,  1,  2,  1,  2,\n",
            "        2,  6, 10, 10, 10,  1, 12, 11,  3,  3, 12, 11,  3,  3,  7,  7,  7],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.734190476190476, 'isoG': 1, 'SC': 0.3724596950889313, 'CHZ': 856.0622558188088, 'DAVIES': 0.8363514251888245, 'grupos': array([13, 13, 13, 13, 13, 13,  0,  0,  0, 13,  0,  9,  5,  5,  5,  5,  2,\n",
            "        2,  2, 11, 11,  2,  2, 11, 11,  4,  4,  4,  4,  4,  4,  3,  3, 10,\n",
            "        3,  3, 12, 12, 12,  3,  3, 10,  3, 10,  6,  6, 14,  6,  6, 14,  7,\n",
            "        7,  7,  1,  1,  1,  1,  1,  1,  1,  8,  8,  8,  8,  8,  8,  8],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 8.409833333333335, 'isoG': 2, 'SC': 0.14389394169051672, 'CHZ': 107.99712564763837, 'DAVIES': 3.911609108964251, 'grupos': array([ 4,  4,  4,  6,  6,  6,  6,  5,  5,  8,  6,  5,  5, 12, 14,  1,  1,\n",
            "        1,  1,  9,  8,  3, 10,  3, 10, 10,  1,  1,  2,  2,  2,  2,  2,  9,\n",
            "        2,  8,  9,  9,  8,  8,  3,  3,  3,  8,  0,  0,  0,  0, 13, 11, 13,\n",
            "       13,  7,  7, 11,  7,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 7.646666666666667, 'isoG': 0, 'SC': 0.26625475138419297, 'CHZ': 322.4792699010728, 'DAVIES': 1.3158624338624703, 'grupos': array([ 1,  1,  1,  1,  1,  1, 12,  8, 12, 12, 12,  8,  0,  8,  8,  0,  0,\n",
            "        0,  9,  9,  9,  2,  2, 14, 14,  2, 10,  2, 10, 10,  6,  3,  3,  6,\n",
            "        7,  7,  7, 11, 11, 11, 14, 14,  4,  4,  4, 13,  4,  4,  4, 13, 13,\n",
            "       13,  5,  5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.489543650793651, 'isoG': 8, 'SC': -0.019008593734059907, 'CHZ': 108.01426760056562, 'DAVIES': 2.2748702027527345, 'grupos': array([ 2,  2,  2,  2, 13, 11,  3, 12, 14,  8,  4,  6,  8,  7,  8,  7,  7,\n",
            "        5,  7,  8,  7,  7,  5,  7,  5,  7,  9,  9,  1,  1,  1,  1,  1,  1,\n",
            "        1, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8083333333333331, 'isoG': 9, 'SC': -0.0923964028802776, 'CHZ': 262.16777994204, 'DAVIES': 4.081818181803492, 'grupos': array([ 0,  0,  0,  0,  0,  9,  2,  2, 14, 10,  9,  9, 13,  2,  2,  1,  1,\n",
            "        1,  1,  6,  6,  8, 12,  5, 11,  6,  7,  3,  4,  5,  5],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.38108333333333433, 'isoG': 1, 'SC': 0.631185794155742, 'CHZ': 4994.411569871534, 'DAVIES': 0.42329512803521924, 'grupos': array([ 5, 11,  5, 11, 11, 10, 10,  3,  3,  3,  3, 12, 10, 10, 10, 11, 11,\n",
            "        5,  5, 11,  5,  5,  5,  5,  9,  9,  9,  9,  9,  9,  9,  9,  9,  8,\n",
            "        8,  0,  0,  0,  0,  0, 13, 13, 14, 14, 14, 14, 14,  6,  6,  6,  6,\n",
            "        6,  6,  6,  6,  4,  4,  1,  2,  2,  7,  7,  2,  2,  1,  1,  1,  1,\n",
            "        1,  1,  1,  1,  1,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "Error con SpectralClustering para CHL: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 99.54583333333335, 'isoG': 8, 'SC': -0.29447866996630523, 'CHZ': 3.4242964060854715, 'DAVIES': 2.476866810474305, 'grupos': array([14,  2,  2, 10, 10, 10,  2, 14,  2, 10,  4,  3,  3,  0,  3,  0,  1,\n",
            "        1,  2,  1,  6, 11, 13,  7,  5, 12,  8,  9,  2,  7,  7],\n",
            "      dtype=int32)}\n",
            "SpectralClustering"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.6387500000000004, 'isoG': 9, 'SC': 0.472867442096924, 'CHZ': 62.37848697831535, 'DAVIES': 0.20878122181223344, 'grupos': array([ 3,  6,  6,  6,  6,  6,  3,  6,  4,  4,  4,  4,  4,  4,  4,  4, 13,\n",
            "       12, 14,  2,  5, 10,  2,  7,  0,  1,  1,  1,  9, 11,  8,  8],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.742500000000001, 'isoG': 6, 'SC': -0.15168853807012903, 'CHZ': 32.41986062717767, 'DAVIES': 2.39767284199399, 'grupos': array([10, 11, 11,  9,  3,  3, 14, 10, 12,  3, 10,  6,  6, 10,  2, 11,  7,\n",
            "        7,  4,  8, 13,  0,  5,  8,  8,  5, 13,  5,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.9399999999999995, 'isoG': 2, 'SC': 0.061445526458184324, 'CHZ': 153.5813451776651, 'DAVIES': 298265.8360527359, 'grupos': array([ 2,  2,  2,  2,  6,  6,  6,  9, 14, 14,  6,  9,  9, 10, 11, 10,  0,\n",
            "        7,  0, 13,  0,  4,  4,  4, 13, 13,  4,  7,  7,  0,  3,  7,  7,  3,\n",
            "       12,  5, 13,  5,  5,  8,  8,  8,  1,  8,  8,  1,  1,  1,  1,  1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.216666666666667, 'isoG': 12, 'SC': -0.042575757575757295, 'CHZ': 10.76011947677412, 'DAVIES': 2.6022753220666526, 'grupos': array([ 3, 12,  8, 10,  0,  9, 12, 11, 14,  1, 13, 11,  7,  6,  4,  5,  2,\n",
            "        2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 6.880499999999995, 'isoG': 9, 'SC': -0.030822686465368412, 'CHZ': 29.308254406575752, 'DAVIES': 2.839194203001172, 'grupos': array([ 0,  0,  0,  0,  0, 14,  9,  7,  4,  5,  3, 13,  5,  5,  2, 13,  3,\n",
            "       11, 12,  5,  8,  6,  2, 10,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.8380952380952376, 'isoG': 0, 'SC': 0.4673994783015743, 'CHZ': 1012.1818926619554, 'DAVIES': 0.6275099549869603, 'grupos': array([ 5,  5,  5,  4,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0,  0,  0, 14,\n",
            "       14, 14, 14, 14,  2,  6,  6,  6,  2,  2,  2,  6,  6,  3,  3,  6,  3,\n",
            "        3, 11,  3, 11,  3, 11, 11, 11, 11, 11, 10, 10, 10, 10, 12, 12, 12,\n",
            "        7,  7,  7,  9,  9,  9,  9, 13, 13,  1,  1,  1,  8,  8,  8,  8,  8,\n",
            "       13,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 6.182000000000003, 'isoG': 2, 'SC': 0.13849819734315008, 'CHZ': 96.19723287783782, 'DAVIES': 3.4110021459197366, 'grupos': array([ 4,  4,  4,  4,  4,  4,  4,  4,  2,  6,  6,  8,  9,  9,  8,  8, 11,\n",
            "       11, 11,  2,  2,  2, 13,  2,  2,  2, 13,  2, 13,  5,  5, 10,  5,  5,\n",
            "       14, 10, 10,  7,  0,  0,  0, 12, 12,  1,  1, 12, 12,  1,  1,  1,  3,\n",
            "        3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.4921666666666668, 'isoG': 8, 'SC': 0.017557293363726065, 'CHZ': 167.93852693738, 'DAVIES': 3.164500541847233, 'grupos': array([ 1,  1,  1,  1,  3,  8,  1,  7,  3,  9, 12, 10,  4,  4,  4,  3,  2,\n",
            "        2,  2,  2, 11,  6,  5, 13, 14, 11,  5,  0,  0,  0,  0],\n",
            "      dtype=int32)}\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.4657142857142849, 'isoG': 0, 'SC': 0.4921543074499007, 'CHZ': 1969.452876984128, 'DAVIES': 0.7143941069216405, 'grupos': array([ 3,  2,  2,  2,  2, 14, 14, 14, 14,  2,  2,  3,  3,  3,  4,  5,  5,\n",
            "        5,  5,  5,  5,  4,  4,  4,  4,  5,  4,  8, 11, 11, 11, 11, 11,  8,\n",
            "       11,  4, 10, 10, 10, 10, 10, 10,  1,  1,  1,  1,  1,  1,  9,  0,  0,\n",
            "        9,  9,  9, 12, 12, 12, 12, 12,  7,  7,  7,  7,  7,  7, 13, 13, 13,\n",
            "        6,  6,  6,  6], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 6.593666666666664, 'isoG': 2, 'SC': 0.1285523370680915, 'CHZ': 196.28203235365152, 'DAVIES': 1.8494807559452078, 'grupos': array([10, 14,  7, 10, 10,  2,  2, 10,  2, 11, 13,  2, 11, 11,  7, 13,  6,\n",
            "        6,  5,  5,  3, 12, 12,  8,  8,  8,  8,  0,  0,  0,  9,  9,  0,  9,\n",
            "        9,  4,  0,  8,  4,  4,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 5.373238095238092, 'isoG': 3, 'SC': 0.12100333677551173, 'CHZ': 134.71457948886675, 'DAVIES': 2.4782860262415656, 'grupos': array([ 6,  6,  0, 13, 13, 12, 14,  9,  9,  1, 13, 12,  9,  9,  5,  5,  5,\n",
            "        5,  5,  7,  7,  7,  2,  2,  2,  7,  7,  2, 10,  8, 11,  8, 10, 11,\n",
            "        8,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.3621666666666656, 'isoG': 1, 'SC': 0.46426254941274775, 'CHZ': 924.3066534166353, 'DAVIES': 0.6042638990586937, 'grupos': array([ 3,  3,  3,  3, 13,  3, 13, 13, 13, 13,  3, 13,  5,  5,  5,  5, 10,\n",
            "       10, 10,  6,  6,  6,  6,  6,  6, 14, 14,  0, 14, 11,  9,  9,  1,  1,\n",
            "        1,  1,  1,  1,  1,  1,  9,  9,  2,  2,  2,  2, 11, 11,  2,  9,  9,\n",
            "        9,  9,  7,  7,  7, 11,  7,  8,  8,  8,  8,  8, 12, 12, 12,  4,  4,\n",
            "        4, 12,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 9.391333333333334, 'isoG': 0, 'SC': 0.21623379013787114, 'CHZ': 93.11274832925999, 'DAVIES': 1.0899681748244592, 'grupos': array([10, 10, 10, 10,  3, 10,  3, 10, 13,  3,  3,  4, 13, 14,  4,  4, 14,\n",
            "       14, 14,  9,  9,  2,  2,  1,  8,  5,  5,  8,  8,  2,  2,  1,  1,  1,\n",
            "        8,  8,  1,  8,  8,  1,  8, 11, 11,  0,  0,  0,  0, 12,  6, 12,  6,\n",
            "       12, 12,  6,  6,  7,  7,  7,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 7.577555555555557, 'isoG': 5, 'SC': -0.06988501563348087, 'CHZ': 106.00489560001569, 'DAVIES': 11.331566216371064, 'grupos': array([ 4,  4,  4, 14,  0, 14, 14,  0, 12,  3,  0,  5,  9, 12,  3,  3,  9,\n",
            "        9,  9,  3, 10, 10,  6,  8,  2,  2,  2,  8,  8,  2,  2,  8, 11, 13,\n",
            "        1,  1,  7,  1,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.7541428571428557, 'isoG': 2, 'SC': 0.21841585537850838, 'CHZ': 347.9910111877094, 'DAVIES': 0.7933052873932878, 'grupos': array([12, 12, 12, 12, 12, 12, 10, 10, 10, 10, 10,  6,  6,  6,  6,  6,  4,\n",
            "        4,  4,  4,  4,  4,  4,  9,  9,  9,  9, 14, 14, 14, 14, 14,  2,  2,\n",
            "       14,  2,  8,  5,  9,  9,  9,  9,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n",
            "       13,  5, 13,  7,  8, 11,  5, 13,  0,  0, 11,  0,  3,  0,  0,  0,  0,\n",
            "        0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.5128928571428593, 'isoG': 2, 'SC': 0.4982977638255344, 'CHZ': 1049.47831047624, 'DAVIES': 0.6649482723445131, 'grupos': array([ 2,  1,  1,  1,  5,  1, 10,  2,  1,  5,  1,  1,  1,  5,  2,  2,  2,\n",
            "        2,  2,  1,  1,  5,  1,  7,  7, 13,  9,  9,  9,  9,  9,  9,  6,  6,\n",
            "        9,  6, 14, 14,  0,  0,  0, 11, 11,  4,  4, 11,  4, 12, 12, 12, 12,\n",
            "       12,  8,  8,  8, 12,  4,  4,  8,  8,  3,  3,  3,  3,  3,  3,  3,  3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.16533333333333333, 'isoG': 13, 'SC': 0.1504166666666625, 'CHZ': 297.0657762096776, 'DAVIES': 0.14983727470575467, 'grupos': array([ 1,  1,  1,  1,  1, 13,  1, 11, 14,  2,  2,  2,  2,  2,  8,  7,  0,\n",
            "       10, 12,  3,  9,  5,  4,  6], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.8430595238095239, 'isoG': 1, 'SC': 0.2694707266281452, 'CHZ': 706.9524051855062, 'DAVIES': 1.2910324732735117, 'grupos': array([ 5,  5,  5,  5, 11, 11, 11,  1,  1,  1,  1,  1,  1,  1,  1,  0, 13,\n",
            "       13,  0,  0,  8,  0,  0,  8,  7,  8,  9, 10, 13, 10,  7,  2,  2, 12,\n",
            "       12, 10,  4,  4, 14, 14, 14, 14, 14,  6,  3, 14,  6,  3,  3,  3,  3,\n",
            "       14], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.8338333333333328, 'isoG': 4, 'SC': 0.18505538058103668, 'CHZ': 448.15614218095294, 'DAVIES': 1.2063139329810069, 'grupos': array([ 2,  2,  2,  2,  2, 12,  4,  4,  6,  6,  5,  3,  3,  3,  3,  3,  3,\n",
            "        5,  3,  3,  1,  5,  5,  1,  1,  1,  6,  6, 11, 11, 14, 11,  8,  8,\n",
            "        8,  0,  0, 13, 10,  7,  7,  9,  0,  7,  7,  9,  9], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 42.18333333333333, 'isoG': 10, 'SC': -0.34308688674166915, 'CHZ': 8.289705829531991, 'DAVIES': 4.954166046204039, 'grupos': array([ 3,  6,  3,  3,  2,  4,  2,  7,  4, 12,  4, 11,  9, 10,  5,  8,  1,\n",
            "       13, 14,  5,  1,  0], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.5628888888888892, 'isoG': 10, 'SC': 0.4248443171125712, 'CHZ': 1868.0284147215928, 'DAVIES': 0.18592705719141336, 'grupos': array([ 4,  4,  4,  4,  4,  0,  0,  4, 14,  0, 10,  0, 13,  0,  0,  0,  0,\n",
            "        5,  8,  4,  7,  6,  3,  9,  4,  4, 12,  2,  2,  2,  1,  1,  1, 11,\n",
            "       11,  1,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.04999999999999982, 'isoG': 10, 'SC': 0.19184027777779458, 'CHZ': 2019.2281250000071, 'DAVIES': 0.5917283950617727, 'grupos': array([ 1, 12,  0,  0, 10,  1, 13,  1,  1,  0,  9, 11,  0,  1,  3,  3,  3,\n",
            "        3,  6,  6,  2,  6,  2,  4,  6,  2, 14,  8,  5,  2,  2,  7],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.005000000000000009, 'isoG': 12, 'SC': 0.19841269841269843, 'CHZ': 13.122448979591793, 'DAVIES': 0.19619047619047014, 'grupos': array([14, 11,  8, 10, 13,  8,  8, 12,  1,  8,  4,  0,  1,  7,  1,  9,  5,\n",
            "        3,  6,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 11.52938095238096, 'isoG': 0, 'SC': 0.5263652808663359, 'CHZ': 1397.7320696728718, 'DAVIES': 0.4817236193450601, 'grupos': array([ 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  8,  8,  8, 13, 13, 13, 13,\n",
            "       13,  9,  9,  9,  9,  4,  4,  4,  4,  4,  4,  4,  7,  7,  7,  7,  7,\n",
            "        0,  0,  0,  0,  0,  0,  0, 10, 10, 10, 10,  5,  5,  5,  5, 14, 14,\n",
            "        5,  5,  5,  5,  5,  5, 14, 14, 14,  6,  6,  6,  6, 12, 12, 12, 12,\n",
            "       12, 11, 11, 11, 11,  2,  2,  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,\n",
            "        1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.0549999999999995, 'isoG': 3, 'SC': 0.19363926562277092, 'CHZ': 270.81899768075033, 'DAVIES': 1.2153422251411108, 'grupos': array([ 9,  3,  3,  2,  6, 10,  2, 13, 13,  6, 10, 10,  2,  2,  3, 10,  2,\n",
            "        2, 12, 12,  3,  3,  9,  9,  9,  9,  0,  5,  5,  7,  7,  1, 14,  7,\n",
            "        7, 11,  4,  4,  4,  1,  1,  8,  4,  8,  8,  8,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 9.972817460317463, 'isoG': 0, 'SC': 0.31914098717369316, 'CHZ': 109.23904186497181, 'DAVIES': 2.189276599743206, 'grupos': array([ 9,  9,  0,  0,  0,  0,  0,  0,  8,  8,  0,  8,  8, 10, 10,  7,  7,\n",
            "        7,  7,  7,  7,  5,  5,  1,  1, 13,  6,  6,  3,  3, 12,  7,  7,  5,\n",
            "        1, 14, 14,  7,  6,  6, 13, 12,  3, 12, 12, 11, 11,  2,  2,  2,  2,\n",
            "       11,  4,  4,  4,  4,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.2675000000000001, 'isoG': 12, 'SC': -0.33148148148148365, 'CHZ': 132.85413885180236, 'DAVIES': 0.7368893233244356, 'grupos': array([ 0,  0,  1,  6,  4,  0, 10,  7, 11,  9,  5,  2, 13,  2,  2,  2,  2,\n",
            "       14,  8, 12,  3,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.03500000000000011, 'isoG': 10, 'SC': -0.03750000000002109, 'CHZ': 14.025510204081593, 'DAVIES': 0.9944444444441629, 'grupos': array([ 0,  0, 14,  2,  2,  7,  4,  1, 13,  9, 12,  3,  3,  8, 10, 11,  7,\n",
            "        5,  6,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.999166666666665, 'isoG': 4, 'SC': -0.16430756495790247, 'CHZ': 42.20853051516568, 'DAVIES': 2.8201246706500815, 'grupos': array([ 3,  3,  3, 13, 10,  7, 14,  7,  8,  6,  6,  4, 14,  1,  9,  1,  9,\n",
            "        9,  4,  0,  4,  4,  1, 12, 11,  5,  5, 12, 11,  5,  5,  2,  2,  2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.0564285714285724, 'isoG': 1, 'SC': 0.3043391699601697, 'CHZ': 484.1153020328863, 'DAVIES': 0.9459161231225705, 'grupos': array([12, 13, 13, 13, 13, 13,  1,  1,  1, 13,  1,  9,  3,  3,  3,  3,  9,\n",
            "        9,  9,  4,  4,  9,  9,  4,  4,  8,  8,  8,  8,  8,  8,  6,  6, 11,\n",
            "        6,  6, 10, 10, 10,  6,  6, 11,  6, 11, 14, 14,  7, 14, 14,  7,  5,\n",
            "        5,  5,  2,  7,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.172476190476187, 'isoG': 1, 'SC': 0.27578797346089107, 'CHZ': 291.35726796559624, 'DAVIES': 1.353549889829177, 'grupos': array([ 7,  7,  7,  5,  5,  5,  5,  5,  5,  5, 13, 12, 12, 13, 12,  2,  2,\n",
            "        2,  2,  6, 10,  1,  4,  1,  4,  4,  2,  2, 14, 14, 14, 14,  6,  6,\n",
            "        6,  0,  6,  6, 10, 10,  1,  1,  1, 10, 11, 11, 11, 11,  9,  8,  9,\n",
            "        9,  3,  3,  8,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 9.529166666666661, 'isoG': 1, 'SC': 0.12170553341157224, 'CHZ': 258.1945026458331, 'DAVIES': 2.4073048609223044, 'grupos': array([ 0,  0,  0,  0,  0,  0,  2,  6,  2,  2,  2,  6,  1,  6,  6,  1,  1,\n",
            "        1, 10, 10, 10,  4,  4,  4, 13, 13,  8, 11,  8,  8,  9,  7,  8,  9,\n",
            "        7,  7,  7,  4,  4,  4, 13, 13,  3, 14, 14, 12,  3,  3,  3, 14, 12,\n",
            "       12,  5,  5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.489543650793651, 'isoG': 8, 'SC': -0.019008593734059907, 'CHZ': 108.01426760056562, 'DAVIES': 2.2748702027527345, 'grupos': array([ 4,  4,  4,  4,  0, 12, 13,  7,  8, 14, 10,  9,  8,  6,  8,  6,  6,\n",
            "        5,  6,  8,  6,  6,  5,  6,  5,  6, 11, 11,  2,  2,  2,  2,  2,  2,\n",
            "        2,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 10.599166666666667, 'isoG': 9, 'SC': -0.08396988316343315, 'CHZ': 18.9382276886823, 'DAVIES': 1.4279946758908137, 'grupos': array([ 3,  3,  3,  3,  3,  2,  8, 12,  1, 14,  1, 11,  7,  1,  1,  0,  0,\n",
            "        0,  0, 10, 10,  9, 13,  4,  4, 10,  6,  5,  7,  4,  4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.2832500000000007, 'isoG': 1, 'SC': 0.6431714875559073, 'CHZ': 6720.964811631887, 'DAVIES': 0.43955882185002676, 'grupos': array([ 1, 10,  1, 10, 10, 11, 11,  5,  5,  5,  5, 12, 11, 11, 11, 10, 10,\n",
            "        1,  1, 10,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9, 13,\n",
            "       13, 14, 14, 14,  2,  2,  2,  2,  4,  4,  4,  4,  4,  6,  6,  6,  6,\n",
            "        6,  6,  6,  6,  0,  0,  3,  8,  8,  7,  7,  8,  8,  3,  3,  3,  3,\n",
            "        3,  3,  3,  3,  3,  0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "Error con SpectralClustering para CHL: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 127.19011904761904, 'isoG': 8, 'SC': -0.29643342400744915, 'CHZ': 2.431643057276872, 'DAVIES': 20.01398262323899, 'grupos': array([10,  1,  1,  0,  0,  0,  1, 10,  1,  0,  3,  5,  5,  2,  5,  2, 12,\n",
            "       12,  1, 12,  9,  7, 13, 14,  8,  6, 11,  1,  1,  4,  4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.6387500000000002, 'isoG': 9, 'SC': 0.472867442096924, 'CHZ': 62.37848697831535, 'DAVIES': 0.2087812218122334, 'grupos': array([ 5,  7,  7,  7,  7,  7,  5,  7,  3,  3,  3,  3,  3,  3,  3,  3, 12,\n",
            "       11,  4,  2,  9, 13,  2, 14, 10,  0,  0,  0,  8,  6,  1,  1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.7133333333333327, 'isoG': 7, 'SC': -0.13693189674125505, 'CHZ': 32.9899944413563, 'DAVIES': 3.68095998780157, 'grupos': array([13,  5,  5, 10,  2,  2, 12,  1,  9,  2,  1,  4,  4,  1,  2,  5,  8,\n",
            "       11,  7,  6,  0,  7, 14,  6,  6,  7,  0,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 4.813, 'isoG': 2, 'SC': -0.018183373332978287, 'CHZ': 125.27072511946818, 'DAVIES': 4.736791171792627, 'grupos': array([ 2,  2,  2, 14, 13, 13, 13, 14,  7,  7, 13,  4,  4,  7,  4, 10,  3,\n",
            "        5,  3, 11,  3,  6,  0,  0, 11, 11,  0,  5,  5,  3,  3, 12,  5,  3,\n",
            "        0,  6, 11,  8,  8,  9,  9,  9,  1,  9,  9,  1,  1,  1,  1,  1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.2166666666666668, 'isoG': 12, 'SC': -0.042575757575757295, 'CHZ': 10.760119476774118, 'DAVIES': 2.6022753220666526, 'grupos': array([ 1, 10,  6,  9,  0, 11, 10,  3, 14, 12, 13, 14,  7,  4,  8,  5,  2,\n",
            "        2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 6.880499999999995, 'isoG': 9, 'SC': -0.030822686465368412, 'CHZ': 29.308254406575752, 'DAVIES': 2.839194203001172, 'grupos': array([ 1,  1,  1,  1,  1, 14,  9,  5,  7,  4, 10,  8,  4,  4,  6,  8, 10,\n",
            "        4,  0, 12, 13,  3,  6, 11,  2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.168511904761904, 'isoG': 0, 'SC': 0.40993282908607453, 'CHZ': 585.4404359377274, 'DAVIES': 0.6100483558669587, 'grupos': array([12, 12, 12,  1,  1,  1,  1,  1,  1,  1,  1,  4,  4,  4,  4,  4, 10,\n",
            "       10, 10, 10, 10,  7,  7,  5,  5, 10, 10,  7,  5,  5,  0,  0,  5,  0,\n",
            "        0,  3,  0,  3,  0,  3,  3,  3,  3,  3,  6,  6,  6, 11, 11, 11, 14,\n",
            "       14, 14, 14, 13, 13, 13, 13,  9,  9,  9,  2,  2,  8,  8,  8,  8,  8,\n",
            "        9,  9,  9,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.663749999999999, 'isoG': 1, 'SC': 0.186093940367595, 'CHZ': 164.23238994221595, 'DAVIES': 2.6909868204012133, 'grupos': array([ 3,  3,  3,  3,  3,  3,  3,  3, 13, 11, 11,  0,  8,  8,  0,  0, 14,\n",
            "       14, 10, 10,  6, 10,  4,  6,  6,  6,  4,  6,  4,  1,  1, 12,  1,  1,\n",
            "        1, 12, 12,  9,  9,  9,  9,  5,  5,  7,  7,  5,  5,  7,  7,  7,  2,\n",
            "        2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.47083333333333366, 'isoG': 8, 'SC': 0.014446694285381657, 'CHZ': 175.59955956119248, 'DAVIES': 1.7094949494952307, 'grupos': array([ 1,  1,  1,  1,  0,  1,  1, 11,  0,  3,  7,  5,  6,  3,  3, 10,  2,\n",
            "        2,  2,  2,  4, 13,  9, 12, 14,  4,  9,  8,  8,  8,  8],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.1867976190476186, 'isoG': 0, 'SC': 0.4523126991187982, 'CHZ': 2433.263059998253, 'DAVIES': 0.7353182471218743, 'grupos': array([ 4,  7,  7,  7,  7, 11, 11, 11, 11,  7,  7,  4,  4,  4,  3,  5,  5,\n",
            "        5,  5,  5,  5,  3,  3,  3,  3,  5,  3,  2,  2,  2,  2,  2,  2,  2,\n",
            "        2,  3,  6,  6,  6,  6,  6,  6, 14, 14, 14, 10, 14, 14, 10,  9,  9,\n",
            "       13, 13, 13,  0,  0,  0,  0,  0,  8,  8,  1,  8,  8,  1,  1,  1,  1,\n",
            "       12, 12, 12, 12], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.4779999999999984, 'isoG': 1, 'SC': 0.05372226695880819, 'CHZ': 374.0992726240186, 'DAVIES': 1.883320134491084, 'grupos': array([ 8,  2,  0,  8,  8,  5,  5,  8,  5,  2, 12,  5,  2,  2,  0, 12,  9,\n",
            "        9,  1,  1, 13,  7,  7,  7,  7,  7, 14,  3,  3,  3,  4, 14,  3,  4,\n",
            "        4,  6, 11, 11,  6,  6, 11, 11, 11, 10, 10, 11], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 5.498333333333331, 'isoG': 1, 'SC': 0.16646394070175843, 'CHZ': 131.59761961578116, 'DAVIES': 3.5458849483845296, 'grupos': array([ 0,  0,  6,  6, 14, 11, 12,  3,  3, 14, 14, 11,  3,  3, 11,  4,  4,\n",
            "        4,  4, 10, 10, 10,  2,  2,  2, 10, 10,  2, 13,  7,  8,  7, 13,  8,\n",
            "        7,  9,  9,  9,  9,  1,  1,  1,  5,  5,  5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.757305555555554, 'isoG': 0, 'SC': 0.5153831519863512, 'CHZ': 1127.9775891372253, 'DAVIES': 0.4936803173651661, 'grupos': array([ 1,  1,  1,  1, 12, 12, 12, 12, 12, 12,  1,  1,  5,  5,  5,  5,  9,\n",
            "        9,  9, 14, 14, 14, 14, 14, 14, 11, 11,  6,  6,  4,  3,  3,  2,  2,\n",
            "        2,  2,  2,  2,  2,  2,  3,  3,  3, 13, 13, 13,  4,  4, 13,  3,  3,\n",
            "        3,  3, 10, 10, 10,  4, 10,  0,  0,  0,  0,  0,  8,  8,  8,  7,  7,\n",
            "        7,  8,  7,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 6.883499999999998, 'isoG': 0, 'SC': 0.21463086920876107, 'CHZ': 128.20712573545444, 'DAVIES': 3.1236338459141306, 'grupos': array([ 5,  5,  5,  5, 10,  6,  6,  6, 10, 10,  6,  6, 10,  0,  0,  0,  0,\n",
            "       14, 14, 14, 14,  4,  4, 13,  1,  7,  7, 11,  1,  4,  4, 13, 13, 13,\n",
            "        1,  1, 11, 11,  1, 11,  1,  9,  9,  2,  9,  2,  2,  3, 12,  3, 12,\n",
            "        3,  3, 12, 12,  8,  8,  8,  8,  8], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 6.635833333333331, 'isoG': 2, 'SC': 0.04034098556505053, 'CHZ': 121.34251350809188, 'DAVIES': 2.6147809616501765, 'grupos': array([ 9,  9,  9, 10, 13, 10, 10, 13,  2,  0, 13,  2,  6,  2, 12,  7, 11,\n",
            "       11,  6,  7,  7,  7,  5,  3,  5,  5,  5,  3,  3, 14, 14,  3,  1,  1,\n",
            "        1,  1,  8,  4,  4,  4,  8,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 18.701833333333337, 'isoG': 2, 'SC': 0.1430956954259843, 'CHZ': 66.2007647920719, 'DAVIES': 12.424931055888562, 'grupos': array([ 8,  8,  8,  8,  8,  8, 13, 13,  5, 12, 13, 12, 12, 12, 12, 12,  6,\n",
            "        6,  6,  6,  4,  4,  4,  7,  7,  7,  7,  2,  2,  2,  2,  2, 11, 11,\n",
            "        2, 11,  3,  5,  7,  7,  7,  7,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n",
            "        3,  0,  5,  0,  5,  5,  0,  5,  1, 14,  0,  3,  1,  1,  1,  1,  1,\n",
            "        1,  1,  1,  1,  1,  9,  9,  9,  9,  1, 10], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.6122261904761912, 'isoG': 1, 'SC': 0.49875382761884135, 'CHZ': 984.5840499328209, 'DAVIES': 2.9812751690157997, 'grupos': array([ 1,  3,  3,  3,  6,  3, 10,  1,  3,  6,  3,  3,  3,  6,  1,  1,  1,\n",
            "        1,  1,  3,  3,  6,  3,  5,  5,  0,  0,  0,  0, 12, 12, 12,  7,  7,\n",
            "       12,  7, 14, 14,  9,  9,  8, 11, 11,  8,  8, 11,  8, 13, 13, 13, 13,\n",
            "       13,  2,  2,  2, 13,  8, 11,  2,  2,  4,  4,  4,  4,  4,  4,  4,  4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.1640000000000001, 'isoG': 12, 'SC': 0.013888888888895686, 'CHZ': 299.48617160278735, 'DAVIES': 0.5209401709402233, 'grupos': array([ 0,  0,  0,  0,  0, 12, 14, 11, 13,  1,  1,  1,  1,  1,  7,  6,  5,\n",
            "        8, 10,  3,  4,  7,  9,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.0304999999999995, 'isoG': 1, 'SC': 0.13533635168251112, 'CHZ': 577.8821733821734, 'DAVIES': 1.9006331207448863, 'grupos': array([ 8,  8,  8,  8,  2,  2,  1,  1,  1,  7,  7,  1,  7,  1,  7,  3, 11,\n",
            "       11,  3,  3, 12,  3,  3, 12, 10, 12,  3,  4, 11,  4, 10, 14, 14,  5,\n",
            "        5,  4,  6,  6,  6,  6,  9,  9,  9, 13,  0,  9,  9,  0,  0,  0,  0,\n",
            "        9], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.8279999999999995, 'isoG': 5, 'SC': 0.32122559334701684, 'CHZ': 451.32954495396694, 'DAVIES': 1.0653086419757514, 'grupos': array([ 3,  3,  3,  3,  3, 14,  8,  8,  2,  2,  7,  1,  1,  1,  1,  1,  1,\n",
            "        7,  1,  1,  4,  7,  7,  4,  4,  4,  2,  9,  2,  2, 12,  2,  6,  6,\n",
            "        6, 10, 10,  0, 13,  0, 11,  5, 10,  0,  0,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 15.706666666666665, 'isoG': 9, 'SC': -0.2505654356711149, 'CHZ': 23.106478623244335, 'DAVIES': 3.854172756608244, 'grupos': array([ 0,  5,  5,  6,  4, 10,  4,  8,  1, 12,  1, 14,  3, 13,  7, 11,  2,\n",
            "        2,  3,  7,  2,  9], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.562888888888889, 'isoG': 9, 'SC': 0.4248443171125712, 'CHZ': 1868.028414721592, 'DAVIES': 0.18592705719141336, 'grupos': array([ 0,  0,  0,  0,  0, 14, 13,  0, 13, 14,  4, 13, 12, 13, 14, 14, 13,\n",
            "        6,  2,  0,  8,  7,  5,  9,  0,  0, 11,  3,  3,  3,  1,  1,  1, 10,\n",
            "       10,  1,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 6.172500000000001, 'isoG': 8, 'SC': 0.19206349206350884, 'CHZ': 15.152197969102588, 'DAVIES': 1.1030942128342003, 'grupos': array([ 5, 14,  1,  1,  7,  0,  4,  0,  0,  1,  6, 13,  1,  0,  3,  3,  3,\n",
            "        3,  2,  2, 11,  2, 11,  9,  2,  5, 12,  8, 10, 11,  8, 11],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.005000000000000009, 'isoG': 12, 'SC': 0.19841269841269843, 'CHZ': 13.122448979591793, 'DAVIES': 0.19619047619047014, 'grupos': array([ 1,  1, 11, 14, 13,  1, 12, 10,  2,  1,  0,  7,  2,  4,  2,  3,  8,\n",
            "        6,  5,  9,  9], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 13.726821428571435, 'isoG': 0, 'SC': 0.4943806281350117, 'CHZ': 1173.143214686034, 'DAVIES': 0.5045426558853071, 'grupos': array([13, 13, 13, 13,  2, 13, 13, 13,  2,  2,  2,  2,  2,  5,  5,  5,  5,\n",
            "        5,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10,  4,  4,  4,  4,\n",
            "        0,  0,  0,  0,  0,  0,  0, 11, 11, 11, 11,  1,  1,  1, 12, 12, 12,\n",
            "        1,  1,  1,  1,  1, 12, 12,  7,  7,  7,  7,  6,  6,  6,  6,  6,  6,\n",
            "        6,  8,  8,  8,  8, 14, 14, 14, 14, 14,  3,  3,  3,  3,  3,  3,  3,\n",
            "        3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.8215714285714282, 'isoG': 4, 'SC': 0.24913034168352632, 'CHZ': 348.41473743961024, 'DAVIES': 0.9519039973311684, 'grupos': array([ 2,  2,  2, 10,  6,  0, 10, 14,  6,  6,  0,  0, 10, 10,  2,  6,  0,\n",
            "       10,  5,  5,  2,  2,  2, 11, 11, 12,  8,  7,  7,  4,  4,  3,  3,  4,\n",
            "        4,  3,  9, 13,  9,  3,  3,  1,  9,  1,  1,  1,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 8.10261904761905, 'isoG': 0, 'SC': 0.25821319581550634, 'CHZ': 135.1783644352752, 'DAVIES': 2.0012526714973404, 'grupos': array([ 5,  5,  2,  2,  2,  2,  2,  2,  7,  7,  0,  7,  7,  0,  9,  9,  9,\n",
            "        9,  4, 12,  4,  4,  4,  8,  8, 11, 14, 14,  1,  1, 13, 12,  4,  4,\n",
            "        8, 14, 14,  4, 14, 14, 11, 13, 13,  3, 13, 10, 10,  3,  3,  3,  3,\n",
            "       10,  3,  6,  6,  6,  6,  6,  6], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.22749999999999987, 'isoG': 12, 'SC': -0.34722222222222393, 'CHZ': 156.32613814756684, 'DAVIES': 316354.6667478324, 'grupos': array([ 3,  7,  3,  3,  5,  0, 12,  2,  9, 11,  6,  4,  8,  4,  4,  4,  4,\n",
            "       10, 13, 14,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.03500000000000011, 'isoG': 10, 'SC': -0.03750000000002109, 'CHZ': 14.025510204081593, 'DAVIES': 0.9944444444441629, 'grupos': array([ 5,  5, 13,  2,  2,  8,  1, 12,  0, 14,  9,  6,  6,  3, 11, 10,  8,\n",
            "        4,  7,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.989166666666665, 'isoG': 3, 'SC': -0.17431573489253913, 'CHZ': 27.779754388513158, 'DAVIES': 4.477105444772676, 'grupos': array([ 2,  2,  2, 13, 11,  6, 10,  6, 12, 14,  4, 11, 10,  1,  8,  1,  8,\n",
            "        8,  3,  4,  3,  3,  1,  9,  5,  7,  7,  9,  5,  7,  7,  0,  0,  0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.2572380952380966, 'isoG': 1, 'SC': 0.4773959401072945, 'CHZ': 1182.2315551141453, 'DAVIES': 0.5532310632118856, 'grupos': array([ 4,  4,  4,  4,  4,  4,  9,  9,  9,  1,  1,  1,  8,  8,  6,  6,  6,\n",
            "        6,  6, 12, 12, 12, 12, 12, 12,  2,  2,  2,  2,  2,  2,  7,  7,  5,\n",
            "        7,  7, 13, 13, 13,  7,  7,  5,  7,  5,  0,  0,  0,  0,  0, 14, 10,\n",
            "       10, 10,  3,  3,  3,  3,  3,  3,  3, 11, 11, 11, 11, 11, 11, 11],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 7.987071428571429, 'isoG': 0, 'SC': 0.16242614370675607, 'CHZ': 113.8760706352635, 'DAVIES': 3.8644970930207463, 'grupos': array([ 4,  4,  4,  7,  7,  7,  7,  6,  6,  8, 14,  6,  6, 14, 12,  0, 12,\n",
            "        0,  0,  3,  8,  2, 10,  2, 10, 10,  0,  0,  9,  9,  9,  9,  3,  3,\n",
            "        3,  3,  3,  3,  8,  8,  2,  2,  2,  8, 11, 11, 11, 11,  5, 13,  5,\n",
            "        5,  1,  1, 13,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 8.655333333333328, 'isoG': 1, 'SC': 0.18803517855936316, 'CHZ': 284.557213062765, 'DAVIES': 1.171235659312362, 'grupos': array([ 5,  5,  5,  5,  5,  5,  0,  2,  0,  0,  0,  2,  8,  2,  2,  8,  8,\n",
            "        8, 13, 13, 13,  1,  1, 11, 11, 11,  7, 10,  7,  7, 14, 14, 14,  6,\n",
            "        3,  3,  3,  1,  1,  1, 11, 11, 12,  6,  6,  9, 12, 12, 12,  6,  9,\n",
            "        9,  4,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.4895436507936517, 'isoG': 8, 'SC': -0.019008593734059907, 'CHZ': 108.01426760056563, 'DAVIES': 2.274870202752735, 'grupos': array([ 3,  3,  3,  3,  9, 11, 10, 14, 12, 13,  6,  5, 13,  8, 13,  8,  8,\n",
            "        2,  8, 13,  8,  8,  2,  8,  2,  8,  7,  7,  1,  1,  1,  1,  1,  1,\n",
            "        1,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 16.04833333333333, 'isoG': 9, 'SC': -0.15420480764283945, 'CHZ': 12.119751537813238, 'DAVIES': 1.9581129667095267, 'grupos': array([ 2,  2,  2,  2,  2,  5, 14,  7,  9, 13,  4,  7,  5,  7,  7,  1,  1,\n",
            "        1,  1, 12, 12,  6, 11,  0,  3, 12,  8, 10,  5,  3,  3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.2992500000000008, 'isoG': 2, 'SC': 0.639007431582635, 'CHZ': 6361.382017072741, 'DAVIES': 0.4025243215963631, 'grupos': array([ 0,  7,  0,  7,  7, 12, 12,  1,  1,  1,  1, 10, 12, 12, 12,  7,  7,\n",
            "        0,  0,  7,  0,  0,  0,  0,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n",
            "       13,  3,  3,  3, 14, 14, 14, 14, 11, 11, 11, 11, 11,  6,  6,  6,  6,\n",
            "        6,  6,  6,  6,  4,  4,  2,  9,  9,  8,  8,  9,  9,  2,  2,  2,  2,\n",
            "        2,  2,  2,  2,  2,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "Error con SpectralClustering para CHL: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 15 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 126.22440476190476, 'isoG': 8, 'SC': -0.2957452431122304, 'CHZ': 2.458990747401214, 'DAVIES': 38.40650040080758, 'grupos': array([13,  7,  7,  1,  1,  1,  7, 13,  7,  1,  2,  3,  3,  4,  3,  4,  8,\n",
            "        8,  7,  8, 10, 11, 14,  7,  5,  6,  9,  0,  7, 12, 12],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.6387500000000004, 'isoG': 9, 'SC': 0.472867442096924, 'CHZ': 62.37848697831535, 'DAVIES': 0.20878122181223344, 'grupos': array([ 4,  2,  2,  2,  2,  2,  4,  2,  0,  0,  0,  0,  0,  0,  0,  0, 12,\n",
            "       10, 11,  1, 13,  9,  1,  6, 14,  3,  3,  3,  8,  7,  5,  5],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 2.837499999999997, 'isoG': 7, 'SC': -0.1014935082821024, 'CHZ': 19.495468848332294, 'DAVIES': 4.489909134706711, 'grupos': array([ 8,  0,  0, 14,  1,  1, 10, 11, 13,  1,  8,  2,  2,  1,  8,  0, 12,\n",
            "        4,  5,  3,  9,  6,  5,  3,  3,  5,  9,  5,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.8854999999999973, 'isoG': 2, 'SC': 0.14837643766607342, 'CHZ': 155.77062154162928, 'DAVIES': 3.618269034072265, 'grupos': array([ 6,  6,  6,  6,  7,  7,  7, 13,  5,  5,  7, 13, 13,  5,  9,  0,  1,\n",
            "       11,  1, 10,  1,  4,  4,  2, 10, 10,  2, 11, 11,  1,  1, 11,  0,  1,\n",
            "        2, 14, 10,  8,  8,  3,  3,  3, 12,  3,  3, 12, 12, 12, 12, 12],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.2166666666666668, 'isoG': 12, 'SC': -0.042575757575757295, 'CHZ': 10.760119476774118, 'DAVIES': 2.6022753220666526, 'grupos': array([ 5,  2,  9,  8,  0, 11,  2, 10, 12, 13, 14, 10,  6,  4,  3,  7,  1,\n",
            "        1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 6.399666666666661, 'isoG': 9, 'SC': 0.010606256978825971, 'CHZ': 31.574705031760086, 'DAVIES': 1.4287497585571418, 'grupos': array([ 1,  1,  1,  1,  1, 14, 13,  9,  5,  2,  4, 11,  2,  2,  6, 11,  4,\n",
            "       10, 11,  0,  7, 12,  6,  8,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.419035714285716, 'isoG': 0, 'SC': 0.38114546740834043, 'CHZ': 542.239760379707, 'DAVIES': 0.7780204924816235, 'grupos': array([ 6,  6,  6,  3,  3,  3,  3,  3,  3,  3,  3,  9,  9,  9,  9,  9,  9,\n",
            "        2,  2,  2,  2,  2, 13, 13, 13,  2,  2,  2,  4,  4, 12, 12,  4, 12,\n",
            "       12,  5, 12,  5, 12,  5,  5,  5,  5,  5, 11, 11, 11, 11,  0,  0,  0,\n",
            "        0,  0, 14, 14,  1,  1,  1, 10, 10,  8,  8,  8,  7,  7,  7,  7,  7,\n",
            "       10,  8, 10,  8,  8], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 4.359999999999999, 'isoG': 0, 'SC': 0.061758503458607845, 'CHZ': 137.56120758701041, 'DAVIES': 3.667556352511873, 'grupos': array([ 7,  7,  7,  7,  7,  1,  7,  1,  1, 10, 10,  2, 14, 14,  2,  2,  3,\n",
            "        3, 14, 14, 11, 14,  6, 11, 11, 11,  6, 11,  6,  5, 11, 12,  5,  5,\n",
            "       13, 12, 12, 13,  8,  8,  8,  9,  9,  4,  4,  9,  9,  4,  4,  4,  0,\n",
            "        0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.5300000000000002, 'isoG': 8, 'SC': -0.04916911045946294, 'CHZ': 155.86888096687247, 'DAVIES': 1.6559605911332094, 'grupos': array([ 2,  2,  2,  2,  6, 12,  2, 13,  6,  3, 11, 10,  5,  5,  5,  9,  4,\n",
            "        4,  4,  4,  1,  8,  7,  0, 14,  1,  7,  0,  0,  0,  0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.5347976190476198, 'isoG': 0, 'SC': 0.416445900546339, 'CHZ': 1880.6218573434203, 'DAVIES': 0.7381521714377478, 'grupos': array([ 1,  8,  8,  8,  8, 13,  8, 13,  8,  8,  8,  1,  1,  1, 14,  2,  2,\n",
            "        2,  2,  2,  2, 14, 14, 14, 14,  2, 14,  7,  5,  5,  5,  5,  5,  7,\n",
            "        5, 14,  6,  6,  6,  6,  6,  6,  4,  4,  4,  4,  4,  4,  9, 12, 12,\n",
            "        9,  9,  9,  3,  3,  3,  3,  3, 10, 10, 11, 10, 10, 11, 11, 11, 11,\n",
            "        0,  0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.519333333333333, 'isoG': 2, 'SC': 0.04448746569555334, 'CHZ': 369.67960211502543, 'DAVIES': 1.8544639658322122, 'grupos': array([ 5, 13, 10,  5,  5,  0,  0,  5,  0, 14,  4,  0, 14, 14, 10,  4,  6,\n",
            "        6,  7,  7,  7,  2,  2,  2,  2,  2, 11, 11, 11, 11,  3, 11,  8,  3,\n",
            "        3, 12,  9,  9, 12, 12,  9,  9,  9,  1,  1,  9], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 7.087738095238093, 'isoG': 4, 'SC': 0.09780955361550046, 'CHZ': 101.57466933412665, 'DAVIES': 1.9559435454497272, 'grupos': array([ 5,  5, 11, 11, 11,  9, 14,  8,  8,  8, 11,  9,  7,  8,  9,  3,  3,\n",
            "        3,  3,  2,  2,  2,  0,  0,  0,  2,  2,  0, 10,  6, 13,  6, 10, 12,\n",
            "        6,  4,  4,  4,  4,  4,  4,  4,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.380499999999998, 'isoG': 0, 'SC': 0.5695412874375195, 'CHZ': 1307.1791323913196, 'DAVIES': 0.48436906503626426, 'grupos': array([ 9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  9,  9,  6,  6,  6,  6, 11,\n",
            "       11, 11,  2,  2, 14, 14, 14, 14, 14, 14, 13, 13, 10,  1,  1,  5,  5,\n",
            "        5,  5,  5,  5,  5,  5,  1,  1,  4,  4,  4,  4, 10, 10,  4,  1,  1,\n",
            "        1,  1,  7,  7,  7, 10,  7,  0,  0,  0,  0,  0, 12, 12, 12,  3,  3,\n",
            "        3, 12,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 6.165833333333328, 'isoG': 0, 'SC': 0.3049683080378644, 'CHZ': 143.50380360280357, 'DAVIES': 2.2202734842486, 'grupos': array([ 3,  3,  3,  3,  2,  2,  2,  2,  6,  6,  2,  9,  6,  6,  9,  9,  5,\n",
            "        5,  5, 14, 14,  1,  1, 11, 13,  4,  4, 13, 13,  1,  1, 11, 11, 11,\n",
            "       13, 13, 13, 13, 13, 13, 13, 12, 12,  7,  7, 10, 10,  0, 10,  0, 10,\n",
            "        0,  0, 10, 10,  8,  8,  8,  8,  8], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 6.619285714285715, 'isoG': 2, 'SC': 0.06498335302160024, 'CHZ': 121.65103726531375, 'DAVIES': 1.486593786092879, 'grupos': array([ 3,  3,  3, 12,  6,  6, 12,  6,  5,  0,  6,  5,  7,  5,  0,  0,  7,\n",
            "        7,  7,  0,  9,  9,  8, 11,  2,  2,  2, 11, 11, 13, 13,  4, 10, 14,\n",
            "       10, 10, 14,  1,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.2541428571428566, 'isoG': 4, 'SC': 0.2437323110747109, 'CHZ': 402.16233298221226, 'DAVIES': 0.4920326413124679, 'grupos': array([ 2,  2,  2,  2,  2,  2,  1,  1,  1,  1,  1, 13, 13, 13, 13, 13,  3,\n",
            "        3,  3,  3,  3,  3,  3,  4,  4,  4,  4, 12, 12, 12, 12, 12,  7,  7,\n",
            "       12,  7,  0,  8,  4,  4,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n",
            "        0,  8,  0,  9,  8, 14,  8,  8, 10,  6,  6,  6, 11,  6,  6,  6,  6,\n",
            "        6,  6,  6,  6,  6,  5,  5,  5,  5,  6,  5], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.3373452380952386, 'isoG': 2, 'SC': 0.5384225703639685, 'CHZ': 1187.7357974052109, 'DAVIES': 0.5531204096929729, 'grupos': array([ 5,  3,  3,  3,  0,  3,  8,  5,  3,  0,  3,  3,  3,  0,  5,  5,  5,\n",
            "        5,  5,  3,  3,  0,  3,  9,  9, 13,  2,  2,  2,  2,  2,  7,  7,  7,\n",
            "        2,  7, 14, 14,  4,  4,  4, 12, 12, 10, 10, 12, 10,  6,  6,  6,  6,\n",
            "        6, 11, 11, 11, 11, 10,  6,  6, 11,  1,  1,  1,  1,  1,  1,  1,  1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.16533333333333333, 'isoG': 13, 'SC': 0.1504166666666625, 'CHZ': 297.06577620967755, 'DAVIES': 0.14983727470575467, 'grupos': array([ 0,  0,  0,  0,  0, 12,  0, 13, 14,  4,  4,  4,  4,  4,  9,  6,  3,\n",
            "        2,  5,  8,  1,  7, 10, 11], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.8364523809523801, 'isoG': 2, 'SC': 0.1906369656408867, 'CHZ': 712.5575028285031, 'DAVIES': 1.3085872850008047, 'grupos': array([ 6,  6,  6,  6, 12, 12, 10, 14, 14,  2,  2, 14,  2, 14,  2,  4, 13,\n",
            "       13,  4,  4, 11,  4,  4, 11,  8, 11,  0,  5, 13,  5,  8,  5,  5,  9,\n",
            "        9,  5,  1,  1,  1,  1,  3,  3,  3,  7,  7,  3,  7,  7,  7,  7,  7,\n",
            "        3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.7106190476190468, 'isoG': 5, 'SC': 0.23006038220582056, 'CHZ': 217.28008277075588, 'DAVIES': 3.0472861878185564, 'grupos': array([ 2,  2,  2,  2,  2,  4,  7,  7,  4,  4,  1,  5,  5,  5,  5,  5,  5,\n",
            "        1,  5,  5,  9,  1,  1,  9,  9,  9,  4, 12,  4,  4, 13,  4,  3,  3,\n",
            "        3,  8,  8, 14, 11, 10,  0,  6,  8, 11, 11,  6,  6], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 18.748333333333335, 'isoG': 10, 'SC': -0.30945107134307126, 'CHZ': 19.276642772286838, 'DAVIES': 4.463472741347305, 'grupos': array([ 0,  5,  0,  0,  4, 14,  4, 11,  3, 13,  3, 12,  6,  9,  7, 10,  2,\n",
            "        1,  7,  7,  2,  8], dtype=int32)}\n",
            "SpectralClustering RAW 15"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.4430000000000003, 'isoG': 8, 'SC': 0.3619695375711246, 'CHZ': 727.5087190801472, 'DAVIES': 0.24804736709501127, 'grupos': array([ 0,  0,  0,  0,  0, 12, 14,  0, 13, 14,  6, 13, 14, 13, 12, 12,  0,\n",
            "        7,  1,  0,  8,  5,  3, 10,  0,  0,  2, 11, 11, 11,  4,  4,  4,  9,\n",
            "        9,  4,  4,  4,  4,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 8.214166666666662, 'isoG': 9, 'SC': 0.09831349206350885, 'CHZ': 11.084237633878754, 'DAVIES': 1.1914999865519198, 'grupos': array([ 1,  5,  4,  4, 10,  1,  0,  1,  1,  4,  9,  8,  4,  3,  2,  2,  2,\n",
            "        2,  7,  7, 13,  7, 13, 14,  7,  3, 11, 13,  6,  3, 12, 13],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.005000000000000009, 'isoG': 12, 'SC': 0.19841269841269843, 'CHZ': 13.122448979591793, 'DAVIES': 0.19619047619047014, 'grupos': array([ 9, 12,  1,  2, 11, 14, 13, 11,  5, 11, 11,  0,  5,  6,  5, 10,  4,\n",
            "        8,  7,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 11.524103174603182, 'isoG': 0, 'SC': 0.5385600505464047, 'CHZ': 1398.374587271482, 'DAVIES': 0.47397123427216264, 'grupos': array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  7,  7,  7,  7,\n",
            "        7, 12, 12, 12, 12,  3,  3,  3,  3,  3,  3,  3,  9,  9,  9,  9,  9,\n",
            "        4,  4,  4,  4,  4,  4,  4, 13, 13, 13, 13, 13,  5,  5,  5, 11, 11,\n",
            "        5,  5,  5,  5,  5,  5, 11, 11, 11,  6,  6,  6,  6,  6, 10, 10, 10,\n",
            "       10, 14, 14, 14, 14,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,\n",
            "        2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.6552380952380953, 'isoG': 3, 'SC': 0.24874347616460754, 'CHZ': 437.440658796918, 'DAVIES': 0.7775527735060442, 'grupos': array([ 0,  0,  0,  7,  3,  8, 11,  4,  3,  3,  8,  8, 11,  7,  0,  8,  4,\n",
            "       11,  7,  7,  0,  0,  0, 14, 14, 10,  5,  9,  9,  6,  6,  2,  2,  6,\n",
            "        6,  2,  1, 13,  1,  2,  2,  1,  1, 12, 12, 12,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 9.87353571428572, 'isoG': 2, 'SC': 0.2474680136931969, 'CHZ': 110.369079926182, 'DAVIES': 3.8972292315095682, 'grupos': array([ 3,  3,  4,  4,  4,  4,  4,  4, 12, 12,  4, 12, 12, 14,  9,  9,  9,\n",
            "        9,  2,  2,  2,  2, 11,  8,  8, 10,  1,  1,  1,  1,  7,  2,  2,  2,\n",
            "        8,  1,  1,  2,  1,  1, 10,  7,  7, 13, 13,  0,  0,  6,  6,  6,  6,\n",
            "        0,  6,  5,  5,  5,  5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.22749999999999984, 'isoG': 12, 'SC': -0.34722222222222393, 'CHZ': 156.3261381475668, 'DAVIES': 316354.6667478324, 'grupos': array([ 1,  9,  6,  1,  1,  5,  4, 10,  0,  7,  8,  2,  2,  2,  2, 13,  2,\n",
            "       12, 11,  3, 14,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.03500000000000011, 'isoG': 10, 'SC': -0.03750000000002109, 'CHZ': 14.025510204081593, 'DAVIES': 0.994444444444163, 'grupos': array([ 1,  1,  8,  0,  0,  9,  2, 14,  6,  5, 13,  3,  3, 10, 11,  7,  9,\n",
            "       12,  4,  2], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.9991666666666654, 'isoG': 4, 'SC': -0.16430756495790247, 'CHZ': 42.20853051516567, 'DAVIES': 2.820124670650081, 'grupos': array([ 1,  1,  1, 12, 14,  6,  8,  6, 11,  7,  7,  0,  8,  3,  9,  3,  9,\n",
            "        9,  0,  2,  0,  0,  3, 10, 13,  4,  4, 10, 13,  4,  4,  5,  5,  5],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.6541904761904773, 'isoG': 2, 'SC': 0.3994746204620643, 'CHZ': 897.6427898097004, 'DAVIES': 0.6505594757903168, 'grupos': array([ 1,  1,  1,  1,  1,  1,  9,  9,  9,  1,  9, 13,  4,  4,  4,  4,  5,\n",
            "        5,  5, 12, 12,  5,  5, 12, 12,  2,  2,  2,  2,  2,  2,  0,  0,  6,\n",
            "        0,  0, 10, 10, 10,  0,  0,  6,  0,  6, 11, 11, 11, 11, 11, 14,  7,\n",
            "        7,  7,  3,  3,  3,  3,  3,  3,  3,  8,  8,  8,  8,  8,  8,  8],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.450571428571426, 'isoG': 1, 'SC': 0.23307149356057633, 'CHZ': 267.6280914623776, 'DAVIES': 1.1673931973260459, 'grupos': array([ 2,  2,  2,  4,  4,  4,  4,  6,  6,  4,  4,  6,  6, 14,  8,  8,  8,\n",
            "        0,  0,  7, 13,  1,  9,  1,  9,  9,  8,  0, 10, 10,  0, 10,  7,  7,\n",
            "        7,  7,  7,  7, 13, 13,  1,  1,  1, 13,  5,  5,  5,  5, 12, 11, 12,\n",
            "       12,  3,  3, 11,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 7.814785714285717, 'isoG': 1, 'SC': 0.23802898582803098, 'CHZ': 315.4787892260744, 'DAVIES': 1.4893284989824167, 'grupos': array([ 0,  0,  0,  0,  0,  0,  1,  7,  1,  1,  1,  7, 13,  7,  7, 13, 13,\n",
            "       13, 11,  3,  3,  6,  6,  2,  2,  6, 14,  6, 14, 14,  9, 12, 12,  9,\n",
            "        4,  4,  4,  3,  3,  3,  2,  2,  8,  5,  5,  8,  8,  8,  8,  5,  8,\n",
            "        8, 10, 10, 10, 10], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.4895436507936526, 'isoG': 8, 'SC': -0.019008593734059907, 'CHZ': 108.01426760056566, 'DAVIES': 2.274870202752735, 'grupos': array([ 3,  3,  3,  3, 14,  2,  6, 11, 12, 13,  9, 10, 12,  0, 12,  0,  0,\n",
            "        4,  0, 12,  0,  0,  4,  0,  4,  0,  5,  5,  7,  7,  7,  7,  7,  7,\n",
            "        7,  8,  1,  1,  1,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.9591666666666675, 'isoG': 9, 'SC': 0.016117860633990993, 'CHZ': 220.7609812345104, 'DAVIES': 2.0202821869476493, 'grupos': array([ 5,  5,  5,  5,  5,  5,  6, 12, 13, 11,  0,  2, 10,  6,  6,  1,  1,\n",
            "        1,  1,  3,  3,  7,  8, 14, 14,  3,  4,  9,  9, 14, 14],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.280916666666667, 'isoG': 0, 'SC': 0.6604855853668552, 'CHZ': 6776.826281440768, 'DAVIES': 0.44591025220388214, 'grupos': array([ 5, 11,  5, 12, 11, 12,  6,  4,  4,  4,  4,  6,  6, 12, 12, 11, 11,\n",
            "        5,  5, 11,  5,  5,  5,  5,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n",
            "        9,  9, 13, 13, 13, 13,  0,  0, 14, 14, 14, 14, 14,  1,  1,  1,  1,\n",
            "        1,  1,  1,  1, 10, 10,  2,  8,  8,  7,  7,  8,  8,  2,  2,  2,  2,\n",
            "        2,  2,  2,  2,  2, 10, 10, 10], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "Error con SpectralClustering para CHL: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 15 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 14.573333333333334, 'isoG': 7, 'SC': -0.2795506176556508, 'CHZ': 30.05392506145096, 'DAVIES': 5.810337450113552, 'grupos': array([12, 13, 13,  1,  1,  1, 13, 12, 13,  1,  0,  2,  2,  4,  2,  4,  6,\n",
            "        6,  9,  6, 14,  3,  3,  6,  7, 10,  8, 11,  3,  5,  5],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 1.6387500000000004, 'isoG': 9, 'SC': 0.472867442096924, 'CHZ': 62.37848697831535, 'DAVIES': 0.20878122181223344, 'grupos': array([ 7,  2,  2,  2,  2,  2,  7,  2,  1,  1,  1,  1,  1,  1,  1,  1,  6,\n",
            "       11, 13,  5,  8, 12,  5, 10, 14,  3,  3,  3,  0,  4,  9,  9],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.879999999999997, 'isoG': 6, 'SC': -0.0010005945523070621, 'CHZ': 19.19196428571429, 'DAVIES': 2.9120975848355837, 'grupos': array([ 1,  8,  8, 11, 13,  3, 14, 10, 12,  3,  9,  4,  4,  3,  9,  8,  0,\n",
            "        0,  5,  2,  6,  5,  5,  2,  2,  5,  6,  5,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 4.329166666666666, 'isoG': 2, 'SC': 0.09714186737310612, 'CHZ': 139.5505486044274, 'DAVIES': 3.8119403262857547, 'grupos': array([14, 14, 14,  4,  5,  5,  5,  4, 13, 13,  5,  0,  0, 13, 12,  7,  8,\n",
            "        2,  8,  3,  8,  6,  6, 10,  3,  3, 10,  2,  2,  8,  8,  2,  2,  8,\n",
            "       10,  6,  3, 11, 11,  1,  1,  1,  9,  1,  1,  9,  9,  9,  9,  9],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.653333333333335, 'isoG': 13, 'SC': 0.0064703638892633815, 'CHZ': 4.779272301356401, 'DAVIES': 3.087056432932148, 'grupos': array([ 0,  7,  6,  8, 11,  9,  7, 14,  2, 12, 13,  7,  3,  4,  5, 10,  1,\n",
            "        1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 15 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 15, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 6.880499999999995, 'isoG': 9, 'SC': -0.030822686465368412, 'CHZ': 29.308254406575752, 'DAVIES': 2.8391942030011723, 'grupos': array([ 2,  2,  2,  2,  2,  0, 13,  9,  7,  4,  6,  1,  4,  4, 12,  1,  6,\n",
            "       11, 14,  4,  8,  3, 12, 10,  5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.534750000000001, 'isoG': 2, 'SC': 0.1377328075329627, 'CHZ': 353.05819040566064, 'DAVIES': 4.655833126936871, 'grupos': array([ 9,  9,  8,  3,  3,  8,  8,  8,  3, 19,  3, 19, 17, 17, 17, 17, 14,\n",
            "        1, 14, 18,  1, 18, 15,  6,  6, 14, 14,  1,  6, 11, 11, 11,  6,  0,\n",
            "        0, 12,  0, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13,  4,  4,  4,\n",
            "        4,  4, 16,  2,  2,  2,  2,  7,  7, 10, 10, 10,  5,  5,  5,  5,  5,\n",
            "        7, 10,  7, 10, 10], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.9974999999999983, 'isoG': 2, 'SC': -0.12954500408161662, 'CHZ': 96.541344675705, 'DAVIES': 3.2599874686953285, 'grupos': array([ 1,  1,  1,  1,  1, 17,  1, 17, 17, 18, 18,  2,  0,  0,  2,  2, 15,\n",
            "       15, 12,  6,  6, 12, 15, 11,  6,  6,  9, 19, 11, 14, 16, 19, 14, 14,\n",
            "       10,  7,  7, 10,  3,  7,  8,  3,  3,  8,  4, 13, 13,  5,  4,  4, 13,\n",
            "        5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.4475000000000002, 'isoG': 16, 'SC': -0.04545071205416575, 'CHZ': 93.623478862953, 'DAVIES': 0.8267513227514092, 'grupos': array([17,  3,  3,  3,  1,  3,  3,  0,  8, 12, 11, 19,  4,  9,  6, 10,  5,\n",
            "        5,  5,  5, 14, 16,  2, 18,  2, 15,  2,  7, 13, 15,  2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 15.640833333333333, 'isoG': 4, 'SC': 0.23741150552296672, 'CHZ': 121.58139260987464, 'DAVIES': 2.0035467448988715, 'grupos': array([ 3,  4,  4,  4,  4,  2,  4,  2,  4,  4,  4,  3,  3,  3, 12,  0, 13,\n",
            "       13, 13, 13,  0, 12, 12,  0, 12,  0, 12,  1, 17, 17, 17, 12,  1,  1,\n",
            "        1, 12,  9,  9,  9,  9,  9,  9, 10, 10,  7, 16, 10, 12, 16, 18, 14,\n",
            "       15, 19, 19,  5,  5,  5,  5,  5,  6,  6, 11,  6,  6,  5, 11, 11, 11,\n",
            "        8,  8,  8,  8], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 4.301416666666665, 'isoG': 11, 'SC': -0.07448559810771935, 'CHZ': 186.67321406935417, 'DAVIES': 1.2118436159775647, 'grupos': array([ 9, 17, 11, 10,  4,  5,  5,  5,  5, 14,  8,  5, 12, 19, 15,  8, 17,\n",
            "       17,  1,  1, 13,  0,  0,  0,  0,  0, 18,  3,  3,  3,  6,  6,  3,  6,\n",
            "        6, 16,  2,  2,  7, 16,  2,  2,  2,  2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 8.182499999999994, 'isoG': 8, 'SC': -0.188319677177407, 'CHZ': 54.5108754001743, 'DAVIES': 237271.86254915167, 'grupos': array([ 7,  7, 10,  3,  3, 10,  1, 14, 11,  3,  3, 10,  5,  8,  5,  5,  5,\n",
            "        8,  8,  6,  6,  6, 16, 13, 18,  6, 15, 16, 13,  9,  4,  9, 13, 19,\n",
            "        9,  2,  2, 16, 12,  0,  2,  2,  0,  0,  0, 17, 17], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.334583333333333, 'isoG': 2, 'SC': 0.24775813008077538, 'CHZ': 627.5264303824064, 'DAVIES': 1.9241371579496314, 'grupos': array([18, 10, 10, 10, 14,  2, 14, 10,  2,  2, 10,  2, 11, 11, 16, 16,  6,\n",
            "        6,  6,  7,  7, 15,  7,  7,  7, 15, 15, 19, 15,  0,  1, 12,  3,  3,\n",
            "        3,  3,  3,  3,  3,  3,  1,  1,  8, 12,  8,  8,  0,  0,  8, 12, 12,\n",
            "        1,  1,  5,  5, 12,  0,  5, 13, 13, 13, 13, 17,  9,  9,  9, 17,  4,\n",
            "        4,  9,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 5.909333333333333, 'isoG': 1, 'SC': 0.039664366239619935, 'CHZ': 98.16193235797078, 'DAVIES': 4.802909798254868, 'grupos': array([ 7,  7,  7,  7,  2,  9,  2,  9, 14,  4,  4,  9, 14,  4, 15, 15, 17,\n",
            "       15, 17, 19, 19,  5,  5, 18,  6, 10, 10,  3, 11,  5,  5, 18, 18, 18,\n",
            "        6,  6,  0,  3, 11,  0,  6, 11,  3, 16, 13, 13, 13,  8, 12, 13, 13,\n",
            "        8,  8, 12, 12,  8,  8,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 21.43583333333333, 'isoG': 7, 'SC': -0.31363197388045216, 'CHZ': 22.034217696932, 'DAVIES': 4.682246032854564, 'grupos': array([ 9,  9, 10,  7, 16, 10,  7, 12,  4, 11, 17,  4,  6, 12, 17,  5, 18,\n",
            "        6,  6, 12,  5,  5, 11,  1, 11, 11, 11,  1,  1,  2,  2,  1,  1,  3,\n",
            "        8,  0,  3, 19, 14, 13, 14, 14, 14, 15], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 26.38794949494948, 'isoG': 12, 'SC': 0.11979570822382692, 'CHZ': 30.965955364648686, 'DAVIES': 1.3299705053205235, 'grupos': array([ 6,  6,  6,  6,  6,  6,  6,  6,  0,  2,  2,  2,  2,  2,  2,  2, 17,\n",
            "       17, 17, 17,  7,  7,  7,  7,  7,  7,  7,  3,  3,  3,  3,  3,  3,  3,\n",
            "        3,  3,  5,  5,  7,  7,  7,  7,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n",
            "       12,  4, 19,  1, 10, 14,  5,  8, 16,  9, 13, 11, 15,  0,  0,  0,  0,\n",
            "        0,  0,  0,  0,  0, 18, 18, 18, 18,  0, 18], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.030559523809523, 'isoG': 3, 'SC': 0.22834606175716593, 'CHZ': 521.1579199668432, 'DAVIES': 1.5783981056532828, 'grupos': array([ 3,  2,  0,  0,  9,  0,  6,  3,  0,  9,  0,  0,  0,  9,  3,  3,  3,\n",
            "        3,  3,  0,  0,  9,  0, 14, 14, 13, 12, 15, 13, 15, 15, 15,  4,  4,\n",
            "       15,  8,  7,  8,  7,  7, 19, 16, 16, 19, 19, 10, 18,  5, 11, 11,  5,\n",
            "        5, 17, 17, 17, 11, 18, 10, 17, 17,  1,  1,  1,  1,  1,  1,  1,  1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.13166666666666665, 'isoG': 17, 'SC': -0.041666666666666435, 'CHZ': 122.21385742838112, 'DAVIES': 0.8126479131949879, 'grupos': array([19, 17,  1, 16, 14, 15, 19, 18,  6,  0,  3,  3,  3,  6,  5, 10, 11,\n",
            "       13,  7, 12,  9,  8,  4,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.6709523809523805, 'isoG': 6, 'SC': 0.06251142020374244, 'CHZ': 226.46951332778758, 'DAVIES': 3.243159413688261, 'grupos': array([10, 10, 10, 10,  9,  1,  8, 14, 11,  9,  1, 15, 15, 15,  9, 12, 15,\n",
            "       19, 12, 12,  6, 12, 12,  6,  3,  6,  5, 16, 19, 16,  3,  7,  7, 18,\n",
            "       18, 16,  4,  4,  4,  4,  4, 13, 17,  2,  2, 13,  2,  2,  2,  2,  2,\n",
            "        0], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8179999999999996, 'isoG': 11, 'SC': 0.2786724018576551, 'CHZ': 284.0439741866241, 'DAVIES': 1.0323148148152625, 'grupos': array([ 7,  7,  7,  7,  7, 18,  6,  6,  3,  3, 14, 13,  9,  9,  9, 11,  0,\n",
            "       14, 16,  9,  5, 14, 14,  5,  5,  5,  3, 17,  3,  3, 19,  3, 15, 15,\n",
            "       15,  1,  1, 10,  8,  4, 12,  2,  1,  2,  2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 24.64999999999999, 'isoG': 18, 'SC': -0.13388061214148442, 'CHZ': 3.061420654716268, 'DAVIES': 3.595621387348949, 'grupos': array([ 8, 14,  5,  9, 15,  4, 17,  1, 11, 19,  4,  3,  2, 18, 12,  3,  0,\n",
            "        6, 13, 16,  7, 10], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 166.9014423076922, 'isoG': 16, 'SC': -0.36301444436464364, 'CHZ': 2.6285145306988578, 'DAVIES': 0.7868625663274695, 'grupos': array([ 0,  0,  0,  0,  0, 19, 13,  6, 18,  4,  5,  4, 14, 17, 15, 16,  4,\n",
            "        2,  3,  0,  8,  7, 10, 11,  0,  0,  1, 12, 12, 12,  4,  4,  4,  9,\n",
            "        9,  4,  4,  4,  4,  4,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.0483333333333334, 'isoG': 16, 'SC': 0.10714285714286184, 'CHZ': 1086.4859346642452, 'DAVIES': 0.5202380952381026, 'grupos': array([ 1,  0,  3,  3, 19, 14, 17,  8,  8,  3, 16, 13,  3,  5,  2,  2,  2,\n",
            "        2, 15, 15, 10, 15,  9, 18, 15,  6, 15, 11, 15,  7, 12,  4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.0, 'isoG': 19, 'SC': 0.0, 'CHZ': 1.0, 'DAVIES': 0.0, 'grupos': array([18, 19, 17, 16, 10, 12, 19,  0,  1, 15, 14,  4,  2,  8,  7,  9, 13,\n",
            "        5, 11,  3,  6], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 13.15750793650793, 'isoG': 0, 'SC': 0.28990876071051264, 'CHZ': 840.2101337155044, 'DAVIES': 1.3722165488783078, 'grupos': array([ 2,  2,  2,  2, 12,  2,  2,  2, 12, 12, 12,  3,  3, 15,  3,  3, 15,\n",
            "       15, 19, 19, 11,  9, 11, 11, 11,  9,  9,  4,  4, 18, 18,  4,  8,  8,\n",
            "       14, 14, 14,  8,  8, 14, 14,  0,  0, 16, 16, 16,  6,  6,  6, 13, 13,\n",
            "        6,  6,  6,  6,  6,  6, 13, 13, 13, 10, 10, 17, 17,  1, 17,  1,  1,\n",
            "       17,  1,  5,  5,  5,  5,  5,  5,  5,  5,  7,  7,  7,  7,  7,  7,  7,\n",
            "        7,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.4158333333333333, 'isoG': 9, 'SC': 0.05933772449081557, 'CHZ': 125.09852709617076, 'DAVIES': 1.3461792651794835, 'grupos': array([ 7,  4,  5,  2,  9,  0, 16,  9,  9,  9,  0,  0, 11,  2,  4,  9,  0,\n",
            "        2,  2,  2,  4,  4,  7, 18,  7,  4,  8, 10, 10, 17, 17,  1, 15, 17,\n",
            "        6, 19,  3, 14,  3,  1, 19, 12,  3, 12, 12, 12, 13], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 11.982333333333335, 'isoG': 2, 'SC': 0.001555984350074283, 'CHZ': 59.03583231502953, 'DAVIES': 3.006911144542009, 'grupos': array([ 7,  7, 12, 12, 12, 12, 10, 10,  2,  2, 12, 10,  2,  0, 14, 14,  1,\n",
            "       17,  1, 11, 17,  1,  5,  5, 19, 18,  4,  4, 13, 13, 16, 11,  1,  1,\n",
            "        5,  4,  4, 17, 13,  4, 18, 16,  3, 16,  8,  3,  3,  8,  8,  9,  9,\n",
            "        6,  8,  9,  6, 15, 15, 15, 15], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 7.293333333333333, 'isoG': 18, 'SC': -0.19178113553114481, 'CHZ': 1.3929447705186184, 'DAVIES': 2.316220324251053, 'grupos': array([13,  0,  5,  7, 13,  6,  8,  8, 19,  8,  3, 16, 18, 17, 11,  1, 13,\n",
            "       12, 15, 14,  2,  4, 10,  9], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "Error con SpectralClustering para PRT: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.544166666666664, 'isoG': 12, 'SC': -0.1962379447800407, 'CHZ': 12.605379994016253, 'DAVIES': 3.005191820562559, 'grupos': array([ 1,  1,  1,  7, 10,  5, 10,  9,  8,  7,  7, 15, 12, 17,  8, 19,  8,\n",
            "        8,  6, 16, 11, 14, 18,  2,  4,  3, 13,  2,  4,  3,  3,  0,  0,  0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.6950000000000003, 'isoG': 2, 'SC': 0.24058777287486696, 'CHZ': 583.3698415236345, 'DAVIES': 1.5789119423464313, 'grupos': array([ 2,  2,  2,  2,  2,  2, 13, 13, 13,  9,  9,  9,  8,  8,  0,  0,  0,\n",
            "        0, 16, 12, 12,  0,  0, 16, 12,  4,  4,  4,  4,  4,  4, 15, 15, 11,\n",
            "        3,  3,  6,  6,  6,  3,  3, 11,  3, 15, 14, 14, 17,  7, 14, 17, 10,\n",
            "       10, 19, 19, 18,  5,  5, 19,  5,  5,  1,  1,  5,  1,  1,  1,  1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 4.134499999999998, 'isoG': 2, 'SC': 0.03758170519739075, 'CHZ': 145.1109795205191, 'DAVIES': 2.1684017680025915, 'grupos': array([ 4,  4,  4,  5, 19, 19, 18,  5,  5, 16, 14, 18,  5, 14, 11,  2, 11,\n",
            "       15,  1, 10,  0,  7, 13,  7,  6,  6,  2, 15, 11, 11, 15, 12,  1, 10,\n",
            "        1,  0, 10,  1,  0, 13,  7,  7,  7, 13,  9,  9,  9,  9,  8, 17,  8,\n",
            "        8,  3,  3, 17,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 28.28295238095239, 'isoG': 6, 'SC': -0.10990883565414299, 'CHZ': 55.02573731725355, 'DAVIES': 2.5789774793905256, 'grupos': array([ 4,  4,  3,  4,  4,  4,  3,  0,  3,  4,  3, 16,  8,  0,  0,  8,  8,\n",
            "        8,  2, 19, 19,  9,  9, 12, 18,  9, 11,  6, 14, 14,  7, 14, 14,  7,\n",
            "       10, 10, 10,  9, 12, 17,  1,  9,  1,  1,  1, 13,  1,  1,  1,  5, 13,\n",
            "       13,  5, 15, 15, 15], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 46.75972222222223, 'isoG': 14, 'SC': -0.24663941850526808, 'CHZ': 3.732014638729476, 'DAVIES': 3.051737448589806, 'grupos': array([ 3,  3,  3,  3,  6, 11, 18, 16,  2,  2, 15, 12, 13,  0,  0, 17, 19,\n",
            "        7,  9,  4, 10,  4, 14,  1, 19,  4,  8,  8,  2,  2,  2,  2,  2,  2,\n",
            "        2,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 26.737000000000002, 'isoG': 17, 'SC': -0.16230675439027112, 'CHZ': 3.4537288419620076, 'DAVIES': 3.2172389493910885, 'grupos': array([ 4,  4,  4,  4,  4,  4,  6, 18, 16, 17,  8, 10, 12,  7, 11,  2,  2,\n",
            "        2,  2, 19, 13,  4, 14,  1,  2,  0, 15,  3,  5,  1,  9],\n",
            "      dtype=int32)}\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 2.505119047619051, 'isoG': 5, 'SC': 0.3004527588480881, 'CHZ': 511.4364000477587, 'DAVIES': 1.6729913990323635, 'grupos': array([ 0,  6,  0,  6,  6, 13, 13,  4,  4,  4,  4, 19, 13, 13, 13,  6,  6,\n",
            "        0,  0,  6,  0,  0,  0,  0,  1, 15, 15,  1,  1,  1, 15,  1, 15,  1,\n",
            "       14,  7,  7,  7, 10, 10, 10, 10, 17, 17, 17, 12,  1,  9,  9,  9,  9,\n",
            "        9, 12, 12,  9,  2,  2,  8,  3,  3,  5,  5,  3,  3,  8,  8,  8,  8,\n",
            "       11, 18, 16,  8,  8,  2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "Error con SpectralClustering para CHL: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 18.24333333333333, 'isoG': 11, 'SC': -0.4177983569062342, 'CHZ': 12.045478699725804, 'DAVIES': 6.249997594994105, 'grupos': array([ 4,  4,  4, 16,  5, 14, 13, 17,  3,  5,  3,  6, 12,  1,  6,  1,  0,\n",
            "       11, 12, 19,  6, 18, 10,  2,  9,  7, 15, 19, 10,  8,  2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 1.5467857142857153, 'isoG': 15, 'SC': 0.19308035714285027, 'CHZ': 34.41108167555809, 'DAVIES': 0.32848260025056597, 'grupos': array([ 1,  2,  2,  2,  2, 18,  1, 19,  0,  0,  0,  0,  0, 17,  0,  0, 12,\n",
            "       10, 13,  3, 14, 16,  3, 15, 11,  8,  9,  5,  4,  7,  6,  6],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 0.8866666666666674, 'isoG': 13, 'SC': -0.03048340548340267, 'CHZ': 31.805302730510434, 'DAVIES': 3.164265383581408, 'grupos': array([ 2, 15, 15,  8,  7, 14,  3,  8,  8, 11,  8,  4,  4,  6, 11, 15,  9,\n",
            "        9, 19,  1,  5, 16, 12, 17,  1, 13, 18, 10,  0, 10], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 3.632, 'isoG': 7, 'SC': -0.11000130347808103, 'CHZ': 105.35830628332948, 'DAVIES': 4.124763933582441, 'grupos': array([ 4,  4,  4, 13,  8, 14, 14, 13, 12, 19, 14,  0,  0,  7, 10,  7,  6,\n",
            "       18,  6,  2,  6,  2,  2, 11,  3,  3, 11, 18, 18,  6, 15, 18, 18, 17,\n",
            "       11,  9,  3,  9,  9, 16,  1,  1,  5,  1,  1,  5,  5,  1,  1,  5],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "Error con SpectralClustering para LVA: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 20 1 1 EU\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'EU', 'wcss': 39.89416666666666, 'isoG': 17, 'SC': -0.049452442475682465, 'CHZ': 1.8677801634759024, 'DAVIES': 3.104585861390945, 'grupos': array([ 2,  2, 10,  8, 11,  9,  7, 13,  0,  1, 12, 18, 14, 15, 19,  5,  2,\n",
            "        5, 17,  5,  4,  6,  5, 16,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.584666666666668, 'isoG': 3, 'SC': 0.2554417127246137, 'CHZ': 483.8622663112779, 'DAVIES': 1.067927051192949, 'grupos': array([ 3,  3,  6,  6,  6,  6,  6,  6, 14, 16, 14, 16, 13, 13, 13, 13, 18,\n",
            "        9, 18,  9,  9,  9, 12,  5,  5,  9,  9, 17,  5, 11, 11, 11,  5,  1,\n",
            "        1,  7,  1,  7,  1,  7,  7,  7,  7, 15,  2,  2,  2,  2,  2,  2,  8,\n",
            "        8,  8,  8, 10, 10, 10, 10,  0,  0,  0, 19, 19,  4,  4,  4,  4,  4,\n",
            "        0,  0,  0, 19, 19], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 4.188, 'isoG': 2, 'SC': 0.013575760495079145, 'CHZ': 92.0685603162103, 'DAVIES': 3.2621650717721424, 'grupos': array([ 2,  2,  2,  2,  2, 15,  2, 15, 15,  6,  6, 10, 10, 12, 10, 10, 12,\n",
            "       12,  9,  8,  8,  9, 16, 16,  8,  8,  7, 17, 13, 11,  8, 17, 11, 11,\n",
            "        3,  1,  1,  3, 19, 19,  5, 18, 18,  5, 14,  4,  4,  0, 14, 14,  4,\n",
            "        0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.28500000000000036, 'isoG': 16, 'SC': -0.06744868035190621, 'CHZ': 147.33538855628015, 'DAVIES': 0.8469235295238411, 'grupos': array([15,  2,  2,  2,  2,  2,  2, 16,  3,  7, 13,  1, 11,  5,  8, 14,  4,\n",
            "        4,  4, 12,  4, 17, 10, 18, 10,  9, 10, 19,  6,  9,  0],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.0792023809523812, 'isoG': 4, 'SC': 0.25214180487024174, 'CHZ': 1799.0019455331988, 'DAVIES': 1.3999869839257548, 'grupos': array([12,  3,  3,  3,  3,  6,  3,  6,  3,  3,  3, 12, 12, 12,  2, 14,  5,\n",
            "        5,  5,  5, 14,  2,  2, 14,  2, 14,  2,  0,  1,  1,  1,  2,  1,  0,\n",
            "        1,  2, 13, 13, 15, 13, 13, 13,  7,  7, 15, 10,  7, 18, 10, 17,  8,\n",
            "       16,  4,  4,  4,  4,  4,  4,  4, 11, 11, 19, 11, 11,  9, 19, 19, 19,\n",
            "        9,  9,  9,  9], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.7896428571428564, 'isoG': 11, 'SC': 0.06508063168819275, 'CHZ': 212.06737061212115, 'DAVIES': 1.1226770270967754, 'grupos': array([ 8,  5, 10, 11, 17,  2,  2, 13,  2, 12, 13,  2, 18, 19,  9,  5,  5,\n",
            "        5,  4,  4,  7,  3,  3,  3,  3,  3,  3, 15, 15, 15,  1,  1, 15,  1,\n",
            "        1, 14,  0,  6, 14, 16,  6,  6,  6,  6,  6,  6], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 5.198666666666662, 'isoG': 8, 'SC': -0.15131898185715603, 'CHZ': 86.61363596546282, 'DAVIES': 2.3991545115373216, 'grupos': array([ 6,  6,  0,  0,  4,  2,  0, 13, 15, 10,  4,  2,  5, 19,  5,  5,  5,\n",
            "       19, 19,  9,  9,  9, 14,  7,  9,  9, 17, 14,  7, 11,  8, 11,  7, 18,\n",
            "       11,  3,  3,  3, 12, 16,  3,  3,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.334726190476188, 'isoG': 2, 'SC': 0.28334113748575407, 'CHZ': 627.4994281267461, 'DAVIES': 1.8176382743674395, 'grupos': array([ 8,  4,  8,  8, 14,  8, 14, 16, 16,  8,  8,  4,  4,  4, 17, 17,  5,\n",
            "        5,  5,  1,  1, 15,  1,  1,  1, 15, 15, 12, 15,  7,  2,  2,  6,  6,\n",
            "        6,  6,  6,  6,  6,  6, 19,  2, 13,  2, 13, 13,  7,  7, 13,  2,  2,\n",
            "       19, 19,  9,  9,  2,  7,  9, 18, 11, 11, 11, 10,  0,  0,  0, 10,  3,\n",
            "        3,  0,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 8.452976190476186, 'isoG': 3, 'SC': 0.09944403526852362, 'CHZ': 67.98984504427047, 'DAVIES': 2.999333229322319, 'grupos': array([ 0,  0,  0,  0, 19,  3,  3,  3, 15, 19, 19,  3, 15, 19,  8,  8, 11,\n",
            "        8, 11, 12, 12, 17,  4, 18,  1,  6,  6,  1, 16,  4,  4, 18, 18, 18,\n",
            "        4,  1,  1,  1, 16,  1,  1, 16, 10,  7,  7,  7,  7,  9, 13,  2,  2,\n",
            "       14, 14, 13, 13, 14, 14,  5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 10.264666666666667, 'isoG': 5, 'SC': -0.22021312694760756, 'CHZ': 47.38904645874904, 'DAVIES': 5.001439866318933, 'grupos': array([ 3,  3, 12, 11, 19, 12, 11,  1,  9,  7, 18,  9,  6,  1, 18,  7, 15,\n",
            "        6,  6,  1,  8,  8,  4,  2,  4,  4,  4,  2,  2,  4,  4,  2,  2, 17,\n",
            "       14, 13, 17,  0,  0,  5, 10, 10,  5, 16], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 49.02688888888889, 'isoG': 13, 'SC': -0.031730243404178994, 'CHZ': 15.233032703420314, 'DAVIES': 1.3595601991355817, 'grupos': array([ 1,  1,  1,  1,  1,  1,  8,  8,  8, 16, 16, 16, 16, 16, 16, 16, 19,\n",
            "       19, 19, 19,  8,  8,  8, 18, 18, 18, 18,  8,  8, 18,  8,  8,  8,  8,\n",
            "        8,  8,  7,  8, 18, 18, 18, 18,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n",
            "        9, 13,  3, 11, 17,  4, 12,  6, 10,  2,  0, 15, 14,  2,  2,  2,  2,\n",
            "        2,  2,  2,  2,  2,  5,  5,  5,  5,  2,  5], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.498892857142857, 'isoG': 4, 'SC': 0.1950303974491898, 'CHZ': 423.0109413779751, 'DAVIES': 1.3522363802713864, 'grupos': array([ 8,  6, 14, 14, 15, 14, 10,  8, 14, 15, 14, 14,  5, 15,  8,  8,  8,\n",
            "        8,  8,  5,  0, 15,  5, 17, 17,  2, 12,  3,  2,  3,  3,  3,  3,  3,\n",
            "        3,  7, 13,  7, 13, 19, 11, 19, 19, 11, 11, 18,  4, 16,  4,  4, 16,\n",
            "       16,  9,  9,  9,  4,  4, 18,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.16666666666666669, 'isoG': 17, 'SC': -0.03472222222222255, 'CHZ': 96.50473684210525, 'DAVIES': 0.8380311574017808, 'grupos': array([ 8, 14,  8, 13, 15,  5, 19, 16, 18, 17,  1,  1,  1,  5,  9,  6, 11,\n",
            "       10, 12,  0,  4,  7,  3,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.9574999999999991, 'isoG': 5, 'SC': -0.1732045803700009, 'CHZ': 193.0713491657231, 'DAVIES': 8.41256670382488, 'grupos': array([ 6,  6,  6,  6,  7,  3, 19, 10, 13,  7,  3,  1,  1,  1,  7,  1, 17,\n",
            "        9,  5,  5, 15,  5,  5, 15, 11, 15,  5,  4,  9,  4, 11,  4,  4,  2,\n",
            "        2,  4, 12, 12,  0,  0, 18, 14,  0,  8,  0, 14,  0, 16, 16, 16,  0,\n",
            "        8], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.7106190476190466, 'isoG': 10, 'SC': -0.025258766730349682, 'CHZ': 135.08531461734495, 'DAVIES': 2.451655117054421, 'grupos': array([ 1,  1,  1,  1,  1,  0, 12, 12,  0,  0, 13, 14,  6,  6,  6, 17, 19,\n",
            "        7, 16,  6,  2,  7,  7,  2,  2,  2,  0, 18,  0,  0, 10,  0,  4,  4,\n",
            "        4,  9,  9,  3,  5, 11, 15,  8,  9,  3,  3,  8,  8], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 24.64999999999999, 'isoG': 18, 'SC': -0.13388061214148442, 'CHZ': 3.0614206547162683, 'DAVIES': 3.595621387348949, 'grupos': array([ 6,  4, 14, 13,  9,  1, 16,  5,  0, 17,  1,  3, 19,  8,  2,  3, 18,\n",
            "       12, 11, 15, 10,  7], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 166.90126373626367, 'isoG': 15, 'SC': -0.2915858729360722, 'CHZ': 2.6285185818635806, 'DAVIES': 0.7832911377514631, 'grupos': array([ 2,  2,  2,  2,  2, 15,  6,  4, 10,  6,  5, 18, 17, 12, 16, 19,  6,\n",
            "       13,  9,  2,  7, 14, 11,  8,  4,  2,  0,  1,  1,  1,  6,  6,  6,  3,\n",
            "        3,  6,  6,  6,  6,  6,  6,  6], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.04466666666666666, 'isoG': 16, 'SC': 0.12116477272727735, 'CHZ': 1175.7269245875884, 'DAVIES': 0.46308080808058383, 'grupos': array([13, 14,  2,  2, 16, 18, 12,  5,  5,  2, 11, 15,  2,  5,  4,  4,  4,\n",
            "        4,  1,  1, 17,  1,  8,  1,  1,  7,  0,  6, 19, 10,  3,  9],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.0, 'isoG': 19, 'SC': 0.0, 'CHZ': 1.0, 'DAVIES': 0.0, 'grupos': array([18, 17, 15, 15, 16, 11,  2, 19,  7, 14, 13, 10,  3,  6,  5, 12,  9,\n",
            "        0,  8,  4,  1], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 10.765698412698423, 'isoG': 0, 'SC': 0.40111714330901316, 'CHZ': 1027.6743076925964, 'DAVIES': 0.9505634868923101, 'grupos': array([ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 15, 15, 15, 12,  7,  7, 12,\n",
            "       12, 13, 13, 14, 14, 14, 14, 14,  8,  8,  0,  0, 17,  8,  0, 17, 17,\n",
            "        6,  6,  6,  6,  6,  6,  6, 11, 11,  5,  5,  5,  1,  1,  1, 10, 10,\n",
            "        1,  1,  1,  1,  1,  1, 10, 18, 18,  9,  9,  9,  9,  9,  4,  9,  9,\n",
            "        4,  4,  4, 19, 19, 19, 19, 19, 19,  3,  3,  3,  3, 16, 16, 16, 16,\n",
            "       16, 16, 16], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.4766666666666657, 'isoG': 9, 'SC': 0.07139119155077348, 'CHZ': 119.88637736698028, 'DAVIES': 177950.3202915347, 'grupos': array([ 9,  6,  9,  3,  2, 10, 17,  5,  2,  2, 10, 10, 19,  3,  6, 10,  5,\n",
            "        3,  3,  3,  3,  6,  9, 15,  9,  6,  7, 16, 18, 11, 13, 12,  1, 11,\n",
            "       11,  8,  0, 14,  0, 12,  8,  4,  0,  4,  4,  4, 12], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 10.008833333333337, 'isoG': 3, 'SC': -0.05167234085041933, 'CHZ': 71.08100076570778, 'DAVIES': 2.0069221897200373, 'grupos': array([ 2,  2, 18,  4,  4,  4, 18, 18, 10, 10, 18, 10, 10, 13,  8,  8,  8,\n",
            "       15,  8,  1, 15,  9, 17,  9, 16, 14,  7,  7,  5,  5, 11,  1,  8,  9,\n",
            "        9,  7,  7, 17,  5,  7, 14, 11,  0, 12,  6,  0,  0,  6,  6, 12, 12,\n",
            "       19,  6, 12,  3,  3,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 11.865000000000004, 'isoG': 18, 'SC': -0.2138872764017922, 'CHZ': 0.7751162567184922, 'DAVIES': 1.4419234055420393, 'grupos': array([10,  5, 11, 10,  9,  7, 19, 17,  3, 13, 13,  6, 10,  2, 12,  4, 18,\n",
            "       15, 10,  1, 14,  8, 16,  0], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "Error con SpectralClustering para PRT: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.3304999999999985, 'isoG': 13, 'SC': -0.15955800221828007, 'CHZ': 19.553678737272534, 'DAVIES': 3.863833388834742, 'grupos': array([ 2,  2,  2,  4,  8, 14,  8, 18,  7,  6,  6, 19, 12, 10,  7, 16,  7,\n",
            "        7, 13, 17, 11, 15,  0,  7,  3,  5,  9,  1,  3,  9,  9,  1,  1,  1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.6542023809523814, 'isoG': 3, 'SC': 0.3196783571401891, 'CHZ': 597.8185095098673, 'DAVIES': 1.27878052503033, 'grupos': array([ 1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  0, 15,  7,  7,  7, 18, 18,\n",
            "       18, 10, 11, 11, 18, 16, 10, 11,  6,  6,  6,  6,  6,  6, 13, 13, 17,\n",
            "        8,  8, 12, 12, 12,  8,  8, 17,  8, 13,  3,  3,  5,  3,  3,  5,  4,\n",
            "        4, 19, 19, 14,  2,  2,  2,  2,  2,  2,  2,  2,  9,  9,  9,  9],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.598666666666664, 'isoG': 3, 'SC': 0.060362625206403044, 'CHZ': 167.01547188613924, 'DAVIES': 2.685187124703252, 'grupos': array([ 6,  6,  6,  2,  2,  2, 10,  2,  2,  2, 14, 10, 12, 14,  1,  5,  1,\n",
            "        5, 16, 11, 15,  9,  7,  9,  4,  4,  5,  5,  1,  1, 19, 17, 18, 17,\n",
            "       18, 15, 17, 11, 15,  7,  9,  9,  9,  7,  0,  0,  0,  0,  3, 13,  3,\n",
            "        3,  8,  8, 13,  8,  8,  8], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 37.71666666666667, 'isoG': 3, 'SC': -0.02630016686220819, 'CHZ': 40.788755693918844, 'DAVIES': 2.554716564255679, 'grupos': array([ 1,  1,  7,  1,  1,  1,  7,  9,  7,  1,  7, 19, 16,  9,  9, 16, 16,\n",
            "       16,  6,  6,  6, 18, 18, 13,  0,  0, 10, 17, 14, 14,  8,  4,  4,  8,\n",
            "       12, 12, 12, 11, 13, 13, 11,  0, 18,  3,  3,  5, 18, 18, 18,  2,  5,\n",
            "        5,  2, 15, 15, 15], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 32.533722222222224, 'isoG': 14, 'SC': -0.18613711412490197, 'CHZ': 5.939264728734457, 'DAVIES': 2.614626126919517, 'grupos': array([ 8,  8,  8,  8,  7, 12,  0, 19,  3,  3, 17, 14,  6,  1, 15,  6, 15,\n",
            "        5, 16,  4,  6,  9, 10,  2, 18,  6, 11, 11,  3,  3,  3,  3,  3,  3,\n",
            "        3, 13,  1,  1,  1,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW "
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 26.740000000000002, 'isoG': 17, 'SC': -0.2609359197727788, 'CHZ': 3.4532764100760254, 'DAVIES': 7.287121212123803, 'grupos': array([ 5,  5,  5,  5,  5,  5, 10, 13,  5, 17,  8,  9,  0,  7, 15, 16,  1,\n",
            "        1,  1, 11, 18, 19,  5,  1,  4, 14,  2,  3,  6,  4, 12],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 2.537119047619049, 'isoG': 4, 'SC': 0.27328800109118917, 'CHZ': 504.948615957986, 'DAVIES': 1.239058792759268, 'grupos': array([ 8, 17,  8,  2, 17,  2,  7,  9,  9,  9,  9,  7,  7,  2,  2, 17, 17,\n",
            "        8,  8, 17,  8,  8,  2,  8, 11,  1,  1, 11, 11, 11,  1, 11,  1, 11,\n",
            "       15,  4,  4,  4, 10, 10, 10, 10, 14, 14, 12, 12, 11,  0,  0,  0,  0,\n",
            "        0, 12, 12,  0,  5,  5,  6, 13, 13,  3,  3, 13, 13,  6,  6,  6,  6,\n",
            "       19, 18,  6,  6, 16,  5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "Error con SpectralClustering para CHL: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 20 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 7.1633333333333375, 'isoG': 12, 'SC': -0.36426564027372194, 'CHZ': 31.572510924258196, 'DAVIES': 111849.08756462226, 'grupos': array([13, 13, 13,  5, 19, 11,  3, 10,  7,  6,  7,  8,  6,  9,  8,  9, 17,\n",
            "       12, 15,  0, 16,  4,  4,  2,  2, 18,  1, 14,  4,  1,  2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 1.9496428571428575, 'isoG': 15, 'SC': 0.08034217942790078, 'CHZ': 27.170172867596722, 'DAVIES': 0.5693883673836063, 'grupos': array([ 1,  6,  6,  6,  6,  6,  1,  6,  9,  0, 15,  0, 18,  6,  0,  0, 16,\n",
            "       11, 13,  2,  8, 14,  2, 19, 17,  5, 12, 10,  7,  4,  3,  3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 0.7696666666666674, 'isoG': 14, 'SC': -0.3080643539467129, 'CHZ': 36.720156823414044, 'DAVIES': 1.0252247536934527, 'grupos': array([11,  4,  9, 11, 12,  0,  7, 11,  1,  5, 11, 13, 13, 11,  5,  4,  6,\n",
            "        6, 19,  6,  8, 10, 17, 15, 14, 18, 16,  3,  2,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 3.609666666666668, 'isoG': 5, 'SC': -0.06840502430645161, 'CHZ': 106.01993671962708, 'DAVIES': 7.936764705900496, 'grupos': array([ 5,  5,  5,  7, 17, 16, 16,  7,  6,  9, 16, 12, 12, 10, 19, 10,  8,\n",
            "        2,  8, 13, 15, 14,  0,  0, 15, 13,  0, 18,  2,  8,  2,  2,  2,  2,\n",
            "        0, 14,  1,  1,  1, 11, 11, 11,  4, 11, 11,  4,  4,  3,  3,  4],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 DTW\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error con SpectralClustering para LVA: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 20 1 1 DTW\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'DTW', 'wcss': 56.67666666666666, 'isoG': 17, 'SC': -0.10248684690316259, 'CHZ': 1.2056197169195806, 'DAVIES': 8.72854786773124, 'grupos': array([ 3,  3, 18,  7, 16,  6, 17, 12, 13,  1, 14,  4, 19,  2,  3,  9,  3,\n",
            "        9,  0, 15, 10, 11,  9,  8,  5,  5,  5], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 9.178083333333337, 'isoG': 3, 'SC': 0.1265442293320601, 'CHZ': 134.25793425045327, 'DAVIES': 3.07473415297769, 'grupos': array([ 9,  9, 13,  1,  1, 13, 13, 13,  1, 18,  1, 18,  3,  3,  3,  3, 12,\n",
            "       13, 12,  8,  1,  8, 15, 10, 10, 12, 12,  6, 10, 14, 14, 14, 10, 16,\n",
            "       16,  7, 16,  7,  7,  7,  7,  7,  7,  7, 19, 19, 19, 19,  2,  2,  2,\n",
            "        2,  2, 17,  4,  4,  4,  4,  5,  5,  5, 11, 11,  0,  0,  0,  0,  0,\n",
            "        5,  5,  5, 11, 11], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 4.005499999999997, 'isoG': 2, 'SC': 0.017079093404547534, 'CHZ': 96.34495307743282, 'DAVIES': 4.552948119157565, 'grupos': array([ 5,  5,  5,  5,  5,  2,  5,  2,  2,  6,  6, 14,  8,  8, 14, 14, 12,\n",
            "       12,  3,  9,  9,  3, 10, 10,  9,  9, 17, 16, 10, 19,  9, 16,  4,  4,\n",
            "       13,  7,  7, 13, 15, 15, 18, 18, 18, 18, 11,  1,  1,  0, 11, 11,  1,\n",
            "        0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.2150000000000003, 'isoG': 16, 'SC': 0.0633756924079334, 'CHZ': 195.493544438741, 'DAVIES': 0.6351675771431639, 'grupos': array([19,  1,  1,  1,  1,  1,  1, 18,  7,  5, 15, 16,  2,  3, 14, 10,  4,\n",
            "        4,  4,  4,  0, 12,  9,  9, 13, 11,  9,  6,  8, 11, 17],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 6.938750000000006, 'isoG': 2, 'SC': 0.17032012621190418, 'CHZ': 277.49241957352405, 'DAVIES': 3.250398593384478, 'grupos': array([12,  2,  2,  2,  2,  6,  2,  6,  2,  2,  2, 12, 12, 12,  1, 11,  0,\n",
            "        0,  0,  0, 11,  1,  1, 11,  1, 11,  1, 15,  9,  9,  9,  1, 15, 15,\n",
            "       15,  1, 18, 18, 10, 18,  3, 18,  7,  7, 10, 17,  7,  4, 17, 13, 16,\n",
            "        8,  8,  8,  4,  4,  4,  4,  4, 14, 14,  5, 14, 14,  3,  5,  5,  5,\n",
            "       19,  3, 19, 19], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 29.49916666666668, 'isoG': 11, 'SC': -0.02124024315595266, 'CHZ': 26.05084242964626, 'DAVIES': 0.6174894119539924, 'grupos': array([ 8, 11, 15, 13,  9,  4,  4, 16, 16,  0, 12, 16,  6,  1, 15, 11, 11,\n",
            "       11,  5,  5,  5,  1,  1,  1,  1,  1, 19,  7,  7,  7,  3,  7,  7,  3,\n",
            "        3,  3, 18, 17, 10, 14,  2,  2,  2,  2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 5.496666666666665, 'isoG': 6, 'SC': -0.14267459589573284, 'CHZ': 81.84086388506527, 'DAVIES': 2.88742586557585, 'grupos': array([ 3,  3,  6, 13, 17, 10, 13, 12, 11, 19, 17, 10,  5,  1,  5,  5,  5,\n",
            "        1,  1,  9,  9,  9, 16,  7,  8,  0,  9, 16,  7, 14, 18, 14,  2, 18,\n",
            "       14,  2,  2, 16,  2, 15,  2,  2, 15, 15, 15,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.202749999999998, 'isoG': 3, 'SC': 0.28532547500098226, 'CHZ': 653.471835639175, 'DAVIES': 1.8571324454323026, 'grupos': array([16, 16, 16, 16,  4,  4,  4, 15, 15,  4, 16,  4,  7,  7,  7,  7,  9,\n",
            "        9,  9,  1,  1, 14,  1,  1,  1, 14, 14, 11,  0,  8,  5,  3,  2,  2,\n",
            "        2,  2,  2,  2,  2,  2, 18, 18,  5,  3,  5,  5,  8,  8,  5,  3,  3,\n",
            "       18, 18, 10, 10, 17,  8, 10, 13, 13, 13, 13, 19, 12, 12, 12, 19,  6,\n",
            "        6, 12,  6,  6,  6], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 15.232999999999995, 'isoG': 2, 'SC': 0.04922164023647114, 'CHZ': 36.791361321968346, 'DAVIES': 3.0894785011234585, 'grupos': array([ 6,  6,  6,  6,  0,  0,  0,  0, 13, 11,  0, 12, 13, 11, 12, 12,  3,\n",
            "        0,  3,  7,  7,  3,  3, 14,  8, 10, 10,  8,  9, 18, 18, 14, 14, 14,\n",
            "        8,  8,  1,  8,  9,  1,  8, 16, 19,  5,  5,  5,  5,  4, 17, 15, 15,\n",
            "        4,  4, 17, 17,  4,  4,  2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 9.114166666666666, 'isoG': 8, 'SC': -0.27881448714690565, 'CHZ': 53.53051425891567, 'DAVIES': 3.436368073544142, 'grupos': array([ 3,  3,  4,  4, 14, 17,  4,  7,  6, 16, 19,  6, 18,  7, 15, 16,  2,\n",
            "       18, 18,  7,  2,  2,  0,  1, 11, 11, 11,  1,  1, 11, 11,  1,  1, 12,\n",
            "       10,  9, 12,  5,  8,  5,  8,  8,  8, 13], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 18.278535714285713, 'isoG': 11, 'SC': 0.08537848189423422, 'CHZ': 46.08191505253432, 'DAVIES': 2.51606519195207, 'grupos': array([16, 16, 16, 16, 16, 16, 16, 16,  1,  4,  4,  4,  4,  4,  4,  4, 13,\n",
            "       13, 13, 13,  8,  8,  8,  8,  8,  8, 19, 19, 11, 19, 11, 11, 11, 11,\n",
            "       11, 11,  3,  1, 19, 19,  8,  8,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n",
            "       17, 10,  1,  5,  6,  9, 15,  7, 18,  0, 12,  0, 14,  0,  0,  0,  0,\n",
            "        0,  0,  0,  0,  0,  2,  2,  2,  2,  0,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.795416666666667, 'isoG': 5, 'SC': 0.22545242883483851, 'CHZ': 589.7440090472312, 'DAVIES': 2.6424525616724277, 'grupos': array([ 1,  5,  4,  4,  3,  4, 10,  1,  4,  3,  4,  4,  4,  3,  1,  1,  1,\n",
            "        1,  1,  4, 17,  3,  1,  6,  6,  7, 15,  8,  7,  8,  8,  8,  8,  8,\n",
            "        8, 13,  0, 13, 11, 11, 12, 16, 16, 12, 12, 16, 19, 18, 14, 14, 18,\n",
            "       18,  9,  9,  9, 14, 19, 19,  9,  9,  2,  2,  2,  2,  2,  2,  2,  2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.13166666666666665, 'isoG': 17, 'SC': -0.041666666666666435, 'CHZ': 122.21385742838109, 'DAVIES': 0.812647913194988, 'grupos': array([19, 15, 19, 14,  9,  2,  4,  1, 17, 18,  3,  3,  3,  1,  7, 10,  5,\n",
            "        8,  0, 11, 16, 12, 13,  6], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.2811190476190464, 'isoG': 7, 'SC': -0.01757708103859097, 'CHZ': 295.894698167367, 'DAVIES': 2.8141080126347404, 'grupos': array([ 4,  4,  4,  4, 12, 17,  0, 16, 13, 12,  3,  0,  3,  0,  3,  6,  3,\n",
            "        5,  6,  6, 15,  6,  6, 15, 10, 15, 14,  7,  5,  7, 18,  7,  7,  9,\n",
            "        9,  7,  8,  8,  8,  8, 19, 11,  1,  2,  2, 11,  2,  2,  2,  2,  2,\n",
            "        1], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.6633333333333336, 'isoG': 9, 'SC': 0.08957657762052627, 'CHZ': 350.60466385679786, 'DAVIES': 1.108012820513346, 'grupos': array([13, 13, 13,  2,  2,  2, 12, 12,  5,  5, 16, 17,  1,  1,  1,  1,  1,\n",
            "        7, 19,  1,  0,  7,  7,  0,  0,  0,  5, 15,  5,  5,  6,  5,  4,  4,\n",
            "        4,  8,  8,  9, 14, 18, 10,  3,  8, 11, 11,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 24.64999999999999, 'isoG': 18, 'SC': -0.13388061214148442, 'CHZ': 3.0614206547162683, 'DAVIES': 3.595621387348949, 'grupos': array([ 5,  3,  8,  4,  9,  2, 19, 17, 10, 15,  2, 13, 18,  0,  1, 13, 16,\n",
            "       11, 12, 14,  7,  6], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 166.90144230769224, 'isoG': 16, 'SC': -0.36301444436464364, 'CHZ': 2.6285145306988578, 'DAVIES': 0.7868625663274695, 'grupos': array([11, 11, 11, 11, 11, 17,  0, 13,  1, 15,  4,  1, 16, 19, 18, 14,  1,\n",
            "        7,  2, 11,  6, 10,  3, 12, 11, 11,  8,  5,  5,  5,  1,  1,  1,  9,\n",
            "        9,  1,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.04466666666666666, 'isoG': 16, 'SC': 0.12116477272727735, 'CHZ': 1175.7269245875884, 'DAVIES': 0.4630808080805838, 'grupos': array([19, 10,  3,  3, 14,  7,  9,  7,  7,  3,  8, 15,  3, 18,  1,  1,  1,\n",
            "        1,  2,  2, 17,  2, 16,  2,  2, 13, 11,  5,  0,  4, 12,  6],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.0, 'isoG': 19, 'SC': 0.0, 'CHZ': 1.0, 'DAVIES': 0.0, 'grupos': array([ 0, 15, 17, 12, 19, 16, 18, 15,  5, 13, 14,  7, 11,  8,  3,  1,  9,\n",
            "        6, 10,  2,  4], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 12.628309523809525, 'isoG': 0, 'SC': 0.31580218170179747, 'CHZ': 875.5697233359489, 'DAVIES': 2.982109484942172, 'grupos': array([ 1,  1, 11, 11, 16,  1,  1,  1, 16, 16, 16, 15, 15, 13, 18, 18, 13,\n",
            "       13, 18,  9,  9,  0,  9,  9,  9,  0,  0,  8,  8,  8,  8,  8,  2,  2,\n",
            "       19, 19,  2,  2,  2, 19, 19, 10, 10, 10, 10,  6,  6,  4,  4, 17, 17,\n",
            "        6,  6,  6,  6,  4,  4, 17, 17, 17,  3,  3, 14, 14, 14, 14, 14, 14,\n",
            "       14, 12, 12, 12, 12,  5,  5,  5,  5,  5,  7,  7,  7,  7,  7,  7,  7,\n",
            "        7,  7,  7], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.5753333333333329, 'isoG': 8, 'SC': 0.049961822533516796, 'CHZ': 309.92999887109625, 'DAVIES': 1.747480852481332, 'grupos': array([ 7,  1, 19,  0, 12, 10, 15,  4,  4, 12, 10, 10, 16,  0,  1,  4, 10,\n",
            "        0,  0,  0,  1,  1,  7, 14,  7, 17,  9,  6,  6,  2, 13,  8, 18,  2,\n",
            "        2, 18,  5, 11,  5,  8, 18,  3,  5,  3,  3,  3,  8], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 9.402166666666675, 'isoG': 2, 'SC': 0.05177110775184395, 'CHZ': 75.79988509617316, 'DAVIES': 2.3975995389442075, 'grupos': array([ 5,  5,  6,  6,  6,  6, 14, 14, 13, 13, 14, 14, 13, 19, 10, 10,  4,\n",
            "       16,  4, 16, 16, 15, 17,  3, 18,  0, 11, 11,  1,  1,  7, 15,  4, 15,\n",
            "        3, 11, 11, 16, 18, 11,  0,  7,  8,  9, 12,  8,  8, 12, 12,  9,  9,\n",
            "        2, 12,  9,  2,  2,  2,  2,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 6.935000000000003, 'isoG': 18, 'SC': -0.209617180205419, 'CHZ': 1.475796557001732, 'DAVIES': 4.05007613229203, 'grupos': array([ 1, 12,  1,  1, 17, 19,  3,  0,  8, 10, 10,  2,  1,  9,  7, 16, 11,\n",
            "       18, 14, 13, 15,  6,  5,  4], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "Error con SpectralClustering para PRT: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 4.492999999999999, 'isoG': 14, 'SC': -0.17920957001194518, 'CHZ': 9.78776479959538, 'DAVIES': 2.5583951586715306, 'grupos': array([ 1,  1,  1, 18,  5, 19,  5, 15, 13,  0,  6, 16, 10,  6,  4, 14,  4,\n",
            "        4,  8, 11,  7, 12, 17,  4,  9,  6,  3,  2,  9,  6,  6,  2,  2,  2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.574166666666668, 'isoG': 1, 'SC': 0.24354703528702049, 'CHZ': 628.3393022073046, 'DAVIES': 1.2284680134678343, 'grupos': array([13, 13, 13, 13, 13, 13,  1,  1,  1, 10, 10, 10, 11, 11, 11,  2,  2,\n",
            "        2,  2, 12, 12,  2,  2, 19, 12,  4, 19, 19,  4,  4,  4,  8,  8, 16,\n",
            "        0,  0,  9,  9,  9,  0,  0, 16,  0,  8,  7,  7, 17, 15,  7, 17,  5,\n",
            "        5, 18, 18, 14,  6,  6, 14,  6,  6,  3,  3,  6,  3,  3,  3,  3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 8.530333333333333, 'isoG': 3, 'SC': -0.032654462811498676, 'CHZ': 69.30206066518534, 'DAVIES': 5.656413310938087, 'grupos': array([ 4,  4,  4, 11,  2, 14, 15, 11, 11,  2, 14, 15, 11, 19, 13,  6, 10,\n",
            "        6,  5,  1,  9, 16,  7, 16, 12, 12,  6,  6, 10, 10,  1, 18,  5,  9,\n",
            "        5,  9,  2,  1,  9,  7, 16, 16, 16,  7,  3,  3,  3,  3, 17,  0, 17,\n",
            "       17,  8,  8,  0,  8,  8,  8], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 10.26666666666667, 'isoG': 5, 'SC': -0.09430774850770832, 'CHZ': 154.91166512059363, 'DAVIES': 3.0255047907940424, 'grupos': array([10,  0,  8, 10,  0, 10,  8,  9,  8,  0,  8, 16,  5,  9,  9,  5,  5,\n",
            "        5, 11, 11, 11,  6,  6, 15,  6, 19, 17,  6,  7,  7, 14,  7,  7, 14,\n",
            "        4,  4,  4, 13, 15,  6, 18,  6,  3,  1,  1,  2,  3,  3,  3,  1,  2,\n",
            "        2, 12, 12, 12, 12], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 56.58138888888888, 'isoG': 14, 'SC': -0.2656077632886053, 'CHZ': 2.8557927862027657, 'DAVIES': 1.5170374887572349, 'grupos': array([ 4,  4,  4,  4,  1, 18, 10, 16,  2,  2, 11, 15, 14,  0,  0,  0,  9,\n",
            "        7,  3,  6, 13, 19, 12,  7,  9, 17,  5,  5,  2,  2,  2,  2,  2,  2,\n",
            "        2,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 26.774166666666666, 'isoG': 17, 'SC': -0.280317507078444, 'CHZ': 3.448130866333041, 'DAVIES': 3.447309918442179, 'grupos': array([ 1,  1,  1,  1,  1,  1, 14, 17,  0, 18, 15,  3, 13, 11,  9, 12,  2,\n",
            "        2,  2, 16, 10, 19,  1,  5,  5,  4,  8,  6,  7,  5,  2],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.3150000000000002, 'isoG': 3, 'SC': 0.32572387407914244, 'CHZ': 4087.8227146814406, 'DAVIES': 0.9704255203576555, 'grupos': array([ 6, 11,  6,  1, 11,  1, 15, 14, 14, 14, 14, 15, 15,  1,  1, 11, 11,\n",
            "        6,  6, 11,  6,  6,  6,  6,  7, 19, 19,  7,  7,  7, 19,  7, 19,  7,\n",
            "        0,  4,  4,  4, 16, 16,  8,  8,  5,  5,  5, 10,  5,  5,  5, 12, 12,\n",
            "       12, 10, 10, 12,  3,  3,  2, 13, 13,  9,  9, 13, 13,  2,  2,  2,  2,\n",
            "        2, 18, 17,  2,  2,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "Error con SpectralClustering para CHL: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 11.173333333333332, 'isoG': 11, 'SC': -0.3601627978765156, 'CHZ': 20.03366715155738, 'DAVIES': 3.1581047277623893, 'grupos': array([ 3,  4, 14, 12, 19, 10,  4,  3,  7,  1,  7,  9,  1,  2,  9,  2, 17,\n",
            "        9, 11,  5, 13,  6,  6,  8, 18,  0, 15, 16,  6, 15,  8],\n",
            "      dtype=int32)}\n",
            "SpectralClustering"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 1.5875000000000001, 'isoG': 14, 'SC': 0.14998742939799242, 'CHZ': 33.512349772067964, 'DAVIES': 0.5765210277421808, 'grupos': array([ 2,  1,  1,  1,  1,  1,  2,  1,  0,  0, 19, 18, 17,  0,  0, 17, 15,\n",
            "       12, 13,  4, 10, 16,  4, 14,  7,  6,  8, 11,  5,  9,  3,  3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 0.6930000000000016, 'isoG': 13, 'SC': -0.2994973544973631, 'CHZ': 40.84073820915915, 'DAVIES': 2.5337362637331586, 'grupos': array([ 1,  3, 18, 16,  0, 12,  1,  1, 19,  2,  1,  6,  6,  1,  2,  3, 15,\n",
            "       15,  5,  9, 14,  8, 11,  9, 13, 17,  7,  4, 10,  4], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 3.7663095238095257, 'isoG': 6, 'SC': -0.19323188849867098, 'CHZ': 101.54484073444982, 'DAVIES': 3.5054978354986246, 'grupos': array([ 2,  2,  2,  6, 10,  5,  5,  6, 13, 15,  5,  8,  8, 11, 19, 11,  3,\n",
            "        4,  3, 17, 14,  9,  9, 12, 14, 17, 12,  4,  4,  3, 18,  4,  4,  4,\n",
            "       12,  9, 16,  0,  0,  7,  7,  7,  1,  7,  7,  1,  1,  7,  7,  1],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW "
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1600: RuntimeWarning: k >= N for N * N square matrix. Attempting to use scipy.linalg.eigh instead.\n",
            "  warnings.warn(\"k >= N for N * N square matrix. \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20 1 1 CORP\n",
            "Error con SpectralClustering para LVA: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.\n",
            "SpectralClustering RAW 20 1 1 CORP\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'CORP', 'wcss': 39.89416666666666, 'isoG': 17, 'SC': -0.049452442475682465, 'CHZ': 1.8677801634759021, 'DAVIES': 3.1045858613909454, 'grupos': array([ 2,  2,  6, 10,  8,  4, 14, 15, 17, 11, 16, 18, 13, 19,  0,  1,  2,\n",
            "        1, 12,  1,  9,  7,  1,  5,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 2.447821428571429, 'isoG': 2, 'SC': 0.19192013660000484, 'CHZ': 511.0684883223381, 'DAVIES': 1.3686437647836363, 'grupos': array([ 5,  5, 10, 10, 10, 10, 10, 10, 19, 19, 19, 13,  7, 19,  7,  7, 11,\n",
            "       12, 11, 18,  7,  8,  8,  4,  4, 12, 12, 12,  4, 16, 16, 16,  4, 17,\n",
            "       17,  1, 17,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,\n",
            "       15, 15,  0,  0, 14, 14, 14,  9,  9,  3,  3,  3,  6,  6,  6,  6,  6,\n",
            "        9,  3,  9,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.9191666666666642, 'isoG': 3, 'SC': -0.1311142681508811, 'CHZ': 98.50670655659637, 'DAVIES': 1.7232581453633713, 'grupos': array([ 8,  8,  8,  8,  8,  2,  8,  2,  2, 10, 10, 12, 12,  3, 12, 12,  3,\n",
            "        3, 14,  1,  1, 14, 17, 17,  1,  1, 15,  0, 17, 13, 18,  0, 13, 13,\n",
            "       19,  9,  9, 19, 16,  9,  5, 16, 16,  5,  6,  7,  7,  4,  6,  6,  7,\n",
            "       11, 11, 11], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 0.4475000000000002, 'isoG': 16, 'SC': -0.04545071205416575, 'CHZ': 93.623478862953, 'DAVIES': 0.8267513227514092, 'grupos': array([17,  2,  2,  2,  1,  2,  2, 19, 11,  7, 12, 16,  8,  5,  9,  6,  4,\n",
            "        4,  4,  4,  0, 14,  3, 18,  3, 10,  3, 15, 13, 10,  3],\n",
            "      dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.700749999999998, 'isoG': 4, 'SC': 0.21865213492984, 'CHZ': 338.34824134405216, 'DAVIES': 1.5413375000351164, 'grupos': array([ 8,  3,  3,  3,  3,  4,  3,  4,  3,  3,  3,  8,  8,  8, 12, 10,  5,\n",
            "        5,  5,  5, 10, 12, 12, 10, 12, 10, 12, 15,  6,  6,  6, 12,  6, 15,\n",
            "        6, 12, 11, 11,  7, 11, 17, 11, 17, 17,  7, 11, 17, 18, 16,  9, 19,\n",
            "       13, 16, 16,  1,  1,  1,  1,  1, 14, 14,  2, 14, 14, 17,  2,  2,  2,\n",
            "        0,  0,  0,  0], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 4.466416666666665, 'isoG': 12, 'SC': -0.06748905399161224, 'CHZ': 179.7265111281162, 'DAVIES': 1.203938032669349, 'grupos': array([ 9,  7, 13, 11,  5,  0,  0,  0,  0, 19, 15,  0, 16, 18, 10, 15,  7,\n",
            "        7,  3,  3, 14,  2,  2,  2,  2,  2, 17,  6,  6,  6,  4,  6,  6,  4,\n",
            "        4,  4,  1,  1,  8, 12,  1,  1,  1,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 7.397999999999994, 'isoG': 6, 'SC': -0.19327728255084667, 'CHZ': 60.44201862008653, 'DAVIES': 237268.79040138787, 'grupos': array([ 2,  2,  8, 10,  1,  8, 10, 11, 18, 16,  1,  8,  5, 19,  5,  5,  5,\n",
            "       19, 19,  3,  3,  3, 15,  9,  0,  3,  3, 15,  9, 12, 13, 12,  9, 13,\n",
            "       12,  6,  6, 15, 17, 14,  6,  6,  7,  7,  7,  4,  4], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 3.2359166666666654, 'isoG': 3, 'SC': 0.29573655037854374, 'CHZ': 646.7454572015685, 'DAVIES': 2.123094851609637, 'grupos': array([19, 11,  3,  3, 17, 15, 17,  3,  3, 17,  3, 11, 11, 11,  7,  7,  8,\n",
            "        8,  8,  4,  4, 14,  4,  4,  4, 14, 14, 18, 14,  2, 16, 16,  0,  0,\n",
            "        0,  0,  0,  0,  0,  0, 12, 16,  5, 16,  5,  5,  2,  2,  5, 16, 16,\n",
            "       12, 12, 10, 10, 10,  2, 10,  9,  9,  9,  9, 13,  6,  6,  6, 13,  1,\n",
            "        1,  6,  1,  1,  1], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 5.916476190476188, 'isoG': 3, 'SC': 0.019251666879079823, 'CHZ': 98.04088154484698, 'DAVIES': 4.141704028886489, 'grupos': array([ 1,  1,  1,  1, 12, 12, 12, 12, 16, 10, 12,  9, 16, 10,  9, 15, 19,\n",
            "       15, 19,  8,  8,  7,  7,  6,  2,  4,  4, 11,  2,  7,  7,  6,  7,  6,\n",
            "       18,  2,  2, 11,  2,  2,  2, 13, 11, 17,  5,  5,  5,  0, 14,  5,  5,\n",
            "        0,  0, 14, 14,  0,  0,  3,  3,  3], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 12.782999999999998, 'isoG': 5, 'SC': -0.30135014737242716, 'CHZ': 37.80424883976065, 'DAVIES': 6.300094251255667, 'grupos': array([ 4, 17,  1,  4, 17,  1,  4, 13,  5, 18, 13,  5,  7, 11, 19, 18,  0,\n",
            "        7,  7, 11,  0,  0, 15,  3, 15, 15, 15,  3,  3,  2,  2,  3,  3,  9,\n",
            "       16, 12,  9, 10, 14,  8, 14, 14, 10,  6], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n",
            "{'Algoritmo': 'SpectralClustering', 'Features': 'RAW', 'k': 20, 'eps': 1, 'min_sample': 1, 'Distance': 'SCOR', 'wcss': 19.003176767676766, 'isoG': 11, 'SC': 0.08261588985051847, 'CHZ': 44.2062787277507, 'DAVIES': 1.6891010020425703, 'grupos': array([ 6,  6,  6,  6,  6,  6,  6,  6,  0,  9,  9,  9,  9,  9,  9,  9, 17,\n",
            "       17, 17, 17,  4,  4,  4,  4,  4,  4,  4, 13, 13, 13, 13, 13, 13, 13,\n",
            "       13, 13, 11,  0,  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
            "        0,  3, 18, 12, 16,  7,  1, 19, 15,  8, 14, 10, 16,  5,  5,  5,  5,\n",
            "        5,  5,  5,  5,  5,  2,  2,  2,  2,  5,  2], dtype=int32)}\n",
            "SpectralClustering RAW 20 1 1 SCOR\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/manifold/_spectral_embedding.py:274: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    }
  ]
}